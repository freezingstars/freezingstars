<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网络基础知识</title>
    <link href="/2023/04/24/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/24/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>挺忙的</p><span id="more"></span><style>    strong{        color: red;    }    #div1 {        display: inline-block;    }    #div1 p{        border-style: solid;border-color: black;background-color: darkorange;text-align: center;color: white;font-size: 8px;    }    a strong{        text-decoration: none;color: white;    }    rt{        color: white;    }</style><h1 id="基础常识"><a href="#基础常识" class="headerlink" title="基础常识"></a>基础常识</h1><h2 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h2><p>网络实际是冷战的产物,是一种分散的指挥系统.最早叫做ARPANET(阿帕网).到1972年时,阿帕网上的网点数已经达到40个,可以相互传输小文本文件,也就是E-mail,也可以利用文件传输协议发送大文本文件,包括数据文件,即现在的FTP.<br>同时,也发现了将一台电脑模拟为另一台远程电脑的终端而使用远程电脑上资源的方法,被称为Telnet.由此可见,E-mail,FTP和Telnet是因特网上较早出现的重要工具,E-mail和FTP目前仍是因特网上最主要的内容.</p><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p>1972年,为了在不同计算机网络之间进行通信达成协议,会议决定成立Internet工作组,负责建立一种<strong>能保证计算机之间进行通信的标准规范即”通信协议”</strong><br>1973年,美国国防部也开始研究如何实现各种不同网络之间的互联问题,到了1974年,IP(Internet协议)和TCP(传输控制协议)问世,合称<strong>TCP&#x2F;IP协议</strong><br>这两个协议定义了一种在电脑网络间传送报文(文件或命令的方法).随后,美国国防部决定向全世界无条件提供TCP&#x2F;IP协议,即向全世界公布了电脑网络之间通信的核心技术,TCP&#x2F;IP协议的公开导致了Internet的迅速发展</p><p>到1980年,世界上既有使用TCP&#x2F;IP协议的ARPA网,也有很多使用其他通信协议的网络,为了连接这些网络,温顿·瑟夫提出了一个想法:在美国<strong>网络内部各自使用自己的通信协议,在和其他网络通信时使用TCP&#x2F;IP协议</strong>,使其利于厂商之间的公平竞争,不遵从则被剔除市场</p><p>TCP&#x2F;IP 具有五层模型</p><ol><li>物理层;和数据链路层都是由底层网络定义的协议</li><li><u>数据链路层</u> </li><li><u>网络层</u> ICMP IGMP IP ARP RARP</li><li><u>传输层</u> TCP UCP SCTP</li><li><u>应用层</u> HTTP FTP TFTP SMTP SNMP DNS</li></ol><p>早期的计算机网络主要是为了解决价格昂贵,电脑数量极少而产生,其形式是将一台计算机经过通信线路与若干台终端直接连接,我们也可以将其看做最简单的<strong>局域网雏形</strong><br>最早的Internet是由美国国防部高级研究计划局建立,如今计算机网络的许多概念和方法,如分组交换技术都来自ARPAnet.不仅进行了租用线互联的分组交换技术研究,而且做了无线,卫星网的分组交换技术研究,其结果便是TCP&#x2F;IP的问世</p><p>ARPAnet最大的贡献是<strong>TCP&#x2F;IP协议的问世</strong></p><p>第一阶段:远程通信连接<br>第二阶段:局域网通信<br>第三阶段:计算机网络互联,同时TCP&#x2F;IP协议诞生并广泛使用<br>第四阶段:信息高速公路,实际就是现代网络</p><p>中国网络从1987年开始通过中国学术网CANET向世界发出第一封E-mail为标志面世<br>第一阶段:87-93研究试验阶段,仅限于小范围内的电子邮件服务<br>第二阶段:94-96起步阶段,正式被承认为中国的互联网,同时96年网民已达到20W<br>第三阶段为97年到现在,是Internet在我国发展最为快速的阶段,截止03年,我国上网总人数到达6800W,比2002年增加了2220W人</p><p>中国的网络域名正式确认为cn</p><p>因特网是人类历史发展中的伟大里程碑,是未来信息高速公路的雏形,已经成为世界上覆盖面最广,规模最大,信息资源最丰富的计算机信息网络</p><h1 id="正式认识计网"><a href="#正式认识计网" class="headerlink" title="正式认识计网"></a>正式认识计网</h1><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><p>计算机网络:将分散的,具有独立功能的计算机系统通过通信设备与线路连接起来,由功能完善的软件实现资源共享和信息传递的系统<br>计算机网络是<strong>互联,自治</strong>的计算机集合<br>互联:通过通信链路互联互通<br>自治:无主从关系</p><h3 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h3><ol><li>数据通信:文件传输</li><li>资源共享:同一个计算机网络上的其他计算机可使用某台计算机的资源,可共享<strong>硬件,软件,数据</strong></li><li>分布式处理:多台计算机各自承担同一工作任务的不同部分<ol><li>提高可靠性:分布式处理的衍生,单台下线后其他计算机可以继续完成任务</li><li>负载均衡:任然是分布式处理的衍生<br>因特网的发展阶段:</li></ol></li><li>ARPAnet→internet→Internet</li><li>三层结构的因特网:主干,地区,本地</li><li>三层结构的衍生,将控制权分散给公司.ISP:因特网服务提供者&#x2F;商</li></ol><h3 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h3><ol><li>组成部分:<strong>硬件,软件,协议(一系列规则和约定的集合)</strong></li><li>工作方式:<ol><li>边缘部分:可以是大型计算机,也可以小型摄像头,是使用网络设备的总和,也是进程之间的通信<ul><li>C&#x2F;S方式:client&#x2F;server,客户端与服务器之间的通信</li><li>P2P方式:peer-to-peer,对等连接,服务者和客户端之间可以相互切换.实际就是允许客户机向另外一台客户机请求资源传输,可以随时切换服务端与客户端.</li></ul></li><li>核心部分:核心部分为边缘部分服务,包括路由器,中间部分等</li></ol></li><li>功能组成:<ol><li>通信子网 实现数据通信</li><li>资源子网 实现资源共享&#x2F;数据处理</li></ol></li></ol><img src="/img/网络模型.jpg">网络层:路由器等数据链路层:交换机,网桥物理层:集线器,中继器<p>按分布范围分:广域网WAN&amp;rt;城域网MAN&amp;rt;局域网LAN&amp;rt;个人区域网PAN&amp;rt;<br>按使用者分:公用网,专用网<br>按交换技术分:电路交换,报文交换,分组交换.<br>电路交换最经典的就是电话,当用户已经占用其中一条电路线时,其他用户无法使用(通话正忙).报文交换可以认为是分组的总和,可以统称为存储转发.存储转发通过路由器自动选择更快的方向进行传输,每个路由器都可以作为一个站点,仅占用一小段资源.<br>按拓扑结构分:总线型,星型,环形,网状型</p><p>按传输技术分:广播式网络(共享公共信道),点对点网络(使用分组存储转发与路由选择机制)</p><h3 id="标准化工作及其相关组织"><a href="#标准化工作及其相关组织" class="headerlink" title="标准化工作及其相关组织"></a>标准化工作及其相关组织</h3><p>要实现不同厂商的软,硬件相互连通,必须有一个统一的标准</p><ul><li>标准分类:<br>  1. 法定标准 由权威机构制定的正式的,合法的标准 <strong>OSI</strong><br>  2. 事实标准 某些公司产品在竞争中为主流,这些产品的协议和技术成为了标准</li></ul><p>RFC(Request For Comments)————————————因特网标准的形式<br>RFC上升至因特网正式标准的四个阶段:</p><ol><li>因特网草案:此时还不是RFC文档</li><li>建议标准:从这个阶段开始成为RFC文档(可以由他人进行补充修改)</li><li>草案标准:给IETF,IAB审核(现已取消)</li><li>因特网标准</li></ol><p>国际标准化组织ISO OSI参考模型,HDLC协议<br>国际电信联盟ITU制定通信规则<br>国际电子电气工程师协会IEEE学术机构,IEEE802,5G<br>Internet工程任务组IETF 负责因特网相关标准的制定 形式:RFC+数字编号</p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>速率:数据率&#x2F;数据传输率&#x2F;比特(1&#x2F;0)<br>连接在计算机网络上的主机在数字信道上传送数据位数的速率<br>单位有b&#x2F;Kb&#x2F;Mb&#x2F;Gb&#x2F;Tb每秒 一般使用比特代替字节作为传输速度单位,速率的单位转换为10^3,存储容量则是1024</p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>带宽:原本指某个信号具有的频带宽度,即最高频率与最低频率之差,单位是赫兹<br>计算机网络中,带宽用来表示网络的通信线路传送数据的能力,通常是指单位时间内从网络中的某点到另一点所能通过的<strong>“最高数据率”</strong>.单位是”比特每秒”,b&#x2F;s,kb&#x2F;s,Mb&#x2F;s,GB&#x2F;s<br>也可以认为是<strong>网络设备所支持的最高速度</strong><br>链路带宽&#x3D;1MB&#x2F;s 时<br>主机在1us(微秒)内可向链路发送1bit数据<br>链路以电磁波为载体,传播速率近光,但是传输过程中有损耗,所以1us可向前传播200m,可以认为每秒是2*10^8每秒<br>每一段距离内都有1比特的数据正在传输,一段时间内每个正在传输的比特都有其自己的动作</p><p>链路带宽&#x3D;2MB&#x2F;s 时<br>仅仅只是数据传输量变多了,可以认为是每段标准距离内有了两个比特</p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>吞吐量:表示在单位时间内通过某个网络(或信道,接口)的数据量.单位b&#x2F;s,kb&#x2F;s,Mb&#x2F;s等<br>吞吐量受网络的带宽或额定速率的限制<br>吞吐量指的是链路带宽与速率的最大公共值,如果链路带宽的传输速率为100MB&#x2F;s,但是服务器与交换机的传输速率仅有30MB&#x2F;s,则吞吐量为30MB&#x2F;s</p><p><strong>宽带是传输率,带宽是频率范围</strong></p><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>时延:指数据(报文&#x2F;分组&#x2F;比特流)从网络(或链路)的一端传送到另一端所需的时间.也叫延迟或迟延,单位是s<br>时延包含了:发送时延,传播时延,排队时延,处理时延<br>发送时延:数据长度&#x2F;信道带宽(以最后一个bit离开主机为准)<br>传播时延:取决于电磁波传播速度与链路长度<br>排队时延:信道占用警告,此时在路由器的缓存区进行等待<br>处理时延:路由器对数据检错与终点查验</p><h4 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h4><p><ruby>时延带宽积<rt>bit</rt></ruby>&#x3D; <ruby>传播时延<rt>s</rt></ruby> X <ruby>带宽<rt>b&#x2F;s</rt><ruby><br>时延带宽积又称为以比特为单位的链路长度,即<strong>“”</p><h4 id="往返时延RTT"><a href="#往返时延RTT" class="headerlink" title="往返时延RTT"></a>往返时延RTT</h4><p>从发送方发送数据开始,到发送方受到接收方的确认为止(接收方收到后立刻发送确认),总共经历的时延<br>RTT越大,在收到确认之前可发送的数据越多<br>RTT包括:往返传播时延(传播*2)和末端处理时间</p><h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><ol><li>信道利用率(数据通过时间&#x2F;总时长)</li><li>网络利用率(信道利用率加权平均值,利用率越高.时延越大)<br>网络利用率高后,信道占用率极大,速率变慢</li></ol><h2 id="体系结构-amp-参考模型"><a href="#体系结构-amp-参考模型" class="headerlink" title="体系结构&amp;参考模型"></a>体系结构&amp;参考模型</h2><h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h3><p>发送文件:</p><ol><li>发起通信的计算机必须将数据通信的通路进行激活</li><li>要告诉网络如何识别目的主机</li><li>发起通信的主机要查明目的主机是否开机,并与网络连接正常</li><li>发起通信的主机需查明对方计算机中文件管理程序是否做好准备工作</li><li>确保差错和意外能够解决</li></ol><p>如何分层:将最初的物件层层打包.打包前和解包后相同层数的实体被称为对等实体(每一层都是一个实体)<br>对等实体之间具有协议,非对等则无.相邻两层之间通过接口进行连接</p><p>基本规则:</p><ol><li>各层之间相互独立,每层仅实现一种相对独立的功能</li><li>每层之间界面自然清晰,易于理解,相互交流尽可能少</li><li>结构上可分割开.每层采用最合适的技术来使用</li><li>保持下层对上层的独立性,上层单项使用下层提供的服务.</li><li>整个分层结构应该能促进标准化工作</li></ol><h3 id="正式认识分层结构"><a href="#正式认识分层结构" class="headerlink" title="正式认识分层结构"></a>正式认识分层结构</h3><ol><li>实体:第n层中的活动元素称为n层实体.同一层的实体叫做对等实体</li><li>协议:为进行网络中的对等实体数据交换而建立的规则,标准或约定,称为网络协议(水平,可参考网络模型图)<ul><li>语法:规定传输数据的格式</li><li>语义:规定所要完成的功能</li><li>同步:规定各种操作的顺序</li></ul></li><li>接口(访问服务点SAP):上层使用下层服务的入口</li><li>下层为相邻上层提供的功能调用(垂直)</li></ol><p>每一层都可以拆出SDU,PCI,PDU<br>SDU:服务数据单元,为完成用户所要求的功能而传输的数据<br>PCI:协议控制信息:控制协议操作的信息<br>PDU:对等层次之间传送的数据单位</p><p>PCI+SDU&#x3D;PDU<br>PDU可以作为下一层的SDU<br>原数据+PCI&#x3D;PDU<br>PDU在上一层的基础上再加上PCI就成为一个全新的PDU,在本层PDU此时叫做SDU<br><img src="/img/分层结构.png"></p><p>网络体系结构是从<strong>功能</strong>上描述计算机网络结构<br>计算机网络体系结构简称网络体系结构是<strong>分层结构</strong><br>每层遵循某个&#x2F;些<strong>网络协议</strong>以完成本层功能<br><strong>计算机网络体系结构</strong>是计算机网络的各层及其协议的集合<br>第n层在向n+1层提供服务时,此服务不仅包含第n层本身的功能,还包含由下层服务提供的功能<br>仅仅在<strong>相邻层间有接口</strong>,且所提供服务的具体实现细节对上一层完全屏蔽<br>体系结构是<strong>抽象</strong>的,而实现是指能运行的一些软件和硬件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java学习</title>
    <link href="/2023/03/28/Java/"/>
    <url>/2023/03/28/Java/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Java常识类"><a href="#Java常识类" class="headerlink" title="Java常识类"></a>Java常识类</h1><p>长期支持版本(LTS ):JDK8、JDK11、JDK17<br>JavaSE:标准版，用于桌面应用的开发，是其他两个版本的基础.<br>JavaME:Java语言的标准版，用于嵌入式电子设备(电视机,照相机等)或小型移动设备.<br>JavaEE:Java语言的企业版,用于web方向的网页开发.<br>Java能做什么:<br>桌面应用开发工具:各种税务管理软件 IDEA Clion Pycharm.<br>企业级应用开发:微服务 springcloud<br>移动应用开发:鸿蒙 安卓 医疗设备<br>科学计算:matlab<br>大数据开发:Hadoop<br>游戏开发:Minecraft</p><p>高级语言编译:编程→编译→运行  计算机仅认识二进制代码,所以将代码进行编译再运行<br>编译运行方式有:编译型,解释型,混合型<br>Arm平台编译器→手机运行       X86平台编译器:电脑运行<br>编译型语言为整体编译(C)<br>解释型语言为逐行编译(Python)<br>混合型语言为整体编译为一个字节码文件(.class)而后再交给设备逐行翻译.此时代码运行在虚拟机上,而非直接运行与系统中.虚拟机由Java自带模块提供.<br>Java语言的跨平台通过虚拟机运行,针对不同操作系统可安装不同的虚拟机.</p><p>JRE与JDK:<br>JDK(Java开发工具包):JVM 核心类库 开发工具<br>JRE(Java的运行环境):JVM 核心类库 运行工具<br>内存大小:JDK&gt;JRE&gt;JVM</p><p>注释(Java):<br>单行注释 &#x2F;&#x2F;<br>多行注释 &#x2F;&amp;42;  &amp;42;&#x2F;<br>文档注释 &#x2F;&amp;42;&amp;42; &amp;42;&#x2F;<br>文档注释主用于说明文档中,工具可用此将代码文件中的注释自动转换于说明文档之中<br>注释书写请勿嵌套</p><p>main代码:main方法,表示程序主入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>打印内容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br></code></pre></td></tr></table></figure><p>关键字:特殊含义的单词<br>关键字字母全小写,编译期内高亮显示<br>class:用于创建&#x2F;定义一个类,类是Java最基本的储存单元</p><p>字面量:数据在程序中的书写格式<br>整数:不带小数点的数字<br>小数:带小数点<br>字符串:用双引号括起来的内容<br>字符:用单引号括起来,内容只能有一个(A,0,我)<br>布尔:真假(true,false)<br>空:空值,不能直接打印,仅能以字符串方式进行打印<br>\t 制表符,将字符串长度补充至8的整数倍<br>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;name&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;age&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;S&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;20&quot;</span>);<br></code></pre></td></tr></table></figure><p>变量:当某个数据经常发生改变时,用变量进行储存.当数据变化时,仅修改变量里面记录的值.<br>数据类型 变量名 &#x3D; 数据值;<br>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>System.out.println(a);<br>System.out.println(a + b);<br></code></pre></td></tr></table></figure><p>可以仅打印变量名,变量同时仅能赋予一个值,变量名仅可定义一次,一条语句可定义多个变量<br>使用下列进行变量值修改与多定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>,b = <span class="hljs-number">20</span>,c = <span class="hljs-number">40</span>;<br>a = <span class="hljs-number">45</span>;<br></code></pre></td></tr></table></figure><p>定义变量的数据类型后必须进行赋值,赋值操作在使用之前</p><p>变量运算:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">a = a + <span class="hljs-number">10</span>;<br>a = a - <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>计算机储存规则:<br>任意数据均以二进制进行存储<br>文本数据:<br>储存为ASCII码<br>汉字等字符有<br>GB2313 1981.5.1发布的简中汉字编码国家标准<br>BIG5:台湾地区繁体中文标准字符集<br>GBK编码:2000.3.17发布,Windows默认码表 包含GB13000-1中的中日韩汉字和BIG5编码中的汉字<br>Unicode编码:国际标准字符集(万国表),将世界语言的每个字符定义一个唯一的编码,满足跨语言与平台的文本信息转换</p><p>图片数据:<br>黑白图:以0&#x2F;1在代表每一格的属性<br>灰度图:更高级的黑白图,映入了不同的灰度表示每一格<br>彩图:以红绿蓝三种颜色的”灰度”表示一格内的颜色属性,取值范围为0~255</p><p>数据类型<br>整数:byte,short,int(默认),long<br>浮点数:float,double(默认)<br>字符:char<br>布尔:boolean<br>内存占用分别为 1 2 4 8 4 8 2 1<br>每种数据类型都有不同取值范围<br>当定义long类型数据变量时,可以加L在末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">9999999999L</span>;<br></code></pre></td></tr></table></figure><p>布尔类可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>命名方法:<br>对于变量和方法首字母小写,若由多个单词组成,后续单词首字母大写<br>对于类的首字母大写,由多个单词组成时每个单词首字母大写</p><p>Scanner的使用:<br>接收键盘输入的数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-comment">//导入包,必须出现在类的定义之前</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in); <span class="hljs-comment">//sc为变量名,可变,其他不可</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt(); 取变量sc的值作为Int类型为变量i进行赋值<br></code></pre></td></tr></table></figure><p>IDEA中的项目结构:<br>project(项目)<br>    module(模块)<br>        package(包)<br>            class(类)</p><p>运算符:对字面量或者变量进行操作的符号<br>表达式:用运算符把字面量或者变量连接起来,符合Java语法的式子就可以称为表达式,不同运算符连接的表达式体现的是不同类型的表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> b + c;<span class="hljs-comment">//算术表达式</span><br></code></pre></td></tr></table></figure><p>算数运算符<br>加减乘除:+ - * &#x2F;<br>取余&#x2F;模:%<br>数值拆分例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;输入三位数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> number % <span class="hljs-number">10</span>;  <span class="hljs-comment">//将数据不断除十,余下值赋予变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> number /<span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<span class="hljs-comment">//数据先除十,余下同上</span><br><span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> number / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>;<br>System.out.println(ge);<br>System.out.println(shi);<br>System.out.println(bai);<br></code></pre></td></tr></table></figure><p>当输入数值为408时<br>408 % 10得40余8,余值赋予给变量<br>408 &#x2F; 10 % 10 &#x3D; 40.8 % 10 &#x3D; 0 ,此时0.8为浮点数无法正常输出,所以输出值为0<br>408 &#x2F; 100 % 10 &#x3D; 4.08 % 10 &#x3D; 0余4 输出为4</p><p>当数字进行运算时,数字类型需要转换成相同类型再进行运算<br>隐式转换(自动类型提升):取值范围小的数值提升为取值范围大的,由程序自动完成,byte short char三种数据类型都会直接先提升为int类型再进行运算<br>强制转换:大变小</p><p>取值范围从小到大:byte &amp;lt short &lt; int &amp;lt long &lt; float &lt; double</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a;  <span class="hljs-comment">//此时a输出结果为10.0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)a; <span class="hljs-comment">//强制转换后丢失精度,12.3→12</span><br></code></pre></td></tr></table></figure><h2 id="强制转换为字符串"><a href="#强制转换为字符串" class="headerlink" title="强制转换为字符串"></a>强制转换为字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (String)num;<span class="hljs-comment">//或者</span><br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>+num;<span class="hljs-comment">//亦可</span><br><span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> String.valueOf(num);<br></code></pre></td></tr></table></figure><p>+:<br>当加号运算中出现字符串时,”+”为字符串连接符,而不是算术运算符,前后数据拼接后产生新的字符串.”123”+123 → 123123.连续进行”+”操作时,从左到右逐个执行.123+123+”123” → 246123.带上双引号变为字符串.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>System.out.println(<span class="hljs-string">&quot;我的年龄&quot;</span> + age + <span class="hljs-string">&quot;岁&quot;</span>);   <span class="hljs-comment">//我的年龄18岁</span><br>System.out.println(<span class="hljs-string">&quot;我的年龄&quot;</span> + <span class="hljs-string">&quot;age&quot;</span> + <span class="hljs-string">&quot;岁&quot;</span>);  <span class="hljs-comment">//我的年龄age岁</span><br>System.out.println(<span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">2</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">//当运算至3abc时,整体变为字符串值,之后实为字符串连接操作,使得输出结果变为3abc21</span><br></code></pre></td></tr></table></figure><p>字符 + 字符&#x2F;数字 时,会把字符通过ASCII码表查询到对应的数字再进行计算<br>重要数值65:A 97:a</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">1</span> + <span class="hljs-string">&#x27;a&#x27;</span>);  <span class="hljs-comment">//98</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-string">&quot;bc&quot;</span>); <span class="hljs-comment">//abc,因为出现&quot;bc&quot;,所以变为连接符</span><br></code></pre></td></tr></table></figure><p>自增&#x2F;减运算:<br>变量值加&#x2F;减1: ++&#x2F;–a; 符号放在变量前后皆可,亦可以参与至运算之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>a++;<br>a--:<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a++;<span class="hljs-comment">//此时为先加后用</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ++a;<span class="hljs-comment">//此时为先用后加</span><br>System.out.println(a); <span class="hljs-comment">//12,变量a已经自增两次</span><br>System.out.println(b); <span class="hljs-comment">//10,赋值时a还未自增</span><br>System.out.println(c); <span class="hljs-comment">//12,赋值时为自增两次的a</span><br></code></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符:"></a>赋值运算符:</h2><p>+&#x3D; -&#x3D; &amp;42;&#x3D; &#x2F;&#x3D; %&#x3D; 先运算再赋值,符号带有强制类型转换的性质</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>a += b; <span class="hljs-comment">//a+b后将结果赋值给b,等同于a = (int)(a + b);</span><br>System.out.println(a);<br>System.out.println(b);<br></code></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符:"></a>关系运算符:</h2><p>用于判断是否成立,成立则输出true,反之为false.html中不好显示,所以采用代码形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">== 相等<br>!= 不等<br>&gt;= 大于等于<br>&lt;= 小于等于<br>&lt;  小于<br>&gt;  大于<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a;<br>System.out.println(a == b);<span class="hljs-comment">//输出结果为true</span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符:"></a>逻辑运算符:</h2><p>Java中表示5&lt;10&lt;15需要拆分运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&amp; 与(二者同真为真)<br>| 或(有一边真则真)<br>^ 异(不同为<span class="hljs-literal">true</span>)<br>! 非(取反)<br></code></pre></td></tr></table></figure><h2 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符:"></a>短路逻辑运算符:</h2><p>&amp;&amp;  有一个假则为假&#x2F;同真为真<br>||  有一个真则为真&#x2F;同假为假<br>当运算符左边能确定为最终结果,则不会再进行运算,提高了效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> ++a &lt; <span class="hljs-number">5</span> &amp;&amp; ++b &lt; <span class="hljs-number">5</span>; <span class="hljs-comment">//a为false后,&amp;&amp;后面的代码不生效</span><br>System.out.println(a);  <span class="hljs-comment">//11</span><br>System.out.println(b);  <span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure><p>最为常用的逻辑运算符:<br>&amp;&amp; || !</p><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符:"></a>三元运算符:</h2><p>可以用于判断,根据判断结果不同而得到不同内容<br>格式:关系表达式?表达式1:表达式2;<br>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> number1 &gt; number2 ? number1 : number2;  <span class="hljs-comment">//若number&gt;number2为true,则表达式1赋值给max</span><br><span class="hljs-comment">//三元表达式的结果一定要被使用,否则报错</span><br>System.out.println(max);  <span class="hljs-comment">//或者将表达式直接写在括号内</span><br></code></pre></td></tr></table></figure><p>比大小案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请分别键入体重&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">w1</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">w2</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> w1 &gt; w2 ? <span class="hljs-string">&quot;第一只&quot;</span> : <span class="hljs-string">&quot;第二只&quot;</span>;<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级:"></a>运算符优先级:</h3><p>内容过多,所以仅需要记住→ () ←为最高优先级</p><p>原码 反码 补码:<br>原码:十进制的二进制表现形式,最左边为符号位,0正1负<br>反码:正数的反码是自己,负数的反码符号位不变,其余取反<br>补码:正数为其本身,负数为补码的基础上+1<br>01111111:+127<br>11111111:-127<br>00000000:1<br>使用原码进行运算则很容易出现问题,负数的运算结果和预期是相反的<br>10000000 + 1 &#x3D; 10000001 &#x3D; -1<br>反码此时作为解决原码不能计算负数的方法出现<br>当反码运算跨0时,则易出现问题,反码运算跨0时有一个单位的误差,需要再加&#x2F;减1.反码中0有<u>00000000</u>和<u>11111111</u>两种表达方式<br>11111010 + 00000110 &#x3D; -5 + 6 &#x3D; 00000000 &#x3D; 0<br>在补码中,0的表达方式仅有00000000.<br>数字的存储和运算都以补码的形式进行,所以<strong>补码为最终解法</strong>.补码的最小值为-128(10000000),没有原码和反码的数值可对应</p><p>一个字节为8个比特位,所以byte为8比特位数据类型(0000 0000);short为16比特位(0000 0000 0000 0000),以此类推(字节&amp;42;8)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>; <span class="hljs-comment">//0000 0000 0000 0000 0000 0001 0010 1100</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>); <span class="hljs-comment">// 0010 1100 强制转换后仅获取了后八个比特位</span><br>System.out.println(b); <span class="hljs-comment">//此时输出为44</span><br></code></pre></td></tr></table></figure><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符:"></a>其他运算符:</h3><table><thead><tr><th align="center">运算符</th><th align="center">含义</th><th align="center">运算规则</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">逻辑与</td><td align="center">0 false 1 true</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">逻辑或</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左移</td><td align="center">向左移动,低位补0</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移</td><td align="center">向右移动,高位补0或1</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">无符号右移</td><td align="center">向右移动,高位补0</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<span class="hljs-comment">//二进制后八位1100 1000</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//二进制后八位0000 1010</span><br>System.out.println(a &amp; b); <span class="hljs-comment">//输出8  ↑此处相等,仅继承此位,结果为0000 1000</span><br>System.out.println(a | b); <span class="hljs-comment">//输出202,有1则1,无需相等,结果为1100 1010</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">short</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>; <span class="hljs-comment">//二进制为0000 0000 1100 1000</span><br>System.out.println(a &lt;&lt; <span class="hljs-number">2</span>);<span class="hljs-comment">//左移2位变成0000 0011 0010 0000</span><br> <span class="hljs-comment">//补上的0↑↑</span><br>System.out.println(a &gt;&gt; <span class="hljs-number">2</span>);<span class="hljs-comment">//0000 0000 0011 0010</span><br><span class="hljs-comment">//↑符号位继承,其他位补0</span><br></code></pre></td></tr></table></figure><p>无符号右移仅补0,不管符号位</p><p>作用域(生命周期):<br>Java中的每一对{}为一个代码块,代码块之间分级嵌套.变量等数据可由高向低继承,不可逆.不可在低级代码块中定义与外部(高级)代码块同名的变量.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>x++;<br>y++;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; <span class="hljs-comment">//error</span><br>&#125;<br>x--;<br>y--;  <span class="hljs-comment">//超出变量y作用域,报错</span><br>&#125;<br></code></pre></td></tr></table></figure><p>流程控制语句:<br>顺序结构:代码由上到下逐行执行<br>分支结构:<br>if语句(语句体内可嵌套if语句)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;键入一个数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//关系表达式输出一个布尔类型值,true则继续运行,false跳过</span><br>System.out.println(<span class="hljs-string">&quot;正数&quot;</span>);<br>&#125;<br><span class="hljs-comment">//boolean flag = true;</span><br><span class="hljs-comment">//if(flag) ←当布尔值为true时则可直接进行下一步</span><br></code></pre></td></tr></table></figure><h2 id="if分支语句"><a href="#if分支语句" class="headerlink" title="if分支语句"></a>if分支语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//变量</span><br><span class="hljs-comment">//变量</span><br><span class="hljs-comment">//变量</span><br><span class="hljs-comment">//if (关系表达式)&#123;</span><br><span class="hljs-comment">//语句体;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//if (关系表达式)&#123;</span><br><span class="hljs-comment">//语句体;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//if (关系表达式)&#123;</span><br><span class="hljs-comment">//语句体;</span><br><span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure><p>因为if语句的分支过于繁杂,所以大部分情况下将使用switch语句进行代替</p><h3 id="if的else语句"><a href="#if的else语句" class="headerlink" title="if的else语句:"></a>if的else语句:</h3><p>当if中的关系表达式输出结果为false时,则输出else的语句体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入身上钱数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-keyword">if</span> (money &gt; <span class="hljs-number">15</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;在食堂吔饭&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;恰泡面吧&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if的嵌套与else-if"><a href="#if的嵌套与else-if" class="headerlink" title="if的嵌套与else if"></a>if的嵌套与else if</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个大于0小于10的值&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">10</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;?再看看要求?&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;?再看看要求?&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;确实是按要求输入了&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;键入的值为&quot;</span>+a);<br>&#125;<br><span class="hljs-comment">// 也可以if(a &gt; 0 &amp;&amp; a &lt; 10)</span><br></code></pre></td></tr></table></figure><p>流程控制(跳转):<br>顺序,循环,选择<br>循环控制break(打破),continue(继续),return(返回值)</p><h2 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br><span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>语句体;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>:<br>语句体;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>语句体n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不加break跳出,在执行值1后会继续对值2的结果继续执行,直到将所有分支执行完毕<br>默认取值为byte short int char,JDK5后加入枚举常量,JDK7后可以是String(字符串)<br>case给出的值只能是字面量,不能是变量<br>default可以不加,但是加入会让语句更加严禁,对均不符合的值进行默认处理.default可以写在语句中的任何位置,不一定要写在最后.</p><p>高版本扩展:<br>使123分别输出一二三</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; &#123;<br>System.out.println(<span class="hljs-string">&quot;一&quot;</span>);<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; &#123;<br>System.out.println(<span class="hljs-string">&quot;二&quot;</span>);<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span> -&gt;&#123;<br>System.out.println(<span class="hljs-string">&quot;三&quot;</span>);<br>&#125;<br><span class="hljs-keyword">default</span> -&gt;&#123;<br>System.out.println(<span class="hljs-string">&quot;不是有效值&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 如果语句仅有一句,可省略为case 1 -&gt; System.out.println(&quot;一&quot;)</span><br><span class="hljs-comment">//case 2 -&gt; System.out.println(&quot;二&quot;)</span><br><span class="hljs-comment">//default -&gt; System.out.println(&quot;不是有效值&quot;)</span><br></code></pre></td></tr></table></figure><p>jdk12的扩展输入方式自带break效果</p><p>根据成绩给学生评等级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入成绩&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        <span class="hljs-keyword">switch</span> ((<span class="hljs-type">int</span>)grade/<span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>,<span class="hljs-number">9</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;中等&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">default</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化语句;判断语句;循环控制语句)&#123;<br>循环体语句;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印十次hello world</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123; <span class="hljs-comment">//使用int i = 1在此直接对i进行初始化赋值也行</span><br>System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在对循环内的变量进行初始化赋值时,此为一个临时变量,在循环体结束后便会被摧毁,所以可以在不同循环中出现同一个int i &#x3D; 1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;c&lt;=<span class="hljs-number">5</span>;c++) &#123;<br>System.out.println(<span class="hljs-string">&quot;正在重连&quot;</span>+c+<span class="hljs-string">&quot;/5&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="累加"><a href="#累加" class="headerlink" title="累加"></a>累加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>sum += i;<br>System.out.println(sum);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-100求偶数和"><a href="#1-100求偶数和" class="headerlink" title="1-100求偶数和"></a>1-100求偶数和</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br><span class="hljs-keyword">if</span> (i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>sum += i;<br><span class="hljs-keyword">if</span> (i==<span class="hljs-number">100</span>)&#123;<br>System.out.println(sum);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="键盘录入两个表示范围的数字-统计此范围中能被3和5整除的数字有几个"><a href="#键盘录入两个表示范围的数字-统计此范围中能被3和5整除的数字有几个" class="headerlink" title="键盘录入两个表示范围的数字,统计此范围中能被3和5整除的数字有几个"></a>键盘录入两个表示范围的数字,统计此范围中能被3和5整除的数字有几个</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java">System.out.println(<span class="hljs-string">&quot;请输入数值&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> num.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;请再次输入数值&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num.nextInt();<br>        <span class="hljs-type">int</span> c; <span class="hljs-comment">//当用户输入从大到小时,将数值对调使数据重新变为从小到大</span><br>        <span class="hljs-keyword">if</span> (num1 &gt; num2)&#123;<br>            c = num1;<br>            num1 = num2;<br>            num2 = c;<br>        &#125;<br>        c = <span class="hljs-number">0</span>;  <span class="hljs-comment">//为之后重复使用准备</span><br>        <span class="hljs-keyword">for</span> (num1=num1;num1&lt;=num2;num1++)&#123;<br>            <span class="hljs-keyword">if</span>(num1%<span class="hljs-number">3</span> == <span class="hljs-number">0</span> &amp;&amp; num1%<span class="hljs-number">5</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(num1);<br>                c++;  <span class="hljs-comment">//重新利用变量c进行统计</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(num1 == num2) &#123;<br>                System.out.println(<span class="hljs-string">&quot;所以一共有&quot;</span> + c + <span class="hljs-string">&quot;个数字&quot;</span>);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="求验证质数或合数"><a href="#求验证质数或合数" class="headerlink" title="求验证质数或合数"></a>求验证质数或合数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> num.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;a/<span class="hljs-number">2</span>;i++)&#123;  <span class="hljs-comment">//亦可求取小于根号</span><br>            <span class="hljs-keyword">if</span>(a % i == <span class="hljs-number">0</span>) &#123;<br>                b++;<br>            &#125;<br>        &#125;<span class="hljs-keyword">if</span>(b != <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;是合数&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;是质数&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>for与while的运行规则是一样的<br>for循环中控制循环的变量在for循环结束后便无法再次访问<br>while循环中控制循环的变量不属于while语法结构,在while循环结束后仍可继续使用<br>条件为false时跳出循环</p><p>for循环知道循环次数或者范围,而while循环仅知道结束条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">初始化语句;<br><span class="hljs-keyword">while</span>(条件判断语句)&#123;<br>循环体语句;<br>条件控制语句;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>&lt;<span class="hljs-number">4</span>)&#123;<br>i++;<br>&#125;<br>System.out.println(i);<br></code></pre></td></tr></table></figure><p>折纸与珠穆朗玛峰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">double</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">8844430</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">paper</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(paper &lt; height)&#123;<br>paper = paper*<span class="hljs-number">2</span>;<br>count++;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;折纸&quot;</span>+count+<span class="hljs-string">&quot;次后可达到珠穆朗玛峰高度&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><p>不常用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>i++;<br>System.out.println(<span class="hljs-string">&quot;学习&quot;</span>);<br>&#125;<span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">5</span>); <span class="hljs-comment">//当满足条件时,输出为true,则再进行一次循环,此处可放true进行无限循环</span><br></code></pre></td></tr></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><p>break打破循环<br>continue结束本次循环</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">replaceAll(<span class="hljs-string">&quot;查找的字符串&quot;</span>,<span class="hljs-string">&quot;替换的字符串&quot;</span>);<br>replaceFirst(<span class="hljs-string">&quot;查找的字符串&quot;</span>,<span class="hljs-string">&quot;替换的字符串&quot;</span>);<span class="hljs-comment">//仅替换首个被查找的</span><br></code></pre></td></tr></table></figure><h2 id="字符串的拆分"><a href="#字符串的拆分" class="headerlink" title="字符串的拆分"></a>字符串的拆分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">数组名.split(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//以逗号为间隔拆分两次,全拆可以输入(&quot;,&quot;)</span><br><span class="hljs-comment">//(&quot;\\.&quot;);此种用于拆分不了的情况下转义拆分</span><br></code></pre></td></tr></table></figure><h2 id="字符串与字符数组的转换"><a href="#字符串与字符数组的转换" class="headerlink" title="字符串与字符数组的转换"></a>字符串与字符数组的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloword&quot;</span>;<br> <br><span class="hljs-type">char</span> [] result= str.toCharArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;x &lt; result.length;x++)&#123;<br>    <span class="hljs-comment">//编码减少32，将小写转换成大写字符</span><br>    result[x] -= <span class="hljs-number">32</span>;<br>&#125;<br><span class="hljs-comment">//将处理后的字符数组交给String变为字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">newStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(result);<br>System.out.println(newStr);<br><span class="hljs-comment">//若要取部分字符串,取从0开始到5结束的字符</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(result,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h2 id="大小比较"><a href="#大小比较" class="headerlink" title="大小比较"></a>大小比较</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> Test;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <br><span class="hljs-comment">//字符串比较</span><br>        <span class="hljs-comment">//1、public boolean euqals(String anObject)：区分大小写的相等比较</span><br>        <span class="hljs-comment">//进行字符串区分大小写等值比较</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABC&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>        System.out.println(strA.equals(strB));<span class="hljs-comment">//结果为false</span><br> <br>        <span class="hljs-comment">//2、public boolean equalsIgnoreCase(String anotherString):不区分大小的比较</span><br>        <span class="hljs-comment">//进行字符串不区分大小写等值比较</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABC&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>        System.out.println(strA.equalsIgnoreCase(strD));<span class="hljs-comment">//结果为true</span><br> <br>        <span class="hljs-comment">//3、public int compareTo(String anotherString):进行字符串大小比较，该方法返回一个int型数据，该数据有三种取值：大于（&gt;0)、小于（&lt;0）、等于（=0）</span><br>        <span class="hljs-comment">//进行字符串区分大小比较</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mmh&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strF</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mmH&quot;</span>;<br>        System.out.println(strE.compareTo(strF));<span class="hljs-comment">//结果为32  说明：strE &gt; strF</span><br>        System.out.println(strF.compareTo(strE));<span class="hljs-comment">//结果为-32  说明：strF &gt; strE</span><br>        System.out.println(<span class="hljs-string">&quot;HELLO&quot;</span>.compareTo(<span class="hljs-string">&quot;HELLO&quot;</span>));<span class="hljs-comment">//结果为0    说明：&quot;HELLO&quot; = &quot;HELLO&quot;</span><br> <br>        <span class="hljs-comment">//4、public int compareToIgnoreCase(String str):不区分大小写进行字符串比较</span><br>        <span class="hljs-comment">//进行字符串不区分大小比较</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MMh&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mmH&quot;</span>;<br>        System.out.println(strE.compareToIgnoreCase(strH));<span class="hljs-comment">//结果为0  说明：strH = strG  </span><br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串是否相等"><a href="#字符串是否相等" class="headerlink" title="字符串是否相等"></a>字符串是否相等</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">Objects.equals(字符串<span class="hljs-number">1</span>,字符串<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="字符串的连接"><a href="#字符串的连接" class="headerlink" title="字符串的连接"></a>字符串的连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">原字符串 = 原字符串.concat(<span class="hljs-string">&quot;新内容&quot;</span>);<br><span class="hljs-comment">//或者 字符串1.append(字符串2);</span><br></code></pre></td></tr></table></figure><h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">原字符串.substring(起始值,终止值);<br></code></pre></td></tr></table></figure><h2 id="字符串的删除"><a href="#字符串的删除" class="headerlink" title="字符串的删除"></a>字符串的删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">原字符串名.delete(起始值下标,终点值);<span class="hljs-comment">//后面那个不是下标,只是终点值而已</span><br></code></pre></td></tr></table></figure><h2 id="字符串查询"><a href="#字符串查询" class="headerlink" title="字符串查询"></a>字符串查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;百度:www.baidu.com&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">SubStr1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;baidu&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">SubStr2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;com&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;查找字符 o 最后出现的位置 :&quot;</span> );<br>        System.out.println(Str.lastIndexOf( <span class="hljs-string">&#x27;o&#x27;</span> ));<br>        System.out.print(<span class="hljs-string">&quot;从第14个位置查找字符 o 最后出现的位置 :&quot;</span> );<br>        System.out.println(Str.lastIndexOf( <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-number">14</span> ));<br>        System.out.print(<span class="hljs-string">&quot;子字符串 SubStr1 最后出现的位置:&quot;</span> );<br>        System.out.println( Str.lastIndexOf( SubStr1 ));<br>        System.out.print(<span class="hljs-string">&quot;从第十五个位置开始搜索子字符串 SubStr1最后出现的位置 :&quot;</span> );<br>        System.out.println( Str.lastIndexOf( SubStr1, <span class="hljs-number">15</span> ));<br>        System.out.print(<span class="hljs-string">&quot;子字符串 SubStr2 最后出现的位置 :&quot;</span> );<br>        System.out.println(Str.lastIndexOf( SubStr2 ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h2><p>words.charAt(0) &#x2F;&#x2F;输出下标为0处的字符<br>去除字符串首尾空格<br>String trim()<br>类型转换</p><h1 id="Math的使用"><a href="#Math的使用" class="headerlink" title="Math的使用"></a>Math的使用</h1><p>Math.用法(数值1,数值2);</p><p>求取一个数的次方根,保留整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">float</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> num.nextInt();<br>        <span class="hljs-keyword">if</span> (a&gt;=<span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) Math.pow(a, <span class="hljs-number">0.5</span>);<br>            System.out.println(b);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入的不是有效值&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">方法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">abs</td><td align="center">取绝对值</td></tr><tr><td align="center">max(a,b)</td><td align="center">取最大值</td></tr><tr><td align="center">min(a,b)</td><td align="center">取最小值</td></tr><tr><td align="center">pow(a,b)</td><td align="center">取a的b次方</td></tr><tr><td align="center">sqrt</td><td align="center">取平方根</td></tr><tr><td align="center">cbrt</td><td align="center">取立方根</td></tr></tbody></table><h1 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random; <span class="hljs-comment">//用此导入dandom包</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(); <span class="hljs-comment">//此处r为变量名</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(随机数的范围);<br><span class="hljs-comment">//int number = r.nextInt(100)+10; 此时输出为10~109,起始点为0</span><br></code></pre></td></tr></table></figure><p>1~100,猜数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (a != number) &#123;<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            a = input.nextInt();<br>            <span class="hljs-keyword">if</span> (a &gt; number)&#123;<br>                System.out.println(<span class="hljs-string">&quot;大了&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; number) &#123;<br>                System.out.println(<span class="hljs-string">&quot;小了&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数组-array"><a href="#数组-array" class="headerlink" title="数组(array)"></a>数组(array)</h1><p>数组可以存储同种数据的多个值,存储时需考虑隐式转换<br>布尔类型值不能存储,int类型值只能存储byte short int,以此类推</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//数组的两种声明格式</span><br><span class="hljs-type">int</span>[] arr1 =&#123;&#125;;<br><span class="hljs-type">int</span> arr2[] =&#123;&#125;;<br></code></pre></td></tr></table></figure><p>定义的数据为字符串时,需要用到String<br>当你需要将字符串转换为其他类型的值时,使用静态方法Integer,其中parseInt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">String[] arr = &#123;<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;wangwu&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组的静态初始化"><a href="#数组的静态初始化" class="headerlink" title="数组的静态初始化"></a>数组的静态初始化</h2><p>其实就是完整版的格式,一般也不用在等号后面加new 数组类型[]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;;<br></code></pre></td></tr></table></figure><h2 id="地址值"><a href="#地址值" class="headerlink" title="地址值"></a>地址值</h2><p>直接用输出数组(arr)的时候输出为地址值,表示在内存中的位置<br>地址格式[I@7ef20235<br>其中 [ 表示这是一个数组<br>其中 I 表示这是int类型<br>其中 @ 表示这是间隔符号<br>7ef20235为地址(16进制)</p><h2 id="数组索引-下标"><a href="#数组索引-下标" class="headerlink" title="数组索引(下标)"></a>数组索引(下标)</h2><p>数组下标从0开始,可以通过向方括号内输入数字代表取用第几个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>System.out.println(arr[<span class="hljs-number">1</span>]); <span class="hljs-comment">//此处输出为2</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">2</span>];<br>System.out.println(number1); <span class="hljs-comment">//此处输出为3</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">15</span>;<br>System.out.println(arr[<span class="hljs-number">0</span>]);  <span class="hljs-comment">//输出为15</span><br></code></pre></td></tr></table></figure><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><p>将数组中的所有内容取出来,取出来后可以(打印,判断,求和),<strong>遍历是指取出元素的过程</strong><br>当取出的下标超出数组长度时,则会报错(数组下标引用出错)<br>当想要获取数组的长度时,可以使用<strong>length</strong>以获取,然后再使用循环进行遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> arr[] =&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>System.out.println(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>在idea中,提供了一键遍历数组代码补全,输入<strong>数组名.fori</strong>即可自动生成代码.<br>遍历数组并求和:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] arr1=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; arr1.length;i++)&#123;<br>            System.out.println(arr1[i]);<br>            sum += arr1[i];<br>            System.out.println(sum);<br></code></pre></td></tr></table></figure><p>定义一个数组,并求出有多少个数能被3整除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] arr1=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; arr1.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr1[i]%<span class="hljs-number">3</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(arr[i]+<span class="hljs-string">&quot;能被3整除&quot;</span>);<br>                sum++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;统计完毕,有&quot;</span>+sum+<span class="hljs-string">&quot;个数字&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="数组的按序输出"><a href="#数组的按序输出" class="headerlink" title="数组的按序输出"></a>数组的按序输出</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>最简单的排序方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> []arr1= &#123;<span class="hljs-number">45</span>,<span class="hljs-number">34</span>,<span class="hljs-number">59</span>,<span class="hljs-number">55</span>&#125;;<br>Arrays.sort(arr1);<span class="hljs-comment">//调用方法排序即可</span><br></code></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>按序将元素与数组中其他元素比较并交换</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>先找到最小元素所在位置的索引,然后与第一位元素交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> arr3[]= &#123;<span class="hljs-number">23</span>,<span class="hljs-number">12</span>,<span class="hljs-number">48</span>,<span class="hljs-number">56</span>,<span class="hljs-number">45</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr3.length;i++) &#123;<br>        <span class="hljs-type">int</span> tem=i;<br>                <span class="hljs-comment">//将数组中从i开始的最小的元素所在位置的索引赋值给tem</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;arr3.length;j++) &#123;<br>            <span class="hljs-keyword">if</span>(arr3[j]&lt;arr3[tem]) &#123;<br>                tem=j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//上面获取了数组中从i开始的最小值的位置索引为tem，利用该索引将第i位上的元素与其进行交换</span><br>        <span class="hljs-type">int</span> temp1=arr3[i];<br>        arr3[i]=arr3[tem];<br>        arr3[tem]=temp1;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a>反转排序</h3><p>没什么好说的</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> []arr5=&#123;<span class="hljs-number">23</span>,<span class="hljs-number">12</span>,<span class="hljs-number">48</span>,<span class="hljs-number">56</span>,<span class="hljs-number">45</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr5.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &gt; <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-keyword">if</span> (arr5[j - <span class="hljs-number">1</span>] &gt; arr5[j]) &#123;<span class="hljs-comment">//大的放后面</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> arr5[j - <span class="hljs-number">1</span>];<br>                arr5[j - <span class="hljs-number">1</span>] = arr5[j];<br>                arr5[j] = tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="数组的动态初始化"><a href="#数组的动态初始化" class="headerlink" title="数组的动态初始化"></a>数组的动态初始化</h2><p>动态:初始化时仅指定数组长度,由系统分配初始值<br>静态:初始化时按元素个数分配长度,没有初始值<br>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//数组类型[] 数组名 = new 数据类型[数组长度];</span><br>String[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;shiling&quot;</span> <span class="hljs-comment">//对下标为0位置进行赋值</span><br></code></pre></td></tr></table></figure><p>大部分类型的默认初始化值为0(long类型为0L)<br>浮点类型的默认初始化值为0.0f&#x2F;D<br>字符类型的默认初始化值为’&#x2F;u0000’ → 空格(在调试台显示为极小的NULL)<br>布尔类型的默认初始化值为false<br>引用数据类型的默认初始化值为null</p><h2 id="数组的快速操作"><a href="#数组的快速操作" class="headerlink" title="数组的快速操作"></a>数组的快速操作</h2><h3 id="检查存在"><a href="#检查存在" class="headerlink" title="检查存在"></a>检查存在</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">String[] stringArray = &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span> &#125;;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Arrays.asList(stringArray).contains(<span class="hljs-string">&quot;a&quot;</span>);<br>System.out.println(b);<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>可以用动态链表的contains函数来判断元素是否包含在链表中。</p><h3 id="连接两个数组"><a href="#连接两个数组" class="headerlink" title="连接两个数组"></a>连接两个数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] intArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br><span class="hljs-type">int</span>[] intArray2 = &#123; <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span> &#125;;<br><span class="hljs-comment">// Apache Commons Lang library</span><br><span class="hljs-type">int</span>[] combinedIntArray = ArrayUtils.addAll(intArray, intArray2);<br></code></pre></td></tr></table></figure><p>ArrayUtils是Apache提供的数组处理类库，其addAll方法可以很方便地将两个数组连接成一个数组。</p><h3 id="将数组中的元素以字符串的形式输出"><a href="#将数组中的元素以字符串的形式输出" class="headerlink" title="将数组中的元素以字符串的形式输出"></a>将数组中的元素以字符串的形式输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// containing the provided list of elements</span><br><span class="hljs-comment">// Apache common lang</span><br><span class="hljs-type">String</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> StringUtils.join(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> &#125;, <span class="hljs-string">&quot;, &quot;</span>);<br>System.out.println(j);<br><span class="hljs-comment">// a, b, c</span><br></code></pre></td></tr></table></figure><p>同样利用StringUtils中的join方法，可以将数组中的元素以一个字符串的形式输出。</p><h3 id="数组翻转"><a href="#数组翻转" class="headerlink" title="数组翻转"></a>数组翻转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] intArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br>ArrayUtils.reverse(intArray);<br>System.out.println(Arrays.toString(intArray));<br><span class="hljs-comment">//[5, 4, 3, 2, 1]</span><br></code></pre></td></tr></table></figure><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">数组名.toString;<br>String.valueOf(数组名);<br><span class="hljs-type">String</span> <span class="hljs-variable">new</span> <span class="hljs-operator">=</span> (String)数组名<br></code></pre></td></tr></table></figure><h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><p>使用 CopyOfRange() 方法对数组进行复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.copyOfRange(dataType[] 原数组名,<span class="hljs-type">int</span> 起始下标,新,<span class="hljs-type">int</span> 终止下标);<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;; <span class="hljs-comment">//被复制后多两个0作为默认空值</span><br><span class="hljs-type">int</span>[] newArr=Arrays.copyOfRange(n, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>使用System.arraycopy()方法进行复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">System.arraycopy(原数组,起始下标,新数组,新的起始位置,复制长度);<br></code></pre></td></tr></table></figure><h3 id="数组是否相等equals"><a href="#数组是否相等equals" class="headerlink" title="数组是否相等equals()"></a>数组是否相等equals()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Arrays.fill(array, 100) 输出一个布尔值</span><br><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span>[] score1 = &#123; <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">98.5</span>, <span class="hljs-number">96.5</span>, <span class="hljs-number">72</span> &#125;;<br>        <span class="hljs-type">double</span>[] score2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">5</span>];<br>        score2[<span class="hljs-number">0</span>] = <span class="hljs-number">99</span>;<br>        score2[<span class="hljs-number">1</span>] = <span class="hljs-number">100</span>;<br>        score2[<span class="hljs-number">2</span>] = <span class="hljs-number">98.5</span>;<br>        score2[<span class="hljs-number">3</span>] = <span class="hljs-number">96.5</span>;<br>        score2[<span class="hljs-number">4</span>] = <span class="hljs-number">72</span>;<br>        <span class="hljs-keyword">if</span> (Arrays.equals(score1, score2)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;score1 数组和 score2 数组相等&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;score1 数组和 score2 数组不等&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a=<span class="hljs-number">5</span>;<br>        <span class="hljs-type">char</span> ch=<span class="hljs-string">&#x27;a&#x27;</span>;<br>        /ar ch2=<span class="hljs-string">&quot;abc&quot;</span>;<br>        String s1=<span class="hljs-string">&quot;abchef&quot;</span>;<br>        <span class="hljs-comment">//         abcef   abcdefgh</span><br>        String s2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abceF&quot;</span>);<br>        <span class="hljs-comment">//System.out.println(s1.length());</span><br>        System.out.println(s1.equals(s2));<br>        System.out.println(s1.equalsIgnoreCase(s2));<br>        System.out.println(s1.compareTo(s2));<span class="hljs-comment">//1-2</span><br></code></pre></td></tr></table></figure><h3 id="填充数组"><a href="#填充数组" class="headerlink" title="填充数组"></a>填充数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Arrays.fill(数组名,值)</span><br><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        Arrays.fill(arr,<span class="hljs-number">12</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>一般用于数据分组管理<br>其实也没啥说的,二维数组在堆内存中的表现形式为在堆内存中的下标处放置一个一维数组的地址值,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-number">0</span> <span class="hljs-number">0x0011</span><br><span class="hljs-number">1</span> <span class="hljs-number">0x0022</span><br></code></pre></td></tr></table></figure><p>高维数组的一维数组长度动态初始化时可以不受长度限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> arr[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][];<br><span class="hljs-type">int</span> arr1[] = &#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>&#125;;<br><span class="hljs-type">int</span> arr2[] = &#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;;<br>arr[<span class="hljs-number">0</span>] = arr1;<br>arr[<span class="hljs-number">1</span>] = arr2;<br></code></pre></td></tr></table></figure><p>这两个地址值分别指向另外两个一维数组,通过这种引用方式表达高维数组<br>二维数组的遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> arr[][] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;  <span class="hljs-comment">//i小于数组的行数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;f&lt; arr[i].length;f++)&#123;   <span class="hljs-comment">//f小于数组i行的长度</span><br>                System.out.print(arr[i][f]);<br>                <span class="hljs-keyword">if</span> (arr[i][f]==<span class="hljs-number">3</span>)&#123;<br>                    System.out.println();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="索引越界"><a href="#索引越界" class="headerlink" title="索引越界"></a>索引越界</h3><p>数组下标的引用超出了数组下标的范围,比如长4引5,数组的<strong>长度为元素个数-1</strong><br>Index 引用的下标 out of  bounds for length 数组长度</p><h2 id="求最大值案例"><a href="#求最大值案例" class="headerlink" title="求最大值案例"></a>求最大值案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123; <span class="hljs-comment">//i=0时,第一次循环为自己与自己比较,改成1可以省一次循环</span><br><span class="hljs-keyword">if</span>(arr1[i]&gt;max)&#123;<br>max = arr[i];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成n个1-100内的随机数并求取其中小于平均数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        System.out.println(<span class="hljs-string">&quot;请输入生成几个随机数&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i];<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;num&lt;i;num++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>            arr[num] = number;<br>            System.out.print(arr[num]+<span class="hljs-string">&quot; &quot;</span>);<br>            sum += arr[num];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;b &lt; arr.length;b++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[b]&lt;sum/i)&#123;<br>                a += <span class="hljs-string">&quot; &quot;</span>+arr[b];<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;小于平均数的有&quot;</span>+a);<br></code></pre></td></tr></table></figure><p>生成数个随机数存入数组并交换位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入一个值用以确认每组随机数的个数&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i];<br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;b&lt;i;b++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>            arr1[b] = c;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> a.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>            arr2[b] = f;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;b&lt;i;b++)&#123;<br>            System.out.print(arr1[b]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;b&lt;i;b++)&#123;<br>            System.out.print(arr2[b]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;b&lt;i;b++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> arr1[b];<br>            arr1[b] = arr2[b];<br>            arr2[b] = l;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;b&lt; arr1.length;b++)&#123;<br>            System.out.print(arr1[b]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;b&lt; arr2.length;b++)&#123;<br>            System.out.print(arr2[b]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h2 id="Java内存分配"><a href="#Java内存分配" class="headerlink" title="Java内存分配"></a>Java内存分配</h2><p>1.栈 方法运行时所使用的内存,比如main方法允许,进入方法栈中进行<br>2.堆  储存对象或者数组,new创建的,都储存在堆内存<br>3.方法区  储存可以运行的class文件<br>4.本地方法栈 JVM在使用操作系统空间的时候使用,与开发无关<br>5.寄存器 给CPU使用,与开发无关<br>在jdk7之前,<strong>方法区与堆空间是连接在一起的</strong>,在真实的空间中也是如此.在jdk8之后取消了方法区,新增元空间,功能拆分给了元空间与方法区</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>方法运行时所使用的内存,比如main方法运行,进入方法栈中执行<br>程序的主入口(main)开始执行时进栈,完毕后出栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-comment">//进入内存栈</span><br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;  <span class="hljs-comment">//向内存中申请一块区域用于存放int类型的值a</span><br><span class="hljs-type">int</span> b=<span class="hljs-number">5</span>;  <span class="hljs-comment">//同上,先声明这个值的类型,再将数据进行储存</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a+b;  <span class="hljs-comment">//先计算a+b的值,再将结果放入int类的内存地址</span><br>sout(c);  <span class="hljs-comment">//快速打印变量c地址中的数据</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>new创建的内容,都储存在堆内存<br>每一个储存在堆内存中的数据都有其独特的地址值,互不干扰<br>数组在栈内存中的表现形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr 地址值<br></code></pre></td></tr></table></figure><p>栈内存中数组的地址值指向堆内存中用于存放数组数据的地址,堆内存表示数组先声明数组类型,再声明数组长度,之后开始记录下标与数据<br>有时会出现两个数组指向同一个空间的情况,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = arr1;<br></code></pre></td></tr></table></figure><p>此时arr2直接指向了arr1的地址,此时若修改arr2中的值,实际等同于修改arr1中的值,当打印同一个下标下的数据时,输出是相同的</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>程序中最小的执行单元,可以出现多个方法,但是main方法仅能有一个<br>将方法进行打包,之后再需要使用时可以直接调用,提高了代码的复用性与可维护性<br>将代码打包在一起的过程中称为方法的定义,定义格式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> 返回值类型 方法名 (参数)&#123;<br>方法体;<br><span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述为标准格式,如果想要调用方法可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">方法名();<br></code></pre></td></tr></table></figure><p>执行顺序为先从主入口进入,当需要调用方法时,开始寻找方法,执行完毕后回到调用处继续向下执行<br>当参数为变量时,需要为其准备赋值,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 方法名 (<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)&#123;... ...&#125;<br></code></pre></td></tr></table></figure><p>此时若直接调用此方法便会因为未给变量赋值而出错,使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">方法名(数值,数值);<br></code></pre></td></tr></table></figure><p>进行赋值,须保证类型一致</p><p>输入两个整数求和,调用求和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        mSum(a,b);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mSum</span><span class="hljs-params">(<span class="hljs-type">int</span> c,<span class="hljs-type">int</span> d)</span>&#123;<br>        System.out.println(c+d);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个方法,求长方形周长与面积</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;分二次键入长方形的长和宽&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        M(a,b);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">M</span><span class="hljs-params">(Double length,Double width)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;面积:&quot;</span>+length*width);<br>        System.out.println(<span class="hljs-string">&quot;周长:&quot;</span>+(<span class="hljs-number">2</span>*(length+width)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="全局变量-成员变量"><a href="#全局变量-成员变量" class="headerlink" title="全局变量(成员变量)"></a>全局变量(成员变量)</h4><p>想要使用一个未在方法内的变量时,除了使用形参进行传递之外,还可以设置一个静态变量达到效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h4 id="方法的第三种定义格式"><a href="#方法的第三种定义格式" class="headerlink" title="方法的第三种定义格式"></a>方法的第三种定义格式</h4><p>其实就是带返回值的方法.返回值为方法的最终结果,如果只是打印在屏幕上,那么<strong>调用方法后无法将结果再次使用</strong>,例如:<br>定义一个方法求取季度营业额,再求取全年营业额</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">all</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入第&quot;</span>+i+<span class="hljs-string">&quot;季度的销售额,用逗号隔开&quot;</span>);<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> test.next();<br>            String arr[] = t.split(<span class="hljs-string">&quot;,&quot;</span>); <span class="hljs-comment">//获取输入的值,定义为字符串数组,值与值之间的间隔是逗号</span><br>            <span class="hljs-type">int</span> a=Integer.parseInt(arr[<span class="hljs-number">0</span>]),b=Integer.parseInt(arr[<span class="hljs-number">1</span>]),c=Integer.parseInt(arr[<span class="hljs-number">2</span>]);<br>            <span class="hljs-comment">//上为获取数组中的字符串,并强制转换为int类型值,分别存储于a,b,c中</span><br>            System.out.println(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;季度的营业额为:&quot;</span>+Gsum(a,b,c));<br>            all += Gsum(a,b,c);<span class="hljs-comment">//在此处使用返回值</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;全年的营业额为:&quot;</span>+all);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Gsum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">Sum</span> <span class="hljs-operator">=</span> a+b+c;<br>    <span class="hljs-keyword">return</span> Sum; <span class="hljs-comment">//返回a+b+c的结果作为返回值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回值的调用分为<strong>直接调用,赋值调用,输出调用</strong>三种<br>return在方法中收尾,视为结束代码.当方法的返回值类型为void时,没有返回值的return可以作为结束语句出现,不返回任何值,否则报错.</p><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>Java中可以定义多个同名方法,这些方法的类型,数值,元素个数可以各不相同,Java虚拟机会通过参数的不同来区分同名的方法,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span>&#123;<br><span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重载条件:<strong>方法名一样,在同一个类当中,形参不一样</strong>.所以下列不构成重载(方法名没变,和返回值类型无关)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法重载,比较两个整数是否相同(需兼容全整数类型byte,short,int,long)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输入两个数以进行随机类型转换比较&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> s.nextInt(<span class="hljs-number">3</span>)+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">byte</span> a= (<span class="hljs-type">byte</span>)sc.nextInt(),b = (<span class="hljs-type">byte</span>)sc.nextInt();<br>            compare(a,b);<br>        &#125;<span class="hljs-keyword">if</span> (r == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-type">short</span> a= (<span class="hljs-type">short</span>) sc.nextInt(),b = (<span class="hljs-type">short</span>) sc.nextInt();<br>            compare(a,b);<br>        &#125;<span class="hljs-keyword">if</span> (r == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-type">int</span> a= sc.nextInt(),b = sc.nextInt();<br>            compare(a,b);<br>        &#125;<span class="hljs-keyword">if</span> (r == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-type">long</span> a= (<span class="hljs-type">long</span>)sc.nextInt(),b = (<span class="hljs-type">long</span>)sc.nextInt();<br>            compare(a,b);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">byte</span> b1,<span class="hljs-type">byte</span> b2)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用byte&quot;</span>);<br>        System.out.println(b1 == b2);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">short</span> b1,<span class="hljs-type">short</span> b2)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用short&quot;</span>);<br>        System.out.println(b1 == b2);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> b1,<span class="hljs-type">int</span> b2)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用int&quot;</span>);<br>        System.out.println(b1 == b2);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">long</span> b1,<span class="hljs-type">long</span> b2)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用long&quot;</span>);<br>        System.out.println(b1 == b2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个方法用以遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>,<span class="hljs-number">45</span>,<span class="hljs-number">56</span>&#125;;<br>        listArr(arr);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设计一个方法将数组中的数据从大到小排序,返回最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>,<span class="hljs-number">45</span>,<span class="hljs-number">56</span>&#125;;<br>        maxArr(arr);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">maxArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>;s&lt; arr.length;s++)&#123;<br>                <span class="hljs-keyword">if</span> (arr[s]&gt;arr[i])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> arr[i];<br>                    arr[i] = arr[s];<br>                    arr[s] = a;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(arr[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设计一个方法求存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输入一个值获取1-10以内随机数的个数&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sc.nextInt()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            arr[i] = a.nextInt(<span class="hljs-number">9</span>)+<span class="hljs-number">1</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;键入需要查询的值&quot;</span>);<br>        <span class="hljs-keyword">if</span> (contains(arr,sc.nextInt())==<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;不存在&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> number)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i] == number)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设计一个方法将数组arr中从下标from(包含from)开始到下标to(包含to)结束的所有元素<strong>复制到新数组中,将新数组返回</strong>或<strong>打印此间所有元素</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输入一个值获取1-100以内随机数的个数&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sc.nextInt()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            arr[i] = a.nextInt(<span class="hljs-number">99</span>)+<span class="hljs-number">1</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;输入两个值,获取一段数组下标所对应的数据&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> sc.nextInt(),t = sc.nextInt();<br>        <span class="hljs-keyword">if</span> (f&gt;t)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">change</span> <span class="hljs-operator">=</span> f;<br>            f = t;<br>            t = change;<br>            System.out.println(<span class="hljs-string">&quot;大小颠倒,已自动交换&quot;</span>);<br>        &#125;<br>        getArr(arr,f,t);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> from,<span class="hljs-type">int</span> to)</span>&#123;<br>        <span class="hljs-keyword">if</span> (from&lt;<span class="hljs-number">0</span> || to&gt; arr.length-<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;输入的不是有效范围&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (;from&lt;=to-<span class="hljs-number">1</span>;from++)&#123;<br>            System.out.print(arr[from]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println(arr[from]+<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法的内存"><a href="#方法的内存" class="headerlink" title="方法的内存"></a>方法的内存</h4><h5 id="方法调用的基本内存原理"><a href="#方法调用的基本内存原理" class="headerlink" title="方法调用的基本内存原理"></a>方法调用的基本内存原理</h5><p>方法被调用后会进栈运行,没有new则与堆无关.在main方法中所声明的变量会在main方法占用的栈内存中申请一块区域用于存放自身,可简化为<strong>将变量储存在main占用的内存中</strong>,当main方法代码结束(出栈)后,变量立即被摧毁.进栈与出栈有顺序之分,可视为<strong>后来居上</strong>,被调用的方法按序从上往下出栈,main方法最后出栈.</p><h5 id="方法传递基本数据类型的内存原理"><a href="#方法传递基本数据类型的内存原理" class="headerlink" title="方法传递基本数据类型的内存原理"></a>方法传递基本数据类型的内存原理</h5><p>基本数据类型:变量中存储的真实数据,而并非指向另一个数据(int a &#x3D; b;)<br>引用数据类型:目前学习到的仅有数组为引用数据类型,因为完整格式中带有new关键字,此时在堆内存中申请内存存放数据.此时在栈内存中存放的为堆内存中真实变量的地址值.所以,引用变量可以简化为<strong>引用了其他空间的地址值,并没有直接存放真实数据</strong>,此时若进行引用赋值,实际为将自身地址赋值给其他变量.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArgsDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>sout(<span class="hljs-string">&quot;调用change方法前:&quot;</span>+number);<br>change(number);<br>sout(<span class="hljs-string">&quot;调用后:&quot;</span>+number); <span class="hljs-comment">//输出为100</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span>&#123;<br>number = <span class="hljs-number">200</span>;  <span class="hljs-comment">//实际变化的为↑↑这个number</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述语句实际是对change方法中被赋值的int number进行再次赋值,并没有对main方法中的number产生影响,代码块之间层级分明.变量仅能在所属的方法内有效.形参的改变不会影响真实参数的值(实际等同于在栈内存中再次申请区域存放形参number的值,出栈时形参即被摧毁).<br>若想改变真实参数,则需改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">number = change(number);<br><span class="hljs-comment">//同时在change方法中需要加入:</span><br><span class="hljs-keyword">return</span> number; <span class="hljs-comment">//返回一个值作为真实参数</span><br><span class="hljs-comment">//还需将change方法返回的变量类型改为int</span><br></code></pre></td></tr></table></figure><p>当方法传递引用的数据类型为带有new的引用数据类型时,形参的变化会影响真实参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArgsDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br>sout(<span class="hljs-string">&quot;调用change方法前:&quot;</span>+arr[<span class="hljs-number">1</span>]);<br>change(arr);<br>sout(<span class="hljs-string">&quot;调用后:&quot;</span>+arr[<span class="hljs-number">2</span>]); <span class="hljs-comment">//输出为200</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-number">200</span>;  <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时形参的变量值为数组arr在堆内存中的地址,所以change方法的赋值语句将直接对堆内存中的真实数据进行赋值,直接影响了真实参数.<br>所以,简而言之基本数据类型传递的是真实的数据,引用数据类型传递的是地址值</p><h1 id="综合案例测试"><a href="#综合案例测试" class="headerlink" title="综合案例测试"></a>综合案例测试</h1><h2 id="机票"><a href="#机票" class="headerlink" title="机票"></a>机票</h2><p>需求:机票价格受到淡季,旺季,头等舱和经济舱影响.机票原价500,旺季(5~10月)头等舱九折,经济舱8.5折,淡季(11月到来年4月)头等舱7折,经济舱6.5折</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入月份与头等舱/经济舱,使用逗号隔开&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sc.next();<br>        String arr[] = input.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.parseInt(arr[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">switch</span> (a)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>:<br>                <span class="hljs-keyword">if</span> (Objects.equals(arr[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;头等舱&quot;</span>))&#123;<br>                    System.out.println(<span class="hljs-string">&quot;机票价格为:&quot;</span>+(<span class="hljs-number">500</span>*<span class="hljs-number">0.9</span>));<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Objects.equals(arr[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;经济舱&quot;</span>)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;机票价格为:&quot;</span>+(<span class="hljs-number">500</span>*<span class="hljs-number">0.85</span>));<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;请确认所在舱室&quot;</span>);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>:<br>                <span class="hljs-keyword">if</span> (Objects.equals(arr[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;头等舱&quot;</span>))&#123;<br>                    System.out.println(<span class="hljs-string">&quot;机票价格为:&quot;</span>+(<span class="hljs-number">500</span>*<span class="hljs-number">0.7</span>));<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Objects.equals(arr[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;经济舱&quot;</span>)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;机票价格为:&quot;</span>+(<span class="hljs-number">500</span>*<span class="hljs-number">0.65</span>));<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;请确认所在舱室&quot;</span>);<br>                &#125;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;请输入一个有效的月份&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>首位大写,前四位字母,最后一位为数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">char</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">52</span>];<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> arr.length/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;arr.length/<span class="hljs-number">2</span>;i++)&#123;<br>            arr[i]= (<span class="hljs-type">char</span>) (<span class="hljs-number">65</span>+i);<br>            arr[m+i] = (<span class="hljs-type">char</span>)(<span class="hljs-number">97</span>+i);<br>        &#125;<br>        System.out.print(arr[a.nextInt(<span class="hljs-number">25</span>)]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>            System.out.print(arr[a.nextInt(<span class="hljs-number">51</span>)]);<br>        &#125;<br>        System.out.print(a.nextInt(<span class="hljs-number">9</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>对各位数+5并%10,输出得数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输入一串数字&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">ori</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> ori.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> num*<span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>            num /= <span class="hljs-number">10</span>;<br>            l++;<br>        &#125;<br>        <span class="hljs-type">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[l];<br>        <span class="hljs-keyword">for</span> (;l&gt;<span class="hljs-number">0</span>;l--)&#123;<br>            number = (number/<span class="hljs-number">10</span>);<br>            arr[arr.length-l] = (number+<span class="hljs-number">5</span>)%<span class="hljs-number">10</span>;<br>            System.out.print(arr[arr.length-l]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽奖"><a href="#抽奖" class="headerlink" title="抽奖"></a>抽奖</h2><p>随机存入奖项于数组,然后抽奖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">gRand</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> num)</span>&#123;  <span class="hljs-comment">//获取num个随机数存入数组</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>            arr[i] = a.nextInt(<span class="hljs-number">99</span>)+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">evi</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;  <span class="hljs-comment">//验证数组中随机数是否不同</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>;f&lt; arr.length;f++)&#123;<br>                <span class="hljs-keyword">if</span> (arr[i]==arr[f])&#123;<br>                    <span class="hljs-type">Random</span> <span class="hljs-variable">newOne</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                    arr[f] = newOne.nextInt(<span class="hljs-number">99</span>)+<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> arr1[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span> arr2[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>        gRand(arr2,<span class="hljs-number">3</span>); <span class="hljs-comment">//生成三个随机数存入</span><br>        <span class="hljs-keyword">while</span>(evi(arr2)==<span class="hljs-literal">false</span>)&#123; <span class="hljs-comment">//验证三个数是否有不同</span><br>        evi(arr2);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr2.length;i++)&#123;<br>            arr1[arr2[i]] = i+<span class="hljs-number">1</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;输入一个一到一百的数来获取奖励&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">guess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> guess.nextInt();<br>        <span class="hljs-keyword">if</span> (arr1[result]==<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;未中奖&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;中了&quot;</span>+arr1[result]+<span class="hljs-string">&quot;等奖&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>主要为学习获取已有对象并使用,当没有合适的对象可供使用时,则自己设计一个对象并使用</p><h2 id="设计对象并使用"><a href="#设计对象并使用" class="headerlink" title="设计对象并使用"></a>设计对象并使用</h2><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>类:是对象共同特征的描述<br>对象:是真实存在的具体东西<br>Java中必须先有类再创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> class 类名&#123;<br>成员变量<br>&#125;<br>成员方法&#123;&#125;<br></code></pre></td></tr></table></figure><p>若想得到类的对象,需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">类名 对象名 = <span class="hljs-keyword">new</span> 类名();<br><span class="hljs-type">Main</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Main</span>();<br></code></pre></td></tr></table></figure><p>成员变量一般不赋值,若想使用对象<br>访问属性:对象名.成员变量<br>访问行为:对象名.方法名();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        p.brand = <span class="hljs-string">&quot;RedMi 10X&quot;</span>;<br>        p.price = <span class="hljs-number">1998</span>;<br>        System.out.println(p.brand);<br>        System.out.println(p.price);<br>        p.call();<br>        p.download();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    String brand;<br>    <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;通话中&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始下载&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>倘若不想将类Phone放在类Main下方,可以新建立一个类,并将Phone定义为一个公共类供调遣<br>一个类可以拥有多个对象,类所定义的变量可以用于不同对象的输出<br>若未重新定义变量,则按成员变量的默认值进行输出</p><h4 id="定义类的规则"><a href="#定义类的规则" class="headerlink" title="定义类的规则"></a>定义类的规则</h4><p>类名首字母大写,英文,有意义,满足驼峰格式,不能用关键字,满足标志符规定<br>一个代码中可以定义多个类,但是公共类只能有一个,公共类修饰的必须是Java代码的文件名称</p><h4 id="成员变量的格式"><a href="#成员变量的格式" class="headerlink" title="成员变量的格式"></a>成员变量的格式</h4><p>完整格式应为:修饰符 数据类型 变量名称 &#x3D; 初始化值;<br>一般无需指定初始化值</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>需求:定义一个类描述人<br>属性:姓名,年龄<br>行为:食饭,睡觉<br>对象代表什么,就得封装对应的数据,并提供数据对应的行为<br>例如人画圆,画圆这个方法应该放在类圆中.圆属于圆,椭圆也属于圆,圆的具体属性归于类圆.<br>人提供值给类圆,类圆根据值来改变圆的状态并将圆返回给人<br>之前所使用的全部函数,其实都是sun公司为用户提供的私人类(方法)</p><p>封装的好处:对象代表什么,就封装对应的数据,并提供数据对应的行为<br>降低学习成本,可以少记,少学.无需记忆对象有哪些方法,有需要的时候去找即可</p><h4 id="Private关键字"><a href="#Private关键字" class="headerlink" title="Private关键字"></a>Private关键字</h4><p>是一个权限修饰符<br>可以修饰成员(成员变量和成员方法)<br>被private修饰的成员只能在<strong>本类</strong>中访问,具有安全性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">gf1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GirlFriend</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入姓名&quot;</span>);<br>        gf1.setName(sc.next());<br>        System.out.println(<span class="hljs-string">&quot;输入年龄&quot;</span>);<br>        gf1.setAge(sc.nextInt());<br>        System.out.println(<span class="hljs-string">&quot;输入性别?&quot;</span>);<br>        gf1.setGender(sc.next());<br>        System.out.println(gf1.getName()+gf1.getGender()+gf1.getAge()+<span class="hljs-string">&quot;岁&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlFriend</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        <span class="hljs-keyword">if</span> (a&gt;=<span class="hljs-number">18</span> &amp;&amp; a&lt;=<span class="hljs-number">30</span>) &#123;<br>            age = a;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;数据非法&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String g)</span>&#123;<br>        <span class="hljs-keyword">if</span> (Objects.equals(g,<span class="hljs-string">&quot;女&quot;</span>))&#123;<br>            gender = g;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;啊?我大受震撼&quot;</span>);<br>            gender = g;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span>&#123;<br>        name = n;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由上可见,被private修饰的变量仅能通过调用类中的方法进行使用,否则报错</p><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><p>若形参的名字和成员变量相同,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>    age = age;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么则会无法输出正确值,但是如果形参和成员变量名相同,则会更容易理解.处理这种问题时则需要用到this关键字<br>this特指成员变量,所以上述可以改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-built_in">this</span>.age = age;<br></code></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>&#123;<br>    修饰符 类名(参数)&#123;<br>        方法体;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>特点:<br>1.方法名和类名相同,大小写也一致<br>2.没有具体的返回值类型,甚至连void也没有<br>3.没有具体的返回值,不能由return带回结果数据</p><p>创建对象时由虚拟机调用,不能手动调用构造方法<br>每创建一次对象,就会调用一次构造方法</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">19</span>); <span class="hljs-comment">//创建对象的同时为成员变量赋值</span><br>System.out.println(s.getName()+s.getAge);<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>    方法体;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果没有写任何的构造方法,那么虚拟机会加一个空参构造方法,此时必须使用方法对成员变量进行赋值(setName();)<br>两种构造方法分别对应不同情况.有参构造主要用于明确参数类型与数量的情况,无参构造用于属性值不明的时候,未输入的值则变为默认参数<br>如果定义了构造方法,则系统不会再提供默认的构造方法<br>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-type">Student</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">17</span>);<br><br><span class="hljs-comment">//类中方法:</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>此时变量s的构造报错,因为方法中已经定义了一个有参的方法,则系统不再提供默认的空参方法. </p><h3 id="构造方法的重载"><a href="#构造方法的重载" class="headerlink" title="构造方法的重载"></a>构造方法的重载</h3><p>带参&#x2F;无参两者方法名相同,但是参数不同,就是构造方法的重载<br>无论是否使用,都建议手动写无参方法<br>任何类定义默认自带无参数构造方法,写不写都有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">方法名(参数)&#123;方法体&#125;<br></code></pre></td></tr></table></figure><h2 id="标准javaBean类"><a href="#标准javaBean类" class="headerlink" title="标准javaBean类"></a>标准javaBean类</h2><p>Java Bean 是一种类，而且是特殊的、可重用的类。<br>Java language 是一种面向对象的编程语言，类是面向对象的编程语言的基础；可重用又是面向对象编程思想存在的意义之一，所以起名 Bean 很是形象。<br>类名需要见名知意<br>成员变量使用private修饰<br>提供至少两个构造方法<br> 1.无参<br> 2.有参<br>成员方法要提供 每一个成员变量所对应的set&#x2F;get,如果还有其他行为也需要加上</p><h2 id="Java内存分配介绍-算是复习"><a href="#Java内存分配介绍-算是复习" class="headerlink" title="Java内存分配介绍(算是复习?)"></a>Java内存分配介绍(算是复习?)</h2><p>jvm把内存分为五块区域:栈 堆 方法区 本地方法栈 寄存器<br>当运行一个类时,这个类的字节码会加载在方法区中临时存储,在jdk7之前堆和方法区连在一起,实际上也确实连在一起.而后取消方法区,新增元空间,将方法区的功能拆分给堆与元空间.<br>方法被调用时进栈<br>new出的数据都会放在堆空间</p><h3 id="一个对象的内存图"><a href="#一个对象的内存图" class="headerlink" title="一个对象的内存图"></a>一个对象的内存图</h3><p>Student s &#x3D; new Student();<br>1.加载class文件进方法区<br>2.声明局部变量s<br>3.在堆空间中开辟空间存放变量<br>4.默认初始化 (int &#x3D; 0)<br>5.显示初始化 (初始化为成员变量的定义值)<br>6.构造方法初始化<br>7.将地址值赋予左边的局部变量</p><h3 id="两个对象的内存图"><a href="#两个对象的内存图" class="headerlink" title="两个对象的内存图"></a>两个对象的内存图</h3><p>再次创建对象时,.class不需要重复加载,重复使用即可(main方法尚未执行完毕)<br>当两个变量指向同一个空间时(Student stu2 &#x3D; stu1;),任何对两个变量的修改都会影响同一内存地址中的值.<br>其余和单个差不多</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>基本数据类型数据值都储存在自己的空间中<br>new出的数据都是引用数据类型，在栈内存中存放了一个指向堆内存中的地址值，实际值储存在堆内存中</p><h3 id="this的内存原理"><a href="#this的内存原理" class="headerlink" title="this的内存原理"></a>this的内存原理</h3><p>this实际指向所在方法调用者的地址<br>对象创建时，对象中会默认初始化&#x2F;显示初始化。然后例如 s.set***()时，方法内的this实际指向了对象s的地址，而非形参</p><h3 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h3><table>    <tr style="background-color: darkred;">        <th>区别</th>        <th>成员变量</th>        <th>局部变量</th>    </tr>    <tr>        <td>类中位置不同</td>        <td>类中，方法外</td>        <td>方法内、方法声明上</td>    </tr>    <tr>        <td>初始化值不同</td>        <td>有默认初始化值</td>        <td>没有，使用之前需要完成赋值</td>    </tr>    <tr>        <td>内存位置不同</td>        <td>堆内存</td>        <td>栈内存</td>    </tr>    <tr>        <td>生命周期不同</td>        <td>随着对象的创建而存在<br>随着对象的消失而消失</td>        <td>随着方法的调用而存在<br>随着方法的运行结束而消失</td>    </tr>    <tr>        <td>作用域</td>        <td>整个类中有效</td>        <td>当前方法中有效</td>    </tr></table><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态成员方法仅能访问静态成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">New</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Student2</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student2</span>();<br>        <span class="hljs-type">Student2</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student2</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;分别输入对象1的姓名 性别 年龄，使用逗号隔开&quot;</span>);<br>        s1.setInfo(sc.next());<br>        System.out.println(<span class="hljs-string">&quot;分别输入对象2的姓名 性别 年龄，逗号隔开&quot;</span>);<br>        s2.setInfo(sc.next());<br>        s1.title();<br>        s1.show();<br>        s2.show();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;法外狂徒：&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(String Info)</span>&#123;<br>        String arr[] = Info.split(<span class="hljs-string">&quot;，&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-built_in">this</span>.age = Integer.parseInt(arr[<span class="hljs-number">2</span>]);<br>        <span class="hljs-built_in">this</span>.gender = arr[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;性&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name+gender+age+<span class="hljs-string">&quot;岁&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">title</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(title);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">New</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Goods[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>[<span class="hljs-number">3</span>];  <span class="hljs-comment">//创建数组以存放对象</span><br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;001&quot;</span>,<span class="hljs-string">&quot;t1&quot;</span>,<span class="hljs-number">2999.0</span>,<span class="hljs-number">3</span>);<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;002&quot;</span>,<span class="hljs-string">&quot;t2&quot;</span>,<span class="hljs-number">2999.0</span>,<span class="hljs-number">3</span>);<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;003&quot;</span>,<span class="hljs-string">&quot;t3&quot;</span>,<span class="hljs-number">2999.0</span>,<span class="hljs-number">3</span>);<br>        arr[<span class="hljs-number">0</span>] = g1;  <span class="hljs-comment">//存放对象进入数组</span><br>        arr[<span class="hljs-number">1</span>] = g2;<br>        arr[<span class="hljs-number">2</span>] = g3;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            arr[i].ShowInfo();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Goods</span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Goods</span><span class="hljs-params">(String id,String name,<span class="hljs-type">double</span> price,<span class="hljs-type">int</span> count)</span>&#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ShowInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;商品id：&quot;</span>+id+<span class="hljs-string">&quot;  商品名称：&quot;</span>+name+<span class="hljs-string">&quot;  商品价格：&quot;</span>+price+<span class="hljs-string">&quot;商品数量：&quot;</span>+count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">New</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">New</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">New</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-built_in">this</span>();  <span class="hljs-comment">//在无形参的情况下执行一次本方法，输出一次无参方法</span><br>        System.out.println(<span class="hljs-string">&quot;有&quot;</span>+s);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">New</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">New</span>(<span class="hljs-string">&quot;Tom&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求圆与三角的面积和周长"><a href="#求圆与三角的面积和周长" class="headerlink" title="求圆与三角的面积和周长"></a>求圆与三角的面积和周长</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">New</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">GS</span> <span class="hljs-variable">cir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GS</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-type">GS</span> <span class="hljs-variable">tri</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GS</span>(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>);<br>        System.out.println(<span class="hljs-string">&quot;圆周长：&quot;</span>+cir.GetC()+<span class="hljs-string">&quot;    面积：&quot;</span>+cir.GetS());<br>        System.out.println(<span class="hljs-string">&quot;三角周长：&quot;</span>+tri.GetC()+<span class="hljs-string">&quot;    面积：&quot;</span>+tri.GetS());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GS</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> C;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> S;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GS</span><span class="hljs-params">(<span class="hljs-type">int</span> r)</span>&#123;<br>        <span class="hljs-keyword">if</span> (r&lt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;数据非法&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            S = <span class="hljs-number">3.14</span>*r*r;<br>            C = <span class="hljs-number">3.14</span>*<span class="hljs-number">2</span>*r;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GS</span><span class="hljs-params">(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b,<span class="hljs-type">double</span> c)</span>&#123;<br>        <span class="hljs-keyword">if</span> (a+b&gt;c)&#123;<br>        C = a+b+c;<br>        S = Math.sqrt(C*(C-a)*(C-b)*(C-c));<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;数据不合理&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">GetS</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> S;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">GetC</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> C;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h1><p>通常以双引号括起即为字符串,当任何类型与字符串相加时,+变为连接符<br>String是java定义好的一个类,定义在Java.lang包中,所以使用时不需要导包<br>字符串创建后不可更改</p><h2 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h2><p>创建String对象有两种方式:赋值与new<br>使用new的方法构造字符串时,可以进行空参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;芜湖&quot;</span>);<br></code></pre></td></tr></table></figure><p>根据字符数组的内容再创建一个新的字符串:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chs);<br></code></pre></td></tr></table></figure><p>传递一个字节数组,根据字节数组的内容再创建一个新的字符串对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">97</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<br></code></pre></td></tr></table></figure><p>此时结果为abcd,因为计算机会查找字节码对应的ASCII码表<br>此处引入一个新概念,串池(StringTable)<br>在jdk7之前存在于方法区中,jdk7开始移到了堆内存之中<br>通过直接赋值的方法创建的字符串都会被存储于串池,可以简单理解为字符串常量池,使用双引号创建新字符串时,会先检查串池内是否存在相同值,有则复用,无则创建</p><h2 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h2><p>基本数据类型比较的是数据值<br>引用数据类型比较的是地址值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>System.out.println(s1==s2);  <span class="hljs-comment">//输出false</span><br></code></pre></td></tr></table></figure><p>s1在堆内存中,s2在串池之中,地址值并不相同,所以输出为false<br>字符串的比较可以使用两种方法:</p><ol><li>boolean equals方法(要比较的字符串)               完全一样是true,否则为false</li><li>boolean equalsIgnoreCase(要比较的字符串)         忽略大小写的比较</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABC&quot;</span><br>System.out.println(s1.equals(s2));<br>System.out.println(s1.equalsIgnoreCase(s3));<br></code></pre></td></tr></table></figure><p>选中代码后通过ctrl+b可以进行代码溯源<br>通过键盘键入的值实际上是new出的一个字符串,和直接赋值的并不相同</p><h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">passWord</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入用户名&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> sc.next();<br>            System.out.println(<span class="hljs-string">&quot;请输入密码&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-keyword">if</span> (input.equals(passWord) &amp;&amp; userName != <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (i==<span class="hljs-number">3</span>)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;登录已被禁用,请关闭后重新尝试&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>+<span class="hljs-string">&quot;,您还剩余&quot;</span>+(<span class="hljs-number">3</span>-i)+<span class="hljs-string">&quot;次机会,请重新输入:&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处未做用户名验证,需要可以自行添加</p><h3 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h3><p>一般情况下都是先通过.length()获取字符串长度,然后通过循环得到其中每一个字符<br>在访问数组下标值时,可以通过input.charAt(数组下标) 来进行访问<br>遍历并获取字符串中大小写字符,数字字符分别出现的次数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入字符串&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bigCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">smallCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numberCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;input.length();i++)&#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> input.charAt(i);<br>            <span class="hljs-keyword">if</span>(c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span> &amp;&amp; c &gt;= <span class="hljs-string">&#x27;A&#x27;</span>)&#123;<br>                bigCount++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>                smallCount++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                numberCount++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;大写字符有:&quot;</span>+bigCount+<span class="hljs-string">&quot;个&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;小写字符有:&quot;</span>+smallCount+<span class="hljs-string">&quot;个&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;数字字符有:&quot;</span>+numberCount+<span class="hljs-string">&quot;个&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入字符串&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">put</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; input.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> input.charAt(i);<br>            <span class="hljs-keyword">if</span> (i==input.length()-<span class="hljs-number">1</span>)&#123;<br>                put += c+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            put += c+<span class="hljs-string">&quot;,&quot;</span>;<br>        &#125;<br>        System.out.println(put);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入字符串&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sc.next();<br>        System.out.println(reverser(input));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">reverser</span><span class="hljs-params">(String a)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">re</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> a.charAt(a.length()-i-<span class="hljs-number">1</span>);<br>            re += r;<br>        &#125;<br>        <span class="hljs-keyword">return</span> re;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端学习</title>
    <link href="/2023/03/28/%E5%89%8D%E7%AB%AF/"/>
    <url>/2023/03/28/%E5%89%8D%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<hr><style>    #box1{    width: 100px;    height: 150px;    background-color: yellow;    text-align: center;    line-height: 200px;    }    #div1{        width:40px;        height: 40px;        background: skyblue;    }    div.h{        color: purple;        background: yellow;    }    span.h{        color: skyblue;        background: green;    }</style><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>HTML的全称为<ruby>Hyper Text Markup Language<rt>超文本标记语言</rt></ruby><br>网页的组成元素有<strong><ruby>文本 图片<rt>主要这俩</rt></ruby></b></strong> 音频 视频 超链接<br>网页实质上是由代码组成的<br>前端的代码通过浏览器的转化(解析与渲染)组成用户看到的网页<br>一个标准的web骨架由头部与身体组成,同时要在首行声明语言</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>开发工具有vscode HBuilderX等,但此二较为热门<br>vscode可以通过输入!,并使用tab补全第一项内容进行框架生成</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!--这是注释--&gt;</span><br></code></pre></td></tr></table></figure><p>html的注释格式较为特殊,Ctrl+&#x2F;可以快速注释本行<br>注释用于方便他人理解,自己也可能在之后忘记代码的用途</p><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>标签大多需要有始有终,&lt; &gt;和&lt;&#x2F; &gt;<br>单标签例如下划线&lt;br&gt;和&lt;hr&gt;<br>标签之间的关系大多为父子(嵌套)与兄弟<br>标签中可以拥有多个属性,属性和标签名之间用空格隔开,属性与属性之间也是一样.</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>HTML的标题语法为<br>&lt;h1到h6&gt; &lt;&#x2F;h1到h6&gt;<br>在markdown中为#的数量,一个#为h1</p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>段落使用<br>&lt;p&gt; &lt;&#x2F;p&gt;</p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>&lt;br&gt;</p><h3 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h3><p>&lt;hr&gt;</p><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><table><thead><tr><th align="center">字符</th><th align="center">表现</th><th align="center"></th><th align="center">字符</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">b</td><td align="center">加粗</td><td align="center"></td><td align="center">strong</td><td align="center">加粗</td></tr><tr><td align="center">u</td><td align="center">下划线</td><td align="center"></td><td align="center">ins</td><td align="center">下划线</td></tr><tr><td align="center">i</td><td align="center">倾斜</td><td align="center"></td><td align="center">em</td><td align="center">倾斜</td></tr><tr><td align="center">s</td><td align="center">删除线</td><td align="center"></td><td align="center">del</td><td align="center">删除线</td></tr></tbody></table><hr>左边为视觉要素,表示无意义的加粗等,右边为强调<a href="https://markdown.com.cn/intro.html#markdown-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">点此访问markdown标题语法官网</a><h2 id="媒体标签"><a href="#媒体标签" class="headerlink" title="媒体标签"></a>媒体标签</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>标准格式为:&lt;img src&#x3D;”” alt&#x3D;””&gt;<br>src属性为图片的地址,当图片加载失败时,alt的文本才会被显示<br>title属性为悬停时显示的信息<br>width和height为宽高,如果仅设置其中一个,则图片按比例缩放.同时设置两个可能造成图片的变形</p><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>路径分为<strong>绝对路径与相对路径</strong>,绝对路径仅需了解,一般使用相对路径<br>绝对路径:从盘符开始的路径,或者也可以使用一段网址<br>相对路径:相对路径分为三个级别</p><ul><li>上级:使用..&#x2F;表示上级目录,返回几级就输几次,例如<strong>..&#x2F;..&#x2F;文件夹名&#x2F;目标文件</strong></li><li>同级:直接输入<strong>目标文件</strong>或<strong>.&#x2F;目标文件</strong></li><li>下级:<strong>文件夹名&#x2F;目标文件</strong></li></ul><h3 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h3><p>格式:&lt;audio src&#x3D;””&gt; &lt;&#x2F;audio&gt;</p><table><thead><tr><th align="center">属性名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">音频的路径</td></tr><tr><td align="center">controls</td><td align="center">显示播放控件</td></tr><tr><td align="center">autoplay</td><td align="center">自动播放(部分浏览器不支持)</td></tr><tr><td align="center">loop</td><td align="center">循环播放</td></tr></tbody></table><hr><audio src="/audio/This Old House.mp3" controls></audio>因为暂不明白如何使用外部插件播放器,所以在此使用网易云音乐提供的播放器<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28828712&auto=1&height=66"></iframe><h3 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h3><p>格式:&lt;video src&#x3D;””&gt; &lt;&#x2F;video&gt;</p><table><thead><tr><th align="center">属性名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">视频的路径</td></tr><tr><td align="center">controls</td><td align="center">显示播放控件</td></tr><tr><td align="center">autoplay</td><td align="center">自动播放(谷歌浏览器中配合muted实现静音)</td></tr><tr><td align="center">loop</td><td align="center">循环播放</td></tr></tbody></table><p><del>你就当我在这放了记忆中的玛妮吧</del><br><a href="https://www.imjw.cc/play/2553-1-1/" target="_blank">记忆中的玛妮在线播放</a></p><iframe src="//player.bilibili.com/player.html?aid=&bvid=BV1md4y137Kr&cid=339262048&page=1&high_quality=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>格式:&lt;a href&#x3D;”此处存放链接”&gt;显示的文字&lt;&#x2F;a&gt;<br>链接也可以放入本地文件地址,比如放入..&#x2F;首页.html,就可以回到首页<br>如果还不知道跳转的地址,可以将href的值写入一个#(空连接),在之后改为正式地址<br>井号地址的链接自带颜色的变化,同时在点击之后会在地址栏加上#,所以也可以用于页内元素的跳转<br>target属性的取值可以改变跳转效果</p><table><thead><tr><th align="center">取值</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">_self</td><td align="center">在当前窗口中跳转(默认)</td></tr><tr><td align="center">_blank</td><td align="center">在新窗口中跳转</td></tr></tbody></table><p><a href="www.baidu.com" target="_blank">跳转到百度</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表的CSS样式写法为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.a</span>&#123;    <span class="hljs-comment">/*使用类选择器或者id*/</span><br><span class="hljs-attribute">list-style-type</span>:square ;  <span class="hljs-comment">/*type可以换成别的值*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>常见的属性值有</p><ul><li>none：不使用项目符号</li><li>disc：实心圆</li><li>circle：空心圆</li><li>square：实心方块</li><li>decimal：阿拉伯数字 </li><li>lower-alpha：小写英文字母 </li><li>upper-alpha：大写英文字母 </li><li>lower-roman：小写罗马数字 </li><li>upper-roman：大写罗马数字</li></ul><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p><del>这一块还是markdown语法方便</del><br>HTML的无序列表使用,type的类型可以是disc(默认值),circle,square</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>赤<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>橙<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>黄<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>绿<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>- 青  <span class="hljs-comment">&lt;!--此处开始为markdown的无序语法--&gt;</span><br>- 蓝<br>- 紫<br></code></pre></td></tr></table></figure><ul>    <li>赤</li>    <li>橙</li>    <li>黄</li>    <li>绿</li></ul><ul><li>青</li><li>蓝</li><li>紫<br>出现一点空行是因为markdown语法和HTML语法不能相邻使用</li></ul><h2 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h2><p>有序列表可以更改序号的类型,type后的值可以是a,A,i,I</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>3. 王五 <span class="hljs-comment">&lt;!--然而,markdown的有序在前面加序号空格就行了--&gt;</span><br></code></pre></td></tr></table></figure><ol type="A">    <li>张三</li>    <li>李四</li></ol><ol start="3"><li>王五</li></ol><h2 id="自定"><a href="#自定" class="headerlink" title="自定"></a>自定</h2><table><thead><tr><th align="center">标签名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">dl</td><td align="center">表示自定义列表的整体,用于包裹dt&#x2F;dd标签</td></tr><tr><td align="center">dt</td><td align="center">表示自定义列表的主题</td></tr><tr><td align="center">dd</td><td align="center">表示自定义列表的针对主题的每一项内容</td></tr></tbody></table><p>dd前会默认显示缩进效果<br>dl标签中仅允许包含dt&#x2F;dd标签<br><del>说实话,实际效果有点丑</del><br>展示:</p><dl>    <dt>标题</dt>    <dd>内容1</dd>    <dd>内容2</dd></dl><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th align="center">标签名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">table</td><td align="center">表格整体,可以包含多个tr</td></tr><tr><td align="center">tr</td><td align="center">表格每行,用于包含td</td></tr><tr><td align="center">td</td><td align="center">表格单元格,包含内容</td></tr></tbody></table><p>上面的表格语法为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|标签名|说明|<br>|:----:|:----:|<br>|table|表格整体,可以包含多个tr|<br>|tr|表格每行,用于包含td|<br>|td|表格单元格,包含内容|<br></code></pre></td></tr></table></figure><p>HTML的语法为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>标签名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>说明<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>table<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>表格整体,可以包含多个tr<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>tr<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>表格每行,用于包含td<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>td<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>表格单元格,包含内容<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果:</p><table>    <tr>        <td>标签名</td>        <td>说明</td>    </tr>    <tr>        <td>table<td>        <td>表格整体,可以包含多个tr</td>    </tr>    <tr>        <td>tr<td>        <td>表格每行,用于包含td</td>    </tr>    <tr>        <td>td<td>        <td>表格单元格,包含内容</td>    </tr></table><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><table><thead><tr><th align="center">属性名</th><th align="center">属性值</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">border</td><td align="center">数字</td><td align="center">边框宽度</td></tr><tr><td align="center">width</td><td align="center">数字</td><td align="center">表格宽度</td></tr><tr><td align="center">height</td><td align="center">数字</td><td align="center">表格高度</td></tr></tbody></table><p>实际开发时针对样式效果推荐使用css设置</p><h3 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h3><table><thead><tr><th align="center">标签名</th><th align="center">属性值</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">cation</td><td align="center">表格大标题</td><td align="center">表示表格整体大标题,默认在表格顶部居中</td></tr><tr><td align="center">th</td><td align="center">表头单元格</td><td align="center">表示一列小标题,通常用于表格第一行,默认内部文字加粗并居中显示</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果演示:</p><table border="2"><caption>个人信息</caption>    <tr>        <th>姓名</th>        <th>性别</th>    </tr>    <tr>        <td>张三</td>        <td>男</td>    </tr>    <tr>        <td>李四</td>        <td>男</td>    </tr></table>在markdown里好像不能正常显示,把这段复制到vscode的中就可以了<h3 id="标签进阶"><a href="#标签进阶" class="headerlink" title="标签进阶"></a>标签进阶</h3><table><thead><tr><th align="center">标签名</th><th align="center">名称</th></tr></thead><tbody><tr><td align="center">thead</td><td align="center">表格头部</td></tr><tr><td align="center">tbody</td><td align="center">表格主题</td></tr><tr><td align="center">tfoot</td><td align="center">表格底部</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这些加了之后实际效果也无改变,仅仅只是给浏览器看的,使执行更加高效</p><h3 id="表格合并"><a href="#表格合并" class="headerlink" title="表格合并"></a>表格合并</h3><p>将多个单元格合并为一个</p><table><thead><tr><th align="center">标签名</th><th align="center">属性值</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">rowspan</td><td align="center">合并的个数</td><td align="center">跨行水平合并</td></tr><tr><td align="center">colspan</td><td align="center">合并的个数</td><td align="center">跨列垂直合并</td></tr></tbody></table><p>只有同一个标签结构的单元格才能合并,不能跨标签合并(thead,tbody,tfoot)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>空位(确信)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table border="2"><caption>个人信息</caption>    <tr>        <th>姓名</th>        <th>性别</th>    </tr>    <tr>        <td>张三</td>        <td rowspan="2">男</td>    </tr>    <tr>        <td>李四</td>    </tr>    <tr>        <td colspan="2">空位(确信)</td>    </tr></table><h3 id="表格边框合并"><a href="#表格边框合并" class="headerlink" title="表格边框合并"></a>表格边框合并</h3><p>在CSS中添加border-collapse:collapse;<br>之后表格便会将单元格合并<br>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-collapse: separate;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>普通<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>示例<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>示例<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>占位<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>占位<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-collapse: collapse;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>合并<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>示例<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>示例<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>占位<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>占位<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>可供收集信息的框<br>可以根据type属性值的不同展现不同的效果</p><table><thead><tr><th align="center">标签名</th><th align="center">type属性值</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">input</td><td align="center">text</td><td align="center">文本框,输入密码</td></tr><tr><td align="center">input</td><td align="center">password</td><td align="center">密码框,输入密码</td></tr><tr><td align="center">input</td><td align="center">radio</td><td align="center">单选框,用于多选一</td></tr><tr><td align="center">input</td><td align="center">checkbox</td><td align="center">多选框,用于多选多</td></tr><tr><td align="center">input</td><td align="center">file</td><td align="center">文件选择,用于上传文件</td></tr><tr><td align="center">input</td><td align="center">submit</td><td align="center">提交按钮,用于提交</td></tr><tr><td align="center">input</td><td align="center">reset</td><td align="center">重置按钮,用于重置</td></tr><tr><td align="center">input</td><td align="center">button</td><td align="center">一个没什么用的按钮,用于配合js添加功能</td></tr></tbody></table><p>radio的属性并没有真正实现单选,还需要加name属性,可以对其进行分组,同一组中仅能选择一个值.checked属性可以默认选中<br>file的属性可以加入multiple属性进行多文件选择,不加为单选<br>按钮的具体功能需要配合from标签,如果提交与重置按钮想要使用,需要提供一个父级标签form<br>按钮(button)默认是没有文字的,用户也不知道有什么用,需要一个value标签增加文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>文本框:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入文本就好&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>密码框:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入密码&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <span class="hljs-comment">&lt;!--自带加密--&gt;</span><br>邮箱:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>电话:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>单选框:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>未知<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>武装直升机<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>多选框:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>文件上传:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>提交按钮:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>重置按钮:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>按钮<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点此鼠标寿命-1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>还是按钮:<span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>没什么用<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><form action="">文本框:<input type="text" placeholder="输入文本就好"><br>密码框:<input type="password" placeholder="输入密码"><br> <!--自带加密-->邮箱:<input type="email"><br>电话:<input type="tel"><br>单选框:<input type="radio" name="gender" checked>男<input type="radio" name="gender">女<input type="radio" name="gender">未知<input type="radio" name="gender">武装直升机<br>多选框:<input type="checkbox"><br>文件上传:<input type="file" multiple><br>提交按钮:<input type="submit"><br>重置按钮:<input type="reset"><br></form>按钮<input type="button" value="点此鼠标寿命-1"><br>还是按钮:<button>没什么用</button><p>button按钮也可以加入很多标签和功能,也可以&lt;button type&#x3D;”submit”&gt; &lt;&#x2F;button&gt;,这样就得到了一个带有提交功能的按钮</p><h4 id="表单时间"><a href="#表单时间" class="headerlink" title="表单时间"></a>表单时间</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>年月日：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>年月：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;month&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>年周：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;week&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>时间：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;time&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>年月日：<input type="date" /></p><p>年月：<input type="month" /></p><p>年周：<input type="week" /></p><p>时间：<input type="time" /></p><h3 id="select下拉菜单标签"><a href="#select下拉菜单标签" class="headerlink" title="select下拉菜单标签"></a>select下拉菜单标签</h3><p>提供多个选择项的下拉菜单表单控件<br>select:下拉菜单的整体<br>option:下拉菜单的每一项<br>属性:selected(默认选中)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周一<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周二<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周三<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周四<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周五<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周六<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>&gt;</span>周日<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <span class="hljs-comment">&lt;!--默认选中--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><select>    <option>周一</option>    <option>周二</option>    <option>周三</option>    <option>周四</option>    <option>周五</option>    <option>周六</option>    <option selected>周日</option></select><h3 id="textarea文本域标签"><a href="#textarea文本域标签" class="headerlink" title="textarea文本域标签"></a>textarea文本域标签</h3><p>在网页中提供可输入多行文本的表单控件<br>标签名:textarea<br>常见属性:</p><ul><li>cols:规定了文本域内可见行数</li><li>rows:规定了文本域的宽度<br>注意事项:右下角可以<strong>拖拽改变大小</strong>,实际建议配合css使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span>Tell us your story:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;story&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;story&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;33&quot;</span>&gt;</span><br>It was a dark and stormy night...<br>也许还有人记得史努比?<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p><label for="story">Tell us your story:</label></p><textarea id="story" name="story"          rows="5" cols="33">It was a dark and stormy night...也许还有人记得史努比?</textarea><h3 id="数据联想表单"><a href="#数据联想表单" class="headerlink" title="数据联想表单"></a>数据联想表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list_name&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><datalist id="list_name"><option>选项1</option><option>选项2</option><option>选项3</option></datalist><h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><p>用于绑定内容和表单标签的关系<br>标签名label<br>使用方法①:</p><ol>    <li>使用label标签把内容包裹起来</li>    <li>在表单标签上添加id属性</li>    <li>在label标签的for属性中设置对应的id属性值</li></ol>使用方法②:<br><ol><li>直接使用label标签把内容和表单标签一起包裹起来</li><li>需要把表单的label标签的for属性删除</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br></code></pre></td></tr></table></figure><p><input type="radio" name="gender" id="male"><label for="male">男</label></input><input type="radio" name="gender" id="female"><label for="female">女</label></input></p><p>实际效果其实也就是点击文字时也可以触发按钮控件,之前的按钮必须点击按钮触发,点击文字无效</p><p>第二种写法:(为了美观所以换行)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><p><label><input type="radio" name="gender" id="male">男</input></label><br><label><input type="radio" name="gender" id="female">女</input></label></p><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><h3 id="无语义的布局标签"><a href="#无语义的布局标签" class="headerlink" title="无语义的布局标签"></a>无语义的布局标签</h3><p>无语义的标签中大量使用div和span这两个标签</p><ul><li>div标签:一行仅显示一个</li><li>span标签:一行可以显示多个<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>赵七<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>赵八<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><div>张三</div><div>李四</div><div>王五</div><span>赵六</span><span>赵七</span><span>赵八</span></li></ul><p>其实也算是行内和块状元素?</p><h3 id="有语义的布局标签"><a href="#有语义的布局标签" class="headerlink" title="有语义的布局标签"></a>有语义的布局标签</h3><p>在HTML5的新版本中,推出了一些有语义的标签供开发者使用</p><table><thead><tr><th align="center">标签名</th><th align="center">语义</th></tr></thead><tbody><tr><td align="center">header</td><td align="center">网页头部</td></tr><tr><td align="center">nav</td><td align="center">网页导航</td></tr><tr><td align="center">footer</td><td align="center">网页底部</td></tr><tr><td align="center">aside</td><td align="center">网页侧边栏</td></tr><tr><td align="center">section</td><td align="center">网页区块</td></tr><tr><td align="center">article</td><td align="center">网页文章</td></tr></tbody></table><p>以上标签显示特点和div一致,但是比div多了不同的语义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>头部<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>文章<span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>网页底部<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里就不显示效果了,网页布局大致是这样</p><h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><p>有些符号在HTML语言中并不能被正常输出,例如&lt;&gt;,这时可以通过字符实体表达.<br>具体的字符实体可以参考其他站点的文件,这里就暂不提供了<br>字符实体的结构为:&amp;nbsp;&amp;nbsp;<strong><ruby>&amp;英文;<rt>挺麻烦的</rt></ruby></strong></p><h3 id="一个临时加入的测试"><a href="#一个临时加入的测试" class="headerlink" title="一个临时加入的测试"></a>一个临时加入的测试</h3><p>输出犯罪嫌疑人张三 李四 王五 赵六 孙七<br>其中张三李四为盗窃,赵六孙七为抢劫,王五是包庇罪<br>张三李四犯罪时间为2023.1.24 21:07<br>赵六孙七犯罪时间为2023.1.25 1:03<br>王五不记录犯罪时间<br>周八吴九是盗窃案的受害者,张三李四是抢劫案的受害者<br>表格最下方为:坦白从宽,抗拒从严</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>犯罪嫌疑人名单<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>罪行<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>犯罪时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>受害人<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>盗窃<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2023.1.24 21:07<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>周八 <span class="hljs-symbol">&amp;nbsp;</span>吴九<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>包庇<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>无<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>无<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>抢劫<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2023.1.25 1:03<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>张三 <span class="hljs-symbol">&amp;nbsp;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>孙七<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table border="2">    <caption>犯罪嫌疑人名单</caption>    <tr>        <th>姓名</th>        <th>罪行</th>        <th>犯罪时间</th>        <th>受害人</th>    </tr>    <tr>        <td>张三</td>        <td rowspan="2">盗窃</td>        <td rowspan="2">2023.1.24 21:07</td>        <td rowspan="2">周八 &nbsp;吴九</td>    </tr>    <tr>        <td>李四</td>    </tr>    <tr>        <td>王五</td>        <td>包庇</td>        <td>无</td>        <td>无</td>    </tr>        <td>赵六</td>        <td rowspan="2">抢劫</td>        <td rowspan="2">2023.1.25 1:03</td>        <td rowspan="2">张三 &nbsp;李四</td>    </tr>    <tr>        <td>孙七</td>    </tr></table><h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><p>CSS:层叠样式表(Cascading style sheets)<br>CSS的作用是给页面中的HTML标签设置样式<br>CSS写在style标签中,style标签一般写在head里面,title标签的下方</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:purple;<br><span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">30px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>&#125;<br><span class="hljs-comment">/*选择器&#123;css属性&#125;*/</span><br></code></pre></td></tr></table></figure><h3 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h3><p>CSS有三种引入方式</p><ol><li>内嵌<ul><li>虽然可以写在任何位置，但通常写在head标签中</li></ul></li><li>外联<ul><li>需要通过link标签在网页中引入</li></ul></li><li>行内<ul><li>不建议，配合js使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!--外联引入在头部输入以下代码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;路径&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--行内使用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:darkred;font-size: 20px;&quot;</span>&gt;</span>文字<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><table><thead><tr><th align="center">引入方式</th><th align="center">书写位置</th><th align="center">作用范围</th><th align="center">使用场景</th></tr></thead><tbody><tr><td align="center">内嵌式</td><td align="center">CSS写在style标签中</td><td align="center">当前页面</td><td align="center">小案例</td></tr><tr><td align="center">外联式</td><td align="center">CSS写在单独的css文件中，通过link标签引入</td><td align="center">多个页面</td><td align="center">项目中</td></tr><tr><td align="center">行内式</td><td align="center">CSS写在标签的style属性中</td><td align="center">当前标签</td><td align="center">配合js使用</td></tr></tbody></table><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><div>结构：<strong style="color:red;">标签名</strong>{css属性名：属性值；}</div>通过标签名，找到页面中的所有这类标签，设置样式<ol>    <li>标签选择器选择的是一类标签，而不是单独某一个</li>    <li>标签选择器无论嵌套多深，都可以找到对应的标签</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-comment">/*所有段落字体变红*/</span><br></code></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><div>结构：<strong style="color:red;">.类名</strong>{css属性名：属性值；}</div>通过类名，找到页面中所有带有这个类名的标签，设置样式注意点：<ol><li>所有标签上都有class属性，属性的属性值称为类名</li><li>类名可以由数字，字母，下划线，杠组成，但不能以数字和杠开头</li><li>一个标签可以同时有多个类名，类名之间以空格隔开</li><li>类名可以重复，一个类选择器可以同时选中多个标签</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.one</span>&#123;<br><span class="hljs-attribute">color</span>: purple; <span class="hljs-comment">/*将类名为one的标签改为红色字体样式*/</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>带有指定类名的标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><div>结构：<strong style="color:red;">#id属性值</strong>{css属性名：属性值；}</div>通过id属性值，找到页面中带有这个id属性值的标签，设置样式<br>注意点：<ol>    <li>所有标签上都有id属性</li>    <li>id属性值类似于身份证号码，在页面中是唯一且不可重复的</li>    <li>一个标签上仅有一个id属性值</li>    <li>一个id选择器仅能选中一个标签</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-id">#id</span>&#123;<br><span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><div>结构：<strong style="color:red;">*</strong>{css属性名：属性值；}</div>找到页面中所有标签，设置样式极少情况下会使用，可以用于去除标签默认的margin和padding<h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><div>属性名：<strong style="color: red;">font-size</strong></div><div>属性：<strong style="color: red;">数字 + px</strong></div>注意点：<ul><li>谷歌浏览器默认文字大小是16px</li><li>单位需要设置，否则无效<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><div>属性名：<strong style="color: red;">font-weight</strong></div>取值：<ul><li><p>关键字：</p>  <table>      <tr>          <th style="font-weight: normal;">正常</th>          <th style="font-weight: normal;">normal</th>      </tr>      <tr style="background-color: dimgrey;">          <th style="font-weight: bold;">加粗</th>          <th style="font-weight: bold;">bold</th>      </tr>  </table></li><li><p>纯数字：100~900的整百数：</p>  <table>      <tr>          <th style="font-weight: 400;">正常</th>          <th style="font-weight: 400;">400</th>      </tr>      <tr style="background-color: dimgrey;font-weight: bold;">          <th style="font-weight: 700;">加粗</th>          <th style="font-weight: 700;">700</th>      </tr>  </table>注意点：</li><li><p>不是所有字体都提供了九种粗细，因此部分取值页面中无变化</p></li><li><p>实际开发中以：正常、加粗两种取值使用最多</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>&#125;<br><span class="hljs-selector-tag">h1</span>&#123;<br><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字体样式（倾斜）"><a href="#字体样式（倾斜）" class="headerlink" title="字体样式（倾斜）"></a>字体样式（倾斜）</h3><div>属性名：<strong style="color: red;">font-style</strong></div>取值：<ul>    <li>正常(默认值):normal</li>    <li>倾斜:italic</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">font-style</span>: italic;<br>&#125;<br></code></pre></td></tr></table></figure><div style="font-style: italic;">嗯？</div><h3 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h3><div>属性名：<strong style="color: red;">font-family</strong></div><div>常见取值：字体1，字体2，字体3...等</div><p>常见取值：</p><ul><li>具体字体：微软雅黑，宋体，黑体，楷体等</li><li>字体系列：sans-serif,serif,monospace等<br>渲染规则：</li></ul><ol><li>从左往右按顺序查找，如果电脑中未安装该字体</li><li>如果都不支持，此时会根据操作系统，显示最后字体系列的默认字体<br>注意点：</li><li>如果字体名称中存在的多个单词，推荐使用引号包裹</li><li>最后一项字体系列不需要引号包裹</li><li>网页开发时。尽量使用系统常见字带字体，保证不同用户浏览网页都可以正常显示<table> <tr>     <td>系统</td>     <td>默认字体</td> </tr> <tr>     <td>Windows</td>     <td>微软雅黑</td> </tr> <tr>     <td>macOS</td>     <td>草方</td> </tr></table></li></ol><p>示例：</p><div style="font-size: 20px;font-family: 楷体;">20px的楷体</div><h3 id="常见字体系列（了解即可）"><a href="#常见字体系列（了解即可）" class="headerlink" title="常见字体系列（了解即可）"></a>常见字体系列（了解即可）</h3><h4 id="无衬线-sans-serif"><a href="#无衬线-sans-serif" class="headerlink" title="无衬线(sans-serif)"></a>无衬线(sans-serif)</h4><ol><li>特点：文字笔画粗细均匀，并且首尾无装饰</li><li>场景：网页中大多采用无衬线字体</li><li>常见该系列字体：黑体、Arial</li></ol><h4 id="衬线字体"><a href="#衬线字体" class="headerlink" title="衬线字体"></a>衬线字体</h4><ol><li>特点：文字笔画粗细不均</li><li>场景：报刊书籍中应用广泛</li><li>常见该系列字体：宋体、Times New Roman</li></ol><h4 id="等宽字体"><a href="#等宽字体" class="headerlink" title="等宽字体"></a>等宽字体</h4><ol><li>特点：每个字母或文字的宽度相等</li><li>场景：一般用于程序代码编写，有利于代码的阅读和编写</li><li>常见该系列字体：Consolas、fira code</li></ol><p>示例：</p><div style="font-size: 20px;font-family: sans-serif;">20px的sans-serif</div><div style="font-size: 20px;font-family: serif;">20px的serif</div><div style="font-size: 20px;font-family: monospace;">20px的monospace</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">font-family</span>: 微软雅黑,黑体,sans-serif;<br>&#125;  <span class="hljs-comment">/*如果没有安装微软雅黑，按黑体显示，无黑体则任意一种非称线字体*/</span><br></code></pre></td></tr></table></figure><h3 id="样式的层叠问题"><a href="#样式的层叠问题" class="headerlink" title="样式的层叠问题"></a>样式的层叠问题</h3><p>如果给同一个标签设置了相同的属性，此时样式会层叠（覆盖），写在最下面的会生效<br>tip：</p><ul><li>CSS(Cascading style sheets)<strong>层叠样式表</strong></li></ul><h3 id="字体font的相关属性的连写"><a href="#字体font的相关属性的连写" class="headerlink" title="字体font的相关属性的连写"></a>字体font的相关属性的连写</h3><div>属性名：<strong style="color: red;">font(复合属性)</strong></div>取值：<ul><li>font:style weight size family<br>省略要求：</li><li>只能省略前两个，省略后相当于设置了默认值</li><li>如果同时设置单独和连写形式，单独的样式写在连写的下方，或者单独的样式写在连写的里面</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">font</span>:italic <span class="hljs-number">700</span> <span class="hljs-number">40px</span> 宋体;  <span class="hljs-comment">/*连写*/</span><br><span class="hljs-comment">/*style weight size 字体*/</span><br><span class="hljs-comment">/*font-style:nomral 这是style单独写出来*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><div>属性名：<strong style="color: red;">text-indent</strong></div>取值：<ul><li>数字+px</li><li>数字+em（1em&#x3D;当前标签font-size的大小）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">text-indent</span>: <span class="hljs-number">32px</span>; <span class="hljs-comment">/*文本默认字号16px，此处开头缩进两个字体*/</span><br><span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>; <span class="hljs-comment">/*文本缩进两个字体*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实际上也就是每段开头空出两个字体大小</p><h4 id="水平对齐"><a href="#水平对齐" class="headerlink" title="水平对齐"></a>水平对齐</h4><div>属性名：<strong style="color: red;">text-align</strong></div>取值：    <table>        <tr>            <td>属性值</td>            <td>效果</td>        </tr>        <tr>            <th>left</th>            <th>左对齐</th>        </tr>        <tr>            <th>center</th>            <th>居中对齐</th>        </tr>        <tr>            <th>right</th>            <th>右对齐</th>        </tr>    </table>注意点：<ul><li>如果需要让文本水平居中，text-align属性给文本所在标签（文本的父元素设置）</li></ul><h5 id="水平居中方法总结"><a href="#水平居中方法总结" class="headerlink" title="水平居中方法总结"></a>水平居中方法总结</h5><p>text-align:center</p><ol><li>文本</li><li>span标签、a标签</li><li>input、img标签<br>注意点：</li><li>如果需要让以上元素水平居中，需要给以上元素的父元素设置<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/img/猫猫祭拜.png" alt="cat" title="超智慧生物(误)"></li></ol><h5 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h5><div>属性名：<strong style="color: red;">text-decoration</strong></div>取值：    <table>        <tr>            <td>属性值</td>            <td>效果</td>        </tr>        <tr>            <th>underline</th>            <th>下划线</th>        </tr>        <tr>            <th>line-through</th>            <th>删除线</th>        </tr>        <tr>            <th>ouverline</th>            <th>上划线</th>        </tr>        <tr>            <th>none</th>            <th>无装饰线</th>        </tr>    </table>注意点：<ul><li>开发中会使用text-decoration:none;清除a标签默认的下划线（a标签为超链接标签）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">text-decoration</span>: underline;<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">text-decoration</span>: line-through;<br>&#125;<br><span class="hljs-selector-tag">h1</span>&#123;<br><span class="hljs-attribute">text-decoration</span>: overline;<br>&#125;<br><span class="hljs-selector-tag">a</span>&#123;<br><span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><p>控制一行的上下行间距，行高的组成为：上间距，文本高度，下间距</p><div>属性名：<strong style="color: red;">line-height</strong></div>取值：    <ul>        <li>数字+px</li>        <li>倍数（当前标签font-size的倍数）</li>    </ul>应用：<ol><li>让单行文本垂直居中可以设置line-height：文字父元素高度</li><li>网页精准布局时，会设置line-height：1 可以取消上下间距</li></ol><p>注意点：</p><ul><li>如果同时设置了行高和font连写，注意覆盖问题</li><li>font:style weight size&#x2F;line-height family;<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">font</span>:italic <span class="hljs-number">700</span> <span class="hljs-number">30px</span>/<span class="hljs-number">2</span> 楷体;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="颜色取值-了解"><a href="#颜色取值-了解" class="headerlink" title="颜色取值(了解)"></a>颜色取值(了解)</h2><p>HTML中的颜色取值方式有四种</p><ul><li>预定义的颜色名，如red,green,blue</li><li>rgb表示法,如rgb(0,0,0),rgb(255,255,255)</li><li>rgba表示法：红绿蓝三原色+a表示透明度，取值范围为0-1，如rgba(255,255,255,0.5)</li><li>十六进制表示法:#开头，将数字转换成16进制表示,如#000000，#ff0000</li></ul><h1 id="盒"><a href="#盒" class="headerlink" title="盒"></a>盒</h1><h2 id="盒样例"><a href="#盒样例" class="headerlink" title="盒样例"></a>盒样例</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#box1</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;   <br><span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br><span class="hljs-attribute">text-align</span>: center;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div id="box1">盒1</div><h2 id="盒样式"><a href="#盒样式" class="headerlink" title="盒样式"></a>盒样式</h2><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><p>当需要使盒居中时,可以通过margin:0 auto完成自动居中<br>此为块元素居中,align是块元素内的元素基于父元素居中</p><ol><li>可以直接给当前标签内嵌居中</li><li>一般针对固定宽度的盒子,不设宽度则占满浏览器</li></ol><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>根据HTML标签的嵌套关系,选择父元素后代中满足条件的元素</p><div>选择器语法：<strong style="color: red;">选择器1 选择器2{CSS}</strong></div>找到选择器1标签的后代,找到满足选择器2样式的标签,设置样式,无视嵌套深度<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>此<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这也是有效的</p><h3 id="自带选择器"><a href="#自带选择器" class="headerlink" title="自带选择器"></a>自带选择器</h3><p>根据HTML标签的嵌套关系,仅寻找一层嵌套关系</p><div>选择器语法：<strong style="color: red;">选择器1>选择器2{CSS}</strong></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">a</span>&#123;<br><span class="hljs-attribute">color</span>: darkred;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>div子代<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>div中p的子代<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时运行,则div的p的子代不会变色,因为这是二层</p><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>其实就和普通选择器差不多</p><div>选择器语法：<strong style="color: red;">选择器1,选择器2{CSS}</strong></div>通过逗号可以使得多种元素共用一个样式<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>选中页面中同时满足多个选择器的标签</p><div>选择器语法：<strong style="color: red;">选择器1.选择器2{CSS}</strong></div>找到页面中既能被选择器1选中,又能被选择器2选中的标签必须紧挨,中间没有其他东西如果交集选择器中有标签选择器,标签选择器必须写在最前方<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.mine</span>&#123;<br><span class="hljs-attribute">color</span>: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mine&quot;</span>&gt;</span>p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mine&quot;</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此处仅会令div变色,因为css要求div连着类mine</p><h3 id="hover伪类选择器"><a href="#hover伪类选择器" class="headerlink" title="hover伪类选择器"></a>hover伪类选择器</h3><p>作用:选中鼠标<strong>悬停</strong>在元素上的状态设置样式</p><div>选择器语法：<strong style="color: red;">选择器1:hover {CSS}</strong></div><h3 id="emmet语法"><a href="#emmet语法" class="headerlink" title="emmet语法"></a>emmet语法</h3><p>通过简写语法快速生成代码,了解就好,类似于选择器的写法</p><table><thead><tr><th align="center">记忆</th><th align="center">示例</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">标签名</td><td align="center">div</td><td align="center">&lt;div&gt;&lt;div&gt;</td></tr><tr><td align="center">类选择器</td><td align="center">.red</td><td align="center">&lt;div class&#x3D;”red”&gt; &lt;div&gt;</td></tr><tr><td align="center">id选择器</td><td align="center">#one</td><td align="center">&lt;div id&#x3D;”one”&gt;&lt;div&gt;</td></tr><tr><td align="center">交集选择器</td><td align="center">p.red#one</td><td align="center">&lt;p class&#x3D;”red” id&#x3D;”one”&gt;&lt;&#x2F;p&gt;</td></tr><tr><td align="center">子代选择器</td><td align="center">ul&gt;li</td><td align="center">&lt;ul&gt;&lt;div&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</td></tr><tr><td align="center">内部文本</td><td align="center">ul&gt;li(内容)</td><td align="center">&lt;ul&gt;&lt;li&gt;内容&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</td></tr><tr><td align="center">列表嵌套</td><td align="center">ul&gt;li*3</td><td align="center">&lt;ul&gt;&lt;li&gt;&lt;li&gt;&lt;li&gt;&lt;&#x2F;li&gt;&lt;&#x2F;li&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</td></tr></tbody></table><h2 id="背景相关属性"><a href="#背景相关属性" class="headerlink" title="背景相关属性"></a>背景相关属性</h2><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><div>属性名:<strong style="color: red;">background-color(bgc)</strong></div>属性值的颜色取值有:关键字,rgb表示法,rgba表示法,十六进制注意点:背景颜色值默认透明:rgba,transparent <br>背景颜色不会影响盒子大小,这使得可以看清盒子的大小和位置,一般布局中会先给盒子设置背景颜色<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div id="div1">div</div><h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><div>属性名:<strong style="color: red;">background-image(bgi)</strong></div>属性值是background-image:url('图片路径');<p>背景图片中的url可以省略引号<br><br>背景图片默认在水平和垂直方向平铺<br><br>背景图片仅仅有装饰效果,类似于背景色,并不能改变盒子大小<br>,但是可以主动改变图片的属性<br> 暂不示例</p><h3 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h3><div>属性名:<strong style="color: red;">background-repeat(bgr)</strong></div><table><thead><tr><th align="center">取值</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">repeat</td><td align="center">默认值,水平竖直都平铺</td></tr><tr><td align="center">no-repeat-x</td><td align="center">不水平平铺</td></tr><tr><td align="center">no-repeat</td><td align="center">不平铺</td></tr><tr><td align="center">repeat-x</td><td align="center">沿着水平方向x轴平铺</td></tr><tr><td align="center">repeat-y</td><td align="center">沿着垂直方向y轴平铺</td></tr></tbody></table><h3 id="背景位置"><a href="#背景位置" class="headerlink" title="背景位置"></a>背景位置</h3><div>属性名:<strong style="color: red;">background-position(bgp)</strong></div>background-position: 水平方向位置 垂直方向位置属性值有两种<ul><li>方位名词(最多只能表示9个位置)<ol><li>水平方向:left,center,right</li><li>垂直方向:top,center,bottom</li></ol></li><li>数字+px(坐标)<ul><li>坐标系<ol><li>原点(0,0),盒子的左上角</li><li>x轴水平向右</li><li>y轴水平向下</li></ol></li><li>操作: 将图片左上角与坐标点重合即可</li></ul></li></ul><p>方位名词取值和坐标取值可以混用,第一个值水平,第二个垂直</p><h3 id="背景相关属性连写"><a href="#背景相关属性连写" class="headerlink" title="背景相关属性连写"></a>背景相关属性连写</h3><div>属性名:<strong style="color: red;">background(bg)</strong></div><p>属性值:单个属性值的连写,空格隔开<br>书写顺序:<br><br>推荐使用:background:color image repeat position<br><br>按需省略,在PC端如果盒子大小和背景一样,可以直接写background:url()<br><br>要么单独的样式写在连写下面,要么写在连写里面</p><h4 id="背景相关属性-1"><a href="#背景相关属性-1" class="headerlink" title="背景相关属性"></a>背景相关属性</h4><p>在网页中展示一张图片的效果:<br><br>方法1:直接写img标签,不设置框高默认原尺寸<br><br>方法2:div标签+背景图片<br><br>需要设置div的宽高,背景图片只是装饰的css样式,不能撑开图片</p><h3 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><p>特点:独占,宽度默认继承父元素(color属性设置默认整行),高度按内容撑开,可以设置宽高<br>代表标签:div,p,h,ul,li,dl,dt,dd,form,header,nav,footer</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.h</span>&#123;<br><span class="hljs-attribute">color</span>: purple;<br><span class="hljs-attribute">background</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h&quot;</span>&gt;</span>大概是这样<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="h">大概是这样</div><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>特点:一行显示多个,宽度和高度默认由内容撑开(color仅延展到文字),不可设置宽高<br>代表标签:a,span,b,u,i,s,strong,ins,em,del</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.h</span>&#123;<br><span class="hljs-attribute">color</span>: purple;<br><span class="hljs-attribute">background</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h&quot;</span>&gt;</span>大概是这样<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class="h">大概是这样</span></p><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>特点:一行可以显示多个<br>可以设置宽高<br>代表标签:</p><ul><li>input,textarea,button,select…</li><li>特殊情况:img标签有行内块元素特点,但是Chrome调试工具中显示结果为inline</li></ul><table><thead><tr><th align="center">元素模式</th><th align="center">元素排列</th><th align="center">设置样式</th><th align="center">默认宽度</th><th align="center">包含</th></tr></thead><tbody><tr><td align="center">块级元素</td><td align="center">一行只能放一个块级元素</td><td align="center">可以设置宽度高度</td><td align="center">容器的100%</td><td align="center">容器级可以包含任何标签</td></tr><tr><td align="center">行内元素</td><td align="center">一行可以放多个行内元素</td><td align="center">不可以直接设置宽度高度</td><td align="center">它本身内容的宽度</td><td align="center">容纳文本或者其他行内元素</td></tr><tr><td align="center">行内块元素</td><td align="center">一行放多个行内块元素</td><td align="center">可以设置宽度高度</td><td align="center">它本身内容的宽度</td><td align="center"></td></tr></tbody></table><h4 id="CSS的元素显示模式"><a href="#CSS的元素显示模式" class="headerlink" title="CSS的元素显示模式"></a>CSS的元素显示模式</h4><p>特殊情况下需要元素模式的转换,一个模式的元素需要另外一种模式的特性<br>比如想要增加链接&lt;&gt;的触发范围<br>转为块元素:display:block;<br>行内元素:display:inline;<br>行内块元素:display:inline-block;<br>将行内元素a转换为块元素:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">a</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="snipaste的使用"><a href="#snipaste的使用" class="headerlink" title="snipaste的使用"></a>snipaste的使用</h3><p>一个截图工具,可以让你将截图贴回屏幕上<br>alt取色,shift切换取色模式<br>F1截图,同时测量大小,设置箭头,书写文字等</p><h3 id="单行文字垂直居中"><a href="#单行文字垂直居中" class="headerlink" title="单行文字垂直居中"></a>单行文字垂直居中</h3><p>CSS并未提供文字垂直居中的代码,可以使用其他方法实现<br>解决方案:让文字的行高等同于盒子高度,即可让文字在当前盒内垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-attribute">line-height</span>= <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">height</span> = <span class="hljs-number">40px</span>;<br></code></pre></td></tr></table></figure><p>实际为将文字挤在中间</p><h2 id="CSS的背景"><a href="#CSS的背景" class="headerlink" title="CSS的背景"></a>CSS的背景</h2><p color="red"><strong>background-color</strong>属性定义了元素的背景颜色</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>作业内容</title>
    <link href="/2023/03/28/%E4%B8%8A%E6%AC%A1%E7%9A%84%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/03/28/%E4%B8%8A%E6%AC%A1%E7%9A%84%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<p>1.Java是由<strong>Sun Microsystems</strong>公司推出的<strong>跨平台</strong>,<strong>完全面向对象</strong>的一种高级的编程语言<br>2.自面世以来,java以<strong>易学易用</strong>,<strong>功能强大</strong>的特点得到了广泛的应用<br>3.使用java语言可以编写<strong>桌面GUI程序,web开发,嵌入式开发&#x2F;功能手机开发,Android APP开发</strong>等.<br>4.<strong>Java</strong>被誉为最优秀的计算机语言<br>5.1995年,<strong>SunWorld大会</strong>上推出了一种极富创造力的,面向对象的程序设计语言–Java,它由Java之父<strong>James Gosling</strong>博士设计<br>6.作为Sun研究院博士,詹姆斯·戈士林亲手设计了Java语言,并完成了<strong>Java技术的原始编译器和虚拟机</strong>.<br>7.Java最初的名字是<strong>Oak</strong>,1995年被重新命名为Java<br>8.Java是一种通过<strong>解释方式</strong>来执行的语言,其语法规则和<strong>C++<strong>类似.同时,Java也是一种</strong>跨平台</strong>的程序设计语言,用Java语言编写的程序,可以运行在任何平台和设备上.例如,可以跨越<strong>IBM个人电脑,MAC苹果计算机,各种微处理器硬件平台</strong>,以及<strong>Windows,Unix,Linux,Mac OS</strong>等系统平台,实现”一次编写,到处运行”<br>9.Java非常适合于<strong>企业网络和Internet环境</strong>，现在已成为<strong>Internet</strong>中最受欢迎、最有影响的编程语言之一。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>待编辑</title>
    <link href="/2023/03/28/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E6%A1%88%E4%BE%8B/"/>
    <url>/2023/03/28/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;书山有路勤为径\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;学海无涯苦作舟\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>求取整数较大值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>  <span class="hljs-comment">//定义函数值为整形,参数为整形</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> z;<br><span class="hljs-keyword">if</span> (x &gt; y)<br>&#123;<br>z = x;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>z = y;<br>&#125;<br><span class="hljs-keyword">return</span> z;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;  <span class="hljs-comment">//声明使用函数compare,明显调用的表达式前的括号必须具有(指针)函数类型</span><br><br><span class="hljs-type">int</span> a, b, c;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入数字:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入数字:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b);<br>c = <span class="hljs-built_in">compare</span>(a, b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;较大者为%d\n&quot;</span>, c);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>华氏度转摄氏度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">float</span> f, c;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入华氏度:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;f);<br>c = (<span class="hljs-number">5.0</span> / <span class="hljs-number">9</span>)*(f - <span class="hljs-number">32</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n摄氏度为:%f&quot;</span>, c);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>求模</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> num1,num2;  <span class="hljs-comment">//求模只能发生在整数之间</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请分别键入两个数字以求取模:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;num1, &amp;num2);<br><span class="hljs-type">int</span> result = num1 % num2;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n求得为:%d&quot;</span>,result);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>求两千年以内闰年</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">for</span> (year = <span class="hljs-number">0</span>; year &lt;= <span class="hljs-number">2000</span>; year++)     <br>    &#123;<br>        <span class="hljs-comment">//能被4整除且不能被100整除，或者能被400整除即为闰年则输出</span><br>        <span class="hljs-keyword">if</span> ((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>))<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, year);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>强制类型转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">float</span> a = <span class="hljs-number">3.14159</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">4</span>;<br>b = (<span class="hljs-type">float</span>)(a + <span class="hljs-number">5</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>,(<span class="hljs-type">int</span>)a,b);<br>&#125;<br></code></pre></td></tr></table></figure><p>幂函数运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">float</span> n,m,e;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分别键入数字与次幂:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f%f&quot;</span>,&amp;n,&amp;m);<br>e = <span class="hljs-built_in">pow</span>(n,m);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;结果为:%f&quot;</span>,e);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用输出格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">float</span> b = <span class="hljs-number">123.4567</span>;<br><span class="hljs-type">double</span> c = <span class="hljs-number">12345678.1234567890</span>;<br><span class="hljs-type">char</span> d = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%6d\n&quot;</span>, a);<span class="hljs-comment">//输出六位整数,空缺的四位用空格/0替代</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%o\n&quot;</span>, a);<span class="hljs-comment">//输出八进制整数12</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%x\n\n&quot;</span>, a);<span class="hljs-comment">//输出无符号16进制整数,结果为a</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b=%f\n&quot;</span>, b);<span class="hljs-comment">//输出单精度浮点数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b(%%f)=%f,b(%%lf)=%lf\n&quot;</span>, b, b);  <span class="hljs-comment">//两个%%防止被转义,输出为%.lf输出保留六位小数的双精度浮点数,补足位0</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c=%f\n&quot;</span>, c);   <span class="hljs-comment">//保留六位小数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lf格式下c=%lf,9.15lf格式下c=%9.15f\n\n&quot;</span>, c, c); <span class="hljs-comment">//小数点前连带小数点输出九位,小数点后输出15位</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d=%c\n&quot;</span>, d);  <span class="hljs-comment">//输出字符a</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>收拢字幕</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;welcome to the Internet&quot;</span>;<br><span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;#######################&quot;</span>;<br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> right = <span class="hljs-built_in">sizeof</span>(arr1)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) - <span class="hljs-number">1</span>; <span class="hljs-comment">//取arr1长度-1(数组下标从0开始).字符串后有\0,非字符串无.\0仅占用内存不计算长度</span><br><span class="hljs-comment">// strlen(arr1-1)输出结果为24,需要引用string.h函数库</span><br><span class="hljs-keyword">while</span> (left &lt;= right)<br>&#123;<br>arr2[left] = arr1[left];<br>arr2[right] = arr1[right];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, arr2);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">200</span>); <span class="hljs-comment">//延时200毫秒</span><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>); <span class="hljs-comment">//执行清屏</span><br>left++;<br>right--;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;welcome to the Internet&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符+1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请键入单个字符&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;后一位为%c&quot;</span>,a+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出10%</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> num=<span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%%\n&quot;</span>,num);<br></code></pre></td></tr></table></figure><p>正确获取输入值,但是使用逗号隔开</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;键入两个数值,使用逗号隔开\n&quot;</span>);<br><span class="hljs-type">int</span> a, b;<br><span class="hljs-type">char</span> c;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;a, &amp;b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, a, b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>随机数生成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">menu</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;****1.play 0.exit****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********************\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">game</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> guess = <span class="hljs-number">0</span>;<br>num = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">100</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">//rand生成随机数函数,需要srand()函数设置随机起点</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入一个数字\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;guess);<br><span class="hljs-keyword">if</span> (guess &gt; num)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;猜大了\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess &lt; num)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;猜小了\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;猜对了,数字确实为:%d\n&quot;</span>, num);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">2000</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> player = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<span class="hljs-comment">//函数的参数需要为无符号整形(unsigned int),返回的时间戳为长整形</span><br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-built_in">menu</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;player);<br><span class="hljs-keyword">switch</span> (player) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">game</span>();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出游戏\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;很难理解说的是什么吗?\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <br><span class="hljs-keyword">while</span> (player);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出水仙花数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-type">int</span> a = i % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = i / <span class="hljs-number">10</span>%<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> c = i / <span class="hljs-number">100</span>;<br><span class="hljs-keyword">if</span> (a*a*a+b*b*b+c*c*c == i) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d是一个水仙花数\n&quot;</span>, i);<br>&#125;<br>i++;<br>&#125; <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出1-100内个位或十位或能被7整除的数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br><span class="hljs-type">int</span> a = i % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = i / <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">7</span> || b == <span class="hljs-number">7</span> || i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前为%d,敲!\n&quot;</span>, i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习</title>
    <link href="/2023/03/28/C%E8%AF%AD%E8%A8%80/"/>
    <url>/2023/03/28/C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>\n是换行  48(0)  65(A)  97(a)</p><hr><h1 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h1><p>C语言的代码编译成可执行程序一共四步<br>预处理:宏定义,头文件的展开,条件编译等,同时将代码中的注释删除,并不会检查语法<br>编译:检查语法,将预处理文件编译生成汇编文件<br>汇编:将汇编文件生成目标文件(二进制文件)<br>链接:C语言写的程序是需要依赖各种库的,所以编译之后还要将库链接到最终的可执行程序中去</p><p>gcc的编译过程:<br>预处理:gcc -E hello.c -o hello.i<br>编  译:gcc -S hello.i -o hello.s<br>汇  编:gcc -c hello.s -o  hello.o<br>链  接:gcc    hello.o -o hello<br>-o在此可以指定生成的文件类型</p><p><strong>C语言的第一行应该声明所调用的函数库</strong>,一般为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>一个简单地hello world程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  <span class="hljs-comment">//声明所调用的函数库</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;   <span class="hljs-comment">//函数主入口</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world!\n&quot;</span>);  <span class="hljs-comment">//打印hello world内容</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//返回值0,结束程序</span><br>&#125;<br></code></pre></td></tr></table></figure><p>整形:不包含小数部分的数据</p><h2 id="CPU与寄存器"><a href="#CPU与寄存器" class="headerlink" title="CPU与寄存器"></a>CPU与寄存器</h2><p>寄存器是CPU内部最基本的存储单元<br>CPU对外是通过总线(地址,控制,数据)来和外部设备交互的,总线的宽度是8位,那么此为一个8位CPU<br>如果总线是32位,则为32位CPU<br>有一种CPU的寄存器是32位,但总线仅64位,成为准32位CPU<br>所有64位可兼容32位指令,32位可以兼容16位,称其为向下兼容性</p><h3 id="寄存器-缓存-内存之间的关系"><a href="#寄存器-缓存-内存之间的关系" class="headerlink" title="寄存器,缓存,内存之间的关系"></a>寄存器,缓存,内存之间的关系</h3><p>离CPU最近的是寄存器,然后是缓存,最后内存<br>CPU计算时,先预先将要使用的数据读到内存,然后再把即将使用的数据读到寄存器.数据交换关系是CPU&lt;-&gt;寄存器&lt;-&gt;内存<br>    如果经常操作内存中同一地址的数据,会影响速度,所以在寄存器与内存之间设置一个缓存(缓存可以高速读取)</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>C语言中有很多种数据格式<br>char字符,数字整形<br>short短整形<br>int整形<br>long 长整形<br>long long比长整形更长<br>float单精度浮点数<br>double双精度浮点数<br>储存形式格式:<br>bit(比特):一个二进制代表一位,数据传输总是以bit(位)为单位<br>Byte(字节):一个字节为8个二进制位,成为八位,是计算机中最小的存储单位<br>Word(双字节):两个字节,16比特位<br>DWord(两个word):4个字节,32位<br>K M G T四个单位的转换为1024</p><p>八进制以0开头,十六进制以0x开头,二进制不能在C语言中表达出来.C语言中常用八,十,十六进制<br>八进制由0-7组成,十六进制为0-9与A-F</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;A&#x27;</span>;  <span class="hljs-comment">//向内存申请储存字符A,定义一个字符类变量并为其赋值为A</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch); <span class="hljs-comment">//声明打印字符类数据,输出ch</span><br></code></pre></td></tr></table></figure><p>单精度浮点数在机内占4个字节,双精度浮点数在机内占8个字节,有效数字位数不用于单精度浮点数.单精度有效数字位8位,双精度16位,单精度使用内存空间更少.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">float</span> f = <span class="hljs-number">5.2</span>; <span class="hljs-comment">//打印一个浮点数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,f);<br></code></pre></td></tr></table></figure><p>附加:<br>在不同为层级的程序块代码中不能未声明就使用变量,例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">main()&#123;<br>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时便会报错,但是可以在主函数之外声明,从而使得局部变量变为全局变量.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> ch =<span class="hljs-string">&#x27;A&#x27;</span>;<br>main()&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小数的存储格式"><a href="#小数的存储格式" class="headerlink" title="小数的存储格式"></a>小数的存储格式</h3><p>若使用非浮点值类型存储小数,则会向下取整一个整数<br>小数在进行乘法运算时乘的只有小数部分<br>0.432只有三位,所以只进行3位取整<br>0.432的二进制数为0.011</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>1、C语言中的标识符只能由字母，数字，下划线组成而且第一个字符必须是字母或下划线。 如：int 34A是非法的，而int a_s是合法的 .<br>2、C语言中区分大小写 如：int A;和int a; 代表不同的变量.<br>3.不能与关键字重名</p><h2 id="查看不同数据类型可申请的内存范围"><a href="#查看不同数据类型可申请的内存范围" class="headerlink" title="查看不同数据类型可申请的内存范围"></a>查看不同数据类型可申请的内存范围</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">short</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br><span class="hljs-type">short</span> age = <span class="hljs-number">20</span>;  <span class="hljs-comment">//向内存申请两个字节存放短整形20</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//以上结果依次占用1,2,4,4,8,4,8个字节,每个字节8个比特位</span><br></code></pre></td></tr></table></figure><p>不同的数据应当按需使用空间,最大化效率<br>可使用的内存地址范围为2^比特位-1 long的内存范围在32位和64位系统下的表现不同(4&#x2F;8)<br>float后表示的常量要加f,用以表示这是一个单精度浮点数,在编译器转换后不会丢失精度(不加会被认作双精度浮点数)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">float</span> w = <span class="hljs-string">&#x27;7.0f&#x27;</span> ;<span class="hljs-comment">//将单精度浮点类型的变量w进行定义,并初始化为单精度浮点数7.0</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,w); <span class="hljs-comment">//以单精度浮点类型(%f)打印字符w</span><br></code></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量有</p><ol>    <li>字面常量,例如d,5,3.14等</li>    <li>const修饰的常变量,加上const变量后无法被写入,例如const int num = 10;</li>    <li>#difine定义的标识符常量</li>    <li>枚举常量,可以一一列举的常量,这些数据有排比的规律,起始值默认为0</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>C语言中没有字符串,使用字符数组来表示字符串数据<br>用双引号括起来的一串字符<br>字符串一定是char类型数组,char类型数组不一定是字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//字符数组,一组相同类型的元素</span><br><span class="hljs-type">char</span> arr[] = <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">//此处隐藏了\0</span><br><span class="hljs-comment">//或者&#123;&#x27;hello&#x27;&#125;;</span><br><span class="hljs-comment">//&#123;&#x27;hello&#x27;,&#x27;world&#x27;&#125;;此为一个二维数组</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>\0是字符串的结束标识,每串字符后都有隐藏,不指定长度则没有&#x2F;0结束符,有多少个元素就有多长<br>指定长度后没有赋值的元素自动补充&#x2F;0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> arr2[] = &#123;<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>&#125;;<br><span class="hljs-comment">//若不加双引号,则输出为ASCII码值,0为结束符/0</span><br></code></pre></td></tr></table></figure><p>使用strlen求取<strong>字符串</strong>长度,求取的长度为&#x2F;0之前的有效字符串<br>sizeof是数组长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> <span class="hljs-comment">//strlen在此函数库中</span></span><br><span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);<br></code></pre></td></tr></table></figure><p>如果此时使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(arr2));<br></code></pre></td></tr></table></figure><p>则会得到一个随机值,数组arr2中并未拥有\0,则长度会不断增长,直到在地址中遇到下一个\0</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>假设需要在屏幕上打印一个目录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c:\test\test.c&quot;</span>);<br></code></pre></td></tr></table></figure><p>输出的结果仅有c: est est.c<br>\与第一个t结合成了新的转义字符<br>print在打印数据的时候可以指定打印的格式<br>%c只能输入一个字符,用””框住.%s可输入一串不超过20字符的字符串<br>可以使用\来表示一根反斜杠,防止被转义符转义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c:\\test\\test.c&quot;</span>);<br></code></pre></td></tr></table></figure><p>\a可以触发电脑的蜂鸣器一次<br>\r回车<br>\ddd表示1-3个八进制数字,d为数字. \130会被表示为X,100的权重为8的二次方,30为8的一次方,所以130会被视作1,3,0<br>1x8^2+3x8^1+0x8^0&#x3D;88,在ASCII码中88表示为X,所以可以使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,<span class="hljs-string">&#x27;\130&#x27;</span>); <span class="hljs-comment">//换成%d可输出88,%c仅可输出单个字符x</span><br></code></pre></td></tr></table></figure><p>在ASCII码中,A为第65位,使用%c输出\101,则会得到A<br>\xdd表示两个16进制数字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,<span class="hljs-string">&#x27;\x30&#x27;</span>);<br></code></pre></td></tr></table></figure><p>输出字符0,3x16^1+0x16^0&#x3D;48,在ASCII码中表示0<br>此时若使用strlen求取c:\test\328\test.c可得到长度14，\t被识别为转义字符，仅占用一个长度单位，\32也被识别为一个转义字符</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">c语言风格注释为 <span class="hljs-comment">//文字文字文字//</span><br>c++c语言风格注释为<span class="hljs-comment">//文字文字</span><br></code></pre></td></tr></table></figure><p>C语言风格缺陷为不能嵌套使用</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>scanf(“%d”,&amp;a);表示接收的值为字符类型,为变量a赋值.接受的类型可以被更改.<br>使用scanf获取用户输入的值,当输出一个未被赋值的变量时,输出的结果为-858993460.在下一个输入的字符无法被取用时会直接停止赋值操作,剩下的字符将会留存至后续获取.例如获取两个数字,输入1,2.此时仅可获取1 第二个数字无法获取,第二个变量未赋值.在获取到逗号时结束本次获取.<br>scanf遇到空格和回车时都会直接结束本次获取<br>当对预留空间进行赋值时,键入的数据量需要为预留空间-1,因为末尾会出现&#x2F;0<br>例如char ch[10];<br>此时使用scanf对其赋值helloworld时会报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;练习C(y/s)?:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input);<br><span class="hljs-keyword">if</span> (input == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Let&#x27;s do it&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (input == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lazzy boy&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;huh?&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者使用putchar与getchar<br>依次获取键盘输入的字符,每次仅存入一个字符.可获得屏幕上无法直接显示的特殊字符,例如回车与特殊控制字符.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span> = a,b;<br>a = getchar();<br>b = getchar();<br><span class="hljs-built_in">putchar</span>(a);<br><span class="hljs-built_in">putchar</span>(b);<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者使用gets接收字符串,但gets和scanf都不安全,都以回车作为结束标识,容易造成缓存区溢出.gets接收字符串时可以带空格.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> ch[<span class="hljs-number">11</span>];<br>gets(ch);<br><span class="hljs-comment">//若想使用scanf接收带空格的字符串,可以使用正则表达式%[^\n]表示接收非换行的所有字符</span><br></code></pre></td></tr></table></figure><h3 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h3><p>fgets把用户输入的回车以作为字符串的一部分.通过scanf和gets接收字符串时,不包含作为结尾的\n,但是fgets可以包含,不存在缓冲区溢出的问题.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> ch[<span class="hljs-number">10</span>];<br>fgets(ch,<span class="hljs-keyword">sizeof</span>(ch),<span class="hljs-built_in">stdin</span>);<span class="hljs-comment">//第一数据位为指针类型,指向一个缓冲区.第二位为输入数据的最大长度,stdin为系统提供的指针</span><br><span class="hljs-comment">//此时若输入helloworld,则输出为helloworl,此时数据不换行,因为9+1结束符,没有位置留给换行符</span><br></code></pre></td></tr></table></figure><h3 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h3><p>自带换行的字符串输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//此时占用输出为一个字节(\0)</span><br><span class="hljs-comment">//fputs = printf</span><br></code></pre></td></tr></table></figure><h1 id="内存与指针"><a href="#内存与指针" class="headerlink" title="内存与指针"></a>内存与指针</h1><p>强推：<a href="https://blog.csdn.net/qq_45194707/article/details/125186247">点此查看csdn博客</a></p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>内存是沟通CPU和硬盘的桥梁,暂存CPU的运算数据与硬盘等外部存储器交换的数据<br>内部存贮器,暂存程序&#x2F;数据–掉电丢失,目前常见的型号有SRAN,DRAM,DDR2,DDR3,DDR4<br>内存目前一般为4G-8G，计算机中内存划分为多个小单元格，一个单元格为一个内存单元。每个储存单元都有自己的编号，计算的32位系统上拥有32根地址线，产生1&#x2F;0的电信号，由此转换为数字信号，变为二进制序列。共可产生2^32个序列，当二进制的序列成为一个信号的编号时，我们便称其为该二进制的地址。<br>2^32次方&#x3D;42 9496 7296 此为可获取的bit<br>2^32&#x2F;8&#x3D;5 3687 0912 此为可获取的byte<br>536870912&#x2F;1024&#x3D;52 4288 此为可获取的KB<br>524288&#x2F;1024&#x3D;512 此为可获取的MB<br>32位系统最大可支持4gb的内存，4GB&#x2F;512MB&#x3D;8，所以有时你可以发现32位机的主板上插着两根分别装载4芯片的内存条<br>32位操作系统针对的32位的CPU设计，CPU的位是指一次性可处理的数据量是多少，1字节&#x3D;8位，32位处理器可以一次性处理4个字节的数据量，依次类推，应用程序只能使用2GB内存，数据中心版的32位操作系统最高支持64GB内存。<br>64位系统理论上支持16TB的内存使用。</p><h3 id="储存器"><a href="#储存器" class="headerlink" title="储存器"></a>储存器</h3><p>计算机的组成中,储存器用来储存程序和数据,辅助CPU进行运算.内存中的数据一般为无符号类型(unsigned).当可供使用的内存超出计算机所分配的地址时,超出部分则无效</p><h4 id="物理存储器和存储地址空间"><a href="#物理存储器和存储地址空间" class="headerlink" title="物理存储器和存储地址空间"></a>物理存储器和存储地址空间</h4><p>物理存储器:实际存在的具体存储器芯片<br>1.主板上插的内存条<br>2.显卡上的显示RAM芯片<br>3.各种适配卡上的RAM和ROM芯片</p><p>存储地址空间:对存储器编码的范围.常说的内存是指这一层含义<br>编码:对每个物理存储单元(字节)分配一个号码<br>寻址:可以根据分配的号码找到相应的存储单元,完成数据的读写<br>除了常见的数据类型外,数组和函数</p><h4 id="内存地址"><a href="#内存地址" class="headerlink" title="内存地址"></a>内存地址</h4><p>将内存抽象成一个很大的一维字符数组<br>编码就是对内存的每一个字节分配一个32&#x2F;64位的编号,这个内存编号为内存地址</p><h3 id="外存"><a href="#外存" class="headerlink" title="外存"></a>外存</h3><p>外部存储器,长时间保存程序&#x2F;数据–掉电不丢,常见有ROM,ERRROM,FLASH(NAND,NOR),硬盘,光盘</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>所以编号就是内存单元的地址，即指针就是地址。<br>指针的大小并不取决于类型，而取决于系统位数</p><p>一个数字使用16进制，占用两个字节来表示。标准为4列一行。比如用以表示数字10，在内存地址中则表示为0a 00 00 00.指针此时仅需要第一个字节0的地址，便可连带获取后续a 00 00 00的内存数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">16909060</span>;  <span class="hljs-comment">//申请变量a在内存中分配4个字节的空间</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,&amp;a);  <span class="hljs-comment">//此处使用%p打印地址格式的数据，&amp;a代表取地址a</span><br><span class="hljs-type">int</span>* pa = &amp;a;  <span class="hljs-comment">//pa专门用于存放地址，在C语言中pa叫做指针变量</span><br><span class="hljs-comment">//*说明pa为指针变量而非普通变量，int说明pa执行的对象时int类型</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">*pa = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>那么该变量数据变为0，内存上的数据也会变为00 00 00 00,实际为通过修改地址中储存的值间接修改变量的值<br>如果赋予错误的变量类型，比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> *pb = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>然后执行上述赋0的操作（pb&#x3D;0），则会发现在内存中该指针所指地址仅有首位变为00，后三位不动，输出结果变为16909056,在地址上的数据为00 03 02 01,获取进制转换时为01 02 03 00</p><p>指针的值是地址，但指针所指的地址是自身所绑定变量的地址。<br>例如向内存申请存放变量a并赋值1（int a &#x3D; 1;），然后将变量a与指针b进行绑定(int* b &#x3D; &amp;a;),此时便可使用%p与&amp;a来输出变量a在内存中的地址。<br>若要初始化一个指针，就必须令该指针绑定一个地址。要给地址，对于一个非指针的变量，需要先取得这个变量的地址，才能绑定给指针。对于一个指针变量，可以直接进行指针&#x3D;0的赋值操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* pa = &amp;a;<br>*pa = <span class="hljs-number">20</span>;  <span class="hljs-comment">////此处为解引用操作，通过pa里的地址找到a，然后再对变量a赋值0</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从另外一个角度来理解，指针类型决定了指针进行算数运算时，指针跳跃的步长，如int型指针加一，执针指向第四个字节后的位置，而char型指针加一，只跳跃一个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0x01020304</span>;<br><span class="hljs-type">char</span>* pa = &amp;a;<br>*pa = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可通过上述代码查看内存地址中数据的变化，执行pa &#x3D; 0后，该指针下的地址数据为00030201,若试图以int形式取出储存的值，则不会为0</p><p>你可以用指针指向指针，但是没有必要，而且你需要先绑定变量，再指向，你不能指向一个空指针来获取地址。</p><p>指针的大小都是相同的，指针用于存放地址，地址有多大，指针取多大</p><h3 id="野指针与空指针"><a href="#野指针与空指针" class="headerlink" title="野指针与空指针"></a>野指针与空指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*&amp;是升维取址符号</span><br><span class="hljs-comment">*是降维取址符号*/</span><br><span class="hljs-type">int</span> p =&amp;a; <span class="hljs-comment">//将a的地址值存入整形类变量p</span><br>*(<span class="hljs-type">int</span>*)p = <span class="hljs-number">100</span>; <span class="hljs-comment">//将变量p强制转换为指针类型</span><br><span class="hljs-comment">//简化为 int* p = &amp;a;*p = 100;</span><br></code></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>结构体使得C语言有能力描述复杂类型,可以创建新的类型<br>比如描述学生，学生包含：姓名，年龄，性别，学号这几项信息<br>这里只能用结构体来表达</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> //创建学生类型</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];  <span class="hljs-comment">//名字是字符，这里预使用20个字符</span><br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-string">&quot;我&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90.5</span>&#125;; <span class="hljs-comment">//结构体的创建与初始化</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %lf\n&quot;</span>,s.name,s.age,s.score);  <span class="hljs-comment">//打印结构变量中的name/age/score</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下列为结构地址指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">ps</span> =</span> &amp;s;<br></code></pre></td></tr></table></figure><p>打印时即可直接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %lf\n&quot;</span>,(*ps).name,(*ps).age,(*ps).score);  <span class="hljs-comment">//打印结构变量指针中的name/age/score</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %lf\n&quot;</span>ps-&gt;,name,ps-&gt;age,ps-&gt;score);  <span class="hljs-comment">//意思同上</span><br></code></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>循环的跳转语句有:break,continue,goto<br>break可以跳出循环,仅能跳出所在的循环<br>continue是结束本轮循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>L;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;long&quot;</span>);<br><span class="hljs-keyword">goto</span> L;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;time ago.&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="if循环"><a href="#if循环" class="headerlink" title="if循环"></a>if循环</h2><p>C语言用0与非0表示真假，if语句可以<br>if和else后不用加;，这两个关键词并不能成为单独的语句<br>goto为无条件跳转,跳转前需要加入一个标识(少用,逻辑性弱,易出bug)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> <br>语句<span class="hljs-number">1</span>；<br><span class="hljs-keyword">else</span>  <span class="hljs-comment">//此处可以变成else if，再加一次分支</span><br>语句<span class="hljs-number">2</span>；<br></code></pre></td></tr></table></figure><p>也可以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span> &amp;&amp; age &lt;<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>这样就是一句限定范围在18-20之间的数字，包括18<br>如果想要判定变量&#x3D;某数字，需要使用&#x3D;&#x3D;，单&#x3D;是赋值。if只和最近的else联用，当if下面再跟if，但else跟着下面的if时，上面的if判假则直接跳过下一个if。</p><p>当语句执行到return时，就会直接结束程序。<br>为了防止相等打成赋值，所以可以打成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (<span class="hljs-number">5</span> == num)<br></code></pre></td></tr></table></figure><p>奇偶判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> num = <span class="hljs-number">15</span>;<br><span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) <span class="hljs-comment">//此处为num除二后余1</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;奇数\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h3 id="Switch分支语句"><a href="#Switch分支语句" class="headerlink" title="Switch分支语句"></a>Switch分支语句</h3><p>一种分支语句,适用于多分支的情况<br>一直使用if else if的形式过于复杂,所以采用Switch语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> day = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, day);<br><span class="hljs-keyword">switch</span> (day)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期一&quot;</span>);<br><span class="hljs-keyword">break</span>;  <span class="hljs-comment">//跳出循环</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期二&quot;</span>);<br><span class="hljs-keyword">break</span>;  <span class="hljs-comment">//跳出循环</span><br><span class="hljs-comment">//以此类推了</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>case后面要求整形表达式，必须包含常量形，所以不能放一个变量n或者浮点数在case后面，字符也不行。<br>最后一个case后不一定要加break跳出，但是加上后更符合语法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">5.</span>.<span class="hljs-number">.6</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What you want to doing?&quot;</span>);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>上述也是可以的，case可以接case，也可以接Switch继续嵌套<br>如果没有使用范围内的值进行判断，可以使用default来进行默认值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入不符合规范!&quot;</span>);<br></code></pre></td></tr></table></figure><p>default后仍可加break</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> m = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">switch</span> (n)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:m++;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:n++;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">switch</span> (n)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>n++;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>m++; n++;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>m++;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入类型错误&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;m = %d,n = %d\n&quot;</span>, m, n);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述结果输出为m&#x3D;5,n&#x3D;3.case只是告诉从哪里进入语句，但不加break便不会主动跳出语句，这就导致case1&#x2F;2&#x2F;3&#x2F;4都被触发。break仅仅跳出代码块内部循环。</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> day = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(day&lt;<span class="hljs-number">31</span>) <span class="hljs-comment">//循环开始</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;One day passed away.&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;today is %d.\n&quot;</span>,day);<br>day++; <span class="hljs-comment">//day值+1</span><br>&#125;<br><span class="hljs-keyword">if</span>(day == <span class="hljs-number">31</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Aleady for a month.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//结束程序,返回结果0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>整数自身+1可以简写为a+&#x3D;1,等价于a&#x3D;a+1<br>C中可简写为a++或者++a,先用或先加,也存在a–与–a.</p><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h2><p>do while语句先进行语句执行再进行判定,所以即使循环满足条件,也会进行一次循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">do</span><br>&#123;<br>循环语句;<br>&#125;<br><span class="hljs-keyword">while</span>(); <span class="hljs-comment">//转回do所在行</span><br></code></pre></td></tr></table></figure><p>将break,continue插入时,都会提前结束循环,但continue根据插入的位置不同对该循环有不同的影响.</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span>(表达式<span class="hljs-number">1</span>;表达式<span class="hljs-number">2</span>;表达式<span class="hljs-number">3</span>)<br>循环语句:<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;<span class="hljs-type">int</span> &lt;= <span class="hljs-number">10</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>if,break,countinue可出现在for循环中,同样具有效果<br>不可在for循环内赋值,一旦出错可能造成循环失控</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>上述结果输出10个0,加入scanf后输出用户输入的10个数字,如果for后的括号仅有;;而没有判断部分,name会在代码块内进行无限循环.for中可嵌入for</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>; k = <span class="hljs-number">0</span>; i++, k++)<br>&#123;<br>k++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述不产生循环,for第一次执行便满足变量,直接结束循环到达return 0,i与k的值不产生变化.</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>求取一个数的阶乘:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入一个数求取阶乘:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;sum);<br><span class="hljs-type">int</span> n = sum;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br>sum* = i;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>求取十个数的阶乘相加,首先需要创建数组,长度为10,不创建也可以,但要保证摧毁原有的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">加常量 a = a+<span class="hljs-number">3</span>; a+ = <span class="hljs-number">3</span>;<br>乘常量 a* = <span class="hljs-number">3</span>;<br>除常量 a/ = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>在十个元素内找到想要的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br><span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]); <span class="hljs-comment">//将数组arr的长度除单个数组0的,得到arr数组元素数量</span><br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> right = sz - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt;= right)<br>&#123;<br><span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (arr[mid] &lt; k)<br>&#123;<br>left = mid + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &gt; k)<br>&#123;<br>right = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;find it:%d\n&quot;</span>, mid);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (left &gt; right)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找不到\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下标从0开始,所以1-10对应的数组下标为0-9,上述为查找数组下标</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;welcome to the Internet&quot;</span>;<br><span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;#######################&quot;</span>;<br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> right = <span class="hljs-built_in">strlen</span>(arr1<span class="hljs-number">-1</span>); <span class="hljs-comment">//取arr1长度-1(数组下标从0开始).字符串后有\0,非字符串无.\0仅占用内存不计算长度</span><br><span class="hljs-keyword">while</span> (left &lt;= right)<br>&#123;<br>arr2[left] = arr1[left];<br>arr2[right] = arr1[right];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr2);<br>Sleep(<span class="hljs-number">200</span>); <span class="hljs-comment">//延时200毫秒</span><br>system(<span class="hljs-string">&quot;cls&quot;</span>); <span class="hljs-comment">//执行清屏</span><br>left++;<br>right--;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;welcome to the Internet&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述实为不断以arr2下标数值替换为arr1下标的数值.数组2下标0(#)被替换为数组1下标0(w),以此类推,左右同时进行.</p><p>将数组元素从小到大排序并输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(arr)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>);i++)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> f = i+<span class="hljs-number">1</span>; f&lt;<span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>); f++) &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (arr[i] &gt; arr[f]) &#123;<br>a = arr[f];<br>arr[f] = arr[i];<br>arr[i] = a;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) ; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数在数学中一般表示为f(x)&#x3D;x^2+1之类<br>此处为C语言中的相加程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> num1,num2; <span class="hljs-comment">//仅仅定义两个变量为int类型,未赋值</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2); <br><span class="hljs-type">int</span> sum = num1 + num2;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum = %d\n&quot;</span>,sum);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时将其中的int sum &#x3D; num1+num2;改为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> sum = Add(num1,num2);<br></code></pre></td></tr></table></figure><p>同时在主函数main之外声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br><span class="hljs-type">int</span> z = <span class="hljs-number">0</span>;<br>z = x + y;<br><span class="hljs-keyword">return</span> z;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处即为令函数(变量)Add承担运算,函数Add需要从主函数外部调用运算后将结果范围.函数的特点为简化代码与代码复用.<br>**exit(返回值)**也是一种结束,几乎等同于return,但是exit会直接结束程序的运行,而不是函数</p><h3 id="引入其他文件中的函数"><a href="#引入其他文件中的函数" class="headerlink" title="引入其他文件中的函数"></a>引入其他文件中的函数</h3><p>在同一工程中,可以使用extern int向全局声明一个变量,此时便可以在其他工程文件中未经声明便引用.<br>C语言调试可使用Fn+F11从光标所选处进行单步调试,以此查看bug出现位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//在主文件中需要有</span><br><span class="hljs-keyword">extern</span> 返回值类型 函数名(参数)&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="防止头文件重复包含"><a href="#防止头文件重复包含" class="headerlink" title="防止头文件重复包含"></a>防止头文件重复包含</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once <span class="hljs-comment">//第一种</span></span><br></code></pre></td></tr></table></figure><p>当需要引入其他全局函数时,除了extern声明外,也可以使用#include “你的文件名.h”来进行引入.不能在文件a中包含b,b中包含a,重复包含最多执行1024次,然后报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __文件名_H__</span><br><span class="hljs-comment">//表示if not define,才进行头文件的引入</span><br></code></pre></td></tr></table></figure><h3 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h3><p>试用rand生成随机数,如果rand的seed(种子不变),则每次生成随机数时的起始值不变,后续生成的随机数也相同.一般使用时间戳作为rand函数的seed,时间不断在变化,所以起始值也在不断变化<br>原型为srand(),将函数time()的值强行转换为unsigned类型,通过NULL来清空历史值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">/*time_t timer = time(NULL);</span><br><span class="hljs-comment">srand((size_t)timer);简化为下一行*/</span> <br>srand ((<span class="hljs-type">size_t</span>)time(<span class="hljs-literal">NULL</span>)); <span class="hljs-comment">//set(设置)rand的随机数为time</span><br><span class="hljs-comment">//又作srand((unsigned)time(NULL))</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d\n&quot;</span>,rand());<span class="hljs-comment">//默认取值为0~32767</span><br><span class="hljs-comment">//范围如果限定为1-32,则需定为rand()%32+1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种<strong>相同类型</strong>的集合<br>如果仅使用变量创建数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">2</span>; <span class="hljs-comment">//以此类推</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>则太过复杂.可以使用函数arr来创建数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>int arr[10]代表向内存申请存放10个数据,类型为int.使用下表来访问数组,初始下标为0(此处下标为0处的数据为1).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">10</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,&quot;</span>,arr[i]);<br>i++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述为创建数组后输出数组中的数据,当元素的数量小于数组申请的元素位时.未定义的元素为默认为0,此时输出便是1,2,3,4,5,6,0,0,0,0</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> arr[行][列] = &#123;<br>&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;,<br>&#123;元素<span class="hljs-number">3</span>,元素<span class="hljs-number">4</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在多维数组中,需定义数组有几行几列,然后为其赋值<br>行之间仅逗号隔开,每行存入一个{}中<br>列与列之间用逗号隔开<br>当从多维数组中调用元素时,需指定行列,例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,arr[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h2><p>有:+ - * &#x2F; %</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">float</span> a = <span class="hljs-number">9</span> / <span class="hljs-number">2</span>;<br><span class="hljs-type">float</span> b = <span class="hljs-number">9</span> / <span class="hljs-number">2.0</span>;<br></code></pre></td></tr></table></figure><p>上述结果不一致,9&#x2F;2为整数类除以整数类,得到的结果丢失精度仅得4. 9&#x2F;2.0为整数类除以浮点类,此时整数类被强制升为浮点类,所以输出的结果为浮点类数值4.5</p><h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h2><p>有:&gt;&gt; &lt;&lt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> b = a &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为4,移位符号移动二进制位.2的二进制为0010,左移变为0100,得到4</p><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><p>有:&amp; ^ |</p><h2 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">= += -= *= /= ^= |= &gt; &gt;= &lt; &lt;=<br></code></pre></td></tr></table></figure><p>&amp;取地址</p><h2 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h2><p>sizeof 操作数的类型长度(单位为字节)<br>~对一个数的二进制按位取反(二进制位0与1互换)<br>(int)强制转换类型为int</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;  <span class="hljs-comment">//在C语言中，0表示假，非零为真</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, !a);<br><span class="hljs-keyword">if</span> (a)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a为真&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!a)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a为假&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>));  <span class="hljs-comment">//计算int类型数据长度</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span> a);  <span class="hljs-comment">//此处所得和上句相同，变量可括可不括，此处为计算变量a的数据长度，变量a属于int类型</span><br></code></pre></td></tr></table></figure><p>和Java不同,C语言中求取数组长度不能用.length函数,需要使用sizeof求取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> arr = [<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sz);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,~a);<br></code></pre></td></tr></table></figure><p>此处0为整形，具有四个字节，32个比特位，所以转化后32个0变成32个1<br>整数在内存中储存的是补码，整数二进制表示有三种：<br>源码，补码与反码<br>-1：<br>1000 0000 0000 0000 0000 0000 0000 0001(原码)第一位为1表示负数<br>1111 1111 1111 1111 1111 1111 1111 1110(反码)+1变为补码<br>1111 1111 1111 1111 1111 1111 1111 1111(补码)此种存入内存<br>正整数原码 补码 反码都相同<br>想要取得内存中的值，需要转换成原码，取出时为补码<br>两个用补码表示的数相加时,如果最高位(符号位)有进位,则进位被舍弃</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = (<span class="hljs-type">int</span>)<span class="hljs-number">3.14</span>;  <span class="hljs-comment">//3.14默认double，用此强制转换int</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><p>&#x3D;<br>&lt;<br>&lt;&#x3D;<br>!&#x3D; 用于测试“不相等”<br>&#x3D;&#x3D; 用于测试“相等”</p><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><p>&amp;&amp; 逻辑与（并且）<br>|| 逻辑或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> c = a &amp;&amp; b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,c);<br></code></pre></td></tr></table></figure><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h2><p>exp：expression表达式<br>exp1 ? exp2 : exp3<br>若表达式exp1成立，exp2计算，整个表达式的结果会变成exp2的结果<br>若exp不成立，exp3计算，表达式结果为exp3的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (a &gt; b) <br>max = a;<br><span class="hljs-keyword">else</span> <br>max = b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,max);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述等价于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br>max = a &gt; b ? a : b;  <span class="hljs-comment">//a是否&gt;b，是则a不是则b</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,max);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h2><p>用逗号隔开的一串表达式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>+<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);  <span class="hljs-comment">//经常出现在列举数组中</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> d = (a = b + <span class="hljs-number">2</span>,c = a - <span class="hljs-number">4</span>,b = <span class="hljs-number">5</span> + <span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><h2 id="下标引用-函数调用和结构单元"><a href="#下标引用-函数调用和结构单元" class="headerlink" title="下标引用,函数调用和结构单元"></a>下标引用,函数调用和结构单元</h2><p>[] () . -&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"> <span class="hljs-comment">//0,1,2,3,4,5,6,7,8,9</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,arr[<span class="hljs-number">5</span>]); <span class="hljs-comment">//此处输出数组下标为5的元素：6</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="常见关键字"><a href="#常见关键字" class="headerlink" title="常见关键字"></a>常见关键字</h2><p>1.C语言为你提供的，不能自己去创建,例如int，printf<br>2.关键字不能做变量名<br>auto 自动，每个局部变量都是auto修饰的，自动在代码块开始时创建，在代码块结束时销毁，在新C语言中有其他用法，平常被省略<br>break 打破循环<br>case 分支<br>char 字符类型<br>const 常变量，使变量不可修改<br>continue 继续<br>default 默认<br>do 一般连用while<br>else 一般与if连用<br>enum 枚举<br>extern 用于声明外部符号<br>float 单精度<br>for 用于循环<br>goto 语句<br>if 判断语句<br>int 整形<br>long 长整形<br>register 试图向编译器申请变量值在寄存器中(并不保证存储)，目前编译器可以自动识别部分数据是否需要存储入寄存器<br>return 返回<br>short 短整形<br>signed 有符号的<br>unsigned 无符号的<br>sizeof 数据长度<br>static 静态的<br>struct 结构器<br>Switch 语句一种<br>union 联合体(共用体)<br>void 空<br>volatile C语言中暂时不讲<br>while 循环</p><p>define与include属于预处理指令，并非关键字</p><h2 id="重点关键字"><a href="#重点关键字" class="headerlink" title="重点关键字"></a>重点关键字</h2><p>typedef 类型重定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u_int;<br></code></pre></td></tr></table></figure><p>上述语句可以将unsigned int重命名为u_int</p><p>static 静态的<br>1.修饰局部变量<br>2.修饰全局变量<br>3.修饰函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>a++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">10</span>)<br>&#123;<br>test();  <span class="hljs-comment">//此处会将下一步重定向到void tese处</span><br>i++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述输出2 2 2 2 2 2 2 2 2 2 2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;  <span class="hljs-comment">//此处重新入循环时，变量a不会被摧毁，可以保留</span><br>a++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">10</span>)<br>&#123;<br>test();  <span class="hljs-comment">//此处会将下一步重定向到void tese处</span><br>i++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为a被保留，所以a的值会不断+1，输出结果变为2 3 4 5 6 7 8 9 10 11。static改变了局部变量的生命周期(实为储存类型被改变)<br>储存区域分为栈区 堆区与静态区，当a未被修饰时，a处于栈区，当被修饰后，处于静态区。每当int a &#x3D; 1被执行时，摧毁原有的变量a，再创建一个新的变量a &#x3D; 1，被放入静态区后便不会被摧毁。</p><p>extern 声明外部符号<br>当全局变量处于同一个项目中，便可通过该关键字进行声明调用<br>例如int a &#x3D; 1;<br>当想在同项目的其他源文件中调用时，需先用extern int a;以声明从外部调用该变量。全局变量在整个工程中都可以被调用，局部变量在代码块结束时便会被摧毁。<br>若将全局变量a用static进行修饰，放入静态储存区，也无法被调用，仅可在自己所在的源文件中进行调用。全局变量自身具有外部链接属性，被static修饰后被更改成内部连接属性<br>Add(a,b);也可将变量a，b相加</p><h1 id="简易计算程序"><a href="#简易计算程序" class="headerlink" title="简易计算程序"></a>简易计算程序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> num1 = <span class="hljs-number">0</span>;<span class="hljs-comment">//在内存中申请整形类 字符 变量num1</span><br><span class="hljs-type">int</span> num2 = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2); <span class="hljs-comment">//将用户输入的数据转化为十进制,并储存到变量num1和num2中</span><br><span class="hljs-type">int</span> sum = num1 + num2;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum = %d\n&quot;</span>,sum);  <span class="hljs-comment">//以十进制输出字符类变量sum</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>若出现scanf返回值被忽略,改为scanf_s或添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SUCURE_NO_WARINGS 1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
