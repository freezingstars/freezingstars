<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux学习</title>
    <link href="/2023/05/07/Linux/"/>
    <url>/2023/05/07/Linux/</url>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><style>    strong{        color: red;    }    #div1 {        display: inline-block;    }    #div1 p{        border-style: solid;border-color: black;background-color: darkorange;text-align: center;color: white;font-size: 8px;    }    a strong{        text-decoration: none;color: white;    }    rt{        color: white;    }    th{        background-color: rgb(46, 118, 182);        color: white;    }    td{        background-color: rgb(233, 238, 248);    }</style><h1 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h1><h2 id="云计算基础"><a href="#云计算基础" class="headerlink" title="云计算基础"></a>云计算基础</h2><h3 id="何为服务器"><a href="#何为服务器" class="headerlink" title="何为服务器"></a>何为服务器</h3><p>服务器的主要作用还是<strong>为其他计算器提供服务的配置更高的电脑</strong><br>其他计算机可以用作服务器，但是因为系统和硬件限制并不能完全发挥作为服务器的效用，服务器有自己专门的系统</p><p>服务器的物理堆叠类型有<br><strong>机架，塔式，刀片式，机柜式</strong><br>机架式是标准的工业设计，方便规划空间，节约空间成本<br>塔式可以认作是机箱，向一个箱式服务器存放柜供电，机箱空间大，方便硬盘和电源的冗余扩展<br>刀片式服务器高密度，支持热插拔，随时可以添加新的组件提高性能。性能的利用性较低，适合用于组件集群<br>机柜式服务器通草在企业中见到，由机架式，刀片式再加上其他设备组合而成</p><p>典型的服务器模式：<br>C&#x2F;S，Client&#x2F;Server<br>由服务商给客户提供资源或某种功能<br>客户机使用资源或功能</p><h3 id="TCP-x2F-IP协议"><a href="#TCP-x2F-IP协议" class="headerlink" title="TCP&#x2F;IP协议"></a>TCP&#x2F;IP协议</h3><p>TCP&#x2F;IP是最广泛支持的通信协议的集合</p><ul><li>包括大量Internet应用中的标准协议</li><li>支持跨网络架构,跨操作系统平台的通信<br>主机与主机之间通信的三个要素</li></ul><ol><li>IP地址(IP address)</li><li>子网掩码(subnet mask)</li><li>IP路由(IP router)</li></ol><p>IP地址:唯一标识网络中的一个计算机,由<strong>32个2进制数组成,使用点分十进制</strong>的格式<br>配置IP地址一般使用手工&#x2F;DHCP自动获取</p><p>如果想知道网络是否相通,可以ping对方的ip地址</p><h4 id="IP地址的格式"><a href="#IP地址的格式" class="headerlink" title="IP地址的格式"></a>IP地址的格式</h4><p><strong>用于一般计算机网络:</strong></p><table>    <tr>        <td>A类:1-127</td>        <td>网+主+主+主</td>    </tr>    <tr>        <td>B类:128-191</td>        <td>网+网+主+主</td>    </tr>    <tr>        <td>A类:192-223</td>        <td>网+网+网+主</td>    </tr></table>组播与科研专用:<table>    <tr>        <td>D类:224-239</td>        <td>组播</td>    </tr>    <tr>        <td>E类:240-254</td>        <td>科研</td>    </tr></table><p>IP地址由<strong>网络位+主机位组成</strong>,一般称网络位为网段,主机位为该网段的某个主机</p><p>有时IP地址的表示为192.168.1.1&#x2F;24,这个”&#x2F;24”是掩码的内容,代表255.255.255.0→11111111.11111111.11111111.00000000→”24”</p><h4 id="网关地址"><a href="#网关地址" class="headerlink" title="网关地址"></a>网关地址</h4><p>一个网络到另一个网络的关口(不同网络通信时)<br>在浏览器中访问网站时一般是输入域名访问,但每个域名都对应了一个独特的IP地址+端口号,DNS服务器负责将域名解析为对应的ip地址(所以DNS被劫持时会跳转到广告页面)<br>一般而言并不用知道域名所对应的ip地址,除非你想ping特定的ip地址</p><h1 id="云计算基础-1"><a href="#云计算基础-1" class="headerlink" title="云计算基础"></a>云计算基础</h1><p>只是暂时将重点直接放在这里,前面的会补上的</p><h2 id="Openstack"><a href="#Openstack" class="headerlink" title="Openstack"></a>Openstack</h2><p>OpenStack是一个<strong>专门针对云计算的操作系统</strong>,内置了一套Iaas软件<br>IaaS:Infrastructure as a Service 基础设置及服务<br>云计算有三种服务模式,<strong>IaaS只是最基础的设施资源管理</strong>,共有:IaaS,PaaS,SaaS</p><p>基础设施资源主要包括:计算,存储,网络.通俗点就是CPU,硬盘,网卡<br>OpenStack对资源进行管理,并且以服务的形式提供给上层应用或者用户使用</p><p>OpenStack的资源管理具有”弹性”,用户使用资源时,云平台可以根据用户的需要,动态增加和删减资源,不用中断用户的使用,更无须全新申请,这就是”弹性”,通过众多<strong>组件</strong>来实现</p><p>全部概括一下大概就是:</p><ul><li>OpenStack和云计算密不可分；</li><li>OpenStack是一个云操作系统；</li><li>OpenStack控制三大资源：计算、网络、存储（池）；</li><li>OpenStack采取身份认证机制给予用户权限和资源；</li><li>OpenStack提供web端的可视化界面方便管理员控制；</li><li>OpenStack有其标准的基础架构及服务功能，但也有其他组件以提供其他服务，保证用户应用程序的高可用性。</li></ul><h3 id="OpenStack的架构"><a href="#OpenStack的架构" class="headerlink" title="OpenStack的架构"></a>OpenStack的架构</h3><p>令人痛苦的架构图<br><img src="/img/Linux/OpenStack系统架构逻辑关系图.png"><br><img src="/img/Linux/OpenStack系统架构逻辑关系图2.png"><br>OpenStack通过组件之间协同工作,所以看上去架构非常复杂<br>上面的看不懂?那让我门来看看官方的:<br><img src="/img/Linux/OpenStack系统架构逻辑关系图3.png"><br>其实也还有更容易理解的:<br><img src="/img/Linux/OpenStack系统架构逻辑关系图4.png"><br>图中的彩色方块,就是OpenStack最核心的组件</p><table><thead><tr><th style="text-align:center">组件</th><th style="text-align:center">项目</th><th style="text-align:center">项目说明</th></tr></thead><tbody><tr><td style="text-align:center">Compute（计算服务）</td><td style="text-align:center">Nova</td><td style="text-align:center">实施服务和关联的库，以提供对可计算资源（包括裸机，虚拟机和容器）的大规模可扩展的按需自助服务访问</td></tr><tr><td style="text-align:center">Identity Service(认证服务)</td><td style="text-align:center">Keystone</td><td style="text-align:center">提供API客户端身份验证，服务发现和分布式多租户授权</td></tr><tr><td style="text-align:center">Image Service（镜像服务）</td><td style="text-align:center">Glance</td><td style="text-align:center">发现，注册和检索虚拟机映像。Glance具有一个RESTful API，该API允许查询VM映像元数据以及检索实际映像。通过Glance提供的VM映像可以存储在从简单文件系统到对象存储系统（例如OpenStack Swift项目）的各种位置。</td></tr><tr><td style="text-align:center">Networking（网络服务）</td><td style="text-align:center">Neutron</td><td style="text-align:center">SDN网络项目，在虚拟计算环境中交付网络即服务</td></tr><tr><td style="text-align:center">Dashboard（仪表板）</td><td style="text-align:center">Horizon</td><td style="text-align:center">为OpenStack服务提供基于Web的用户界面</td></tr><tr><td style="text-align:center">Block Storage（块存储）</td><td style="text-align:center">Cinder</td><td style="text-align:center">虚拟化了块存储设备的管理，并为最终用户提供了自助服务API，以请求和使用这些资源，而无需了解其存储实际部署在何处或在哪种类型的设备上。</td></tr><tr><td style="text-align:center">Object Storage（对象存储）</td><td style="text-align:center">Swift</td><td style="text-align:center">高度可用的，分布式的，最终一致的对象存储。组织可以使用Swift来高效、安全和廉价地存储大量数据。</td></tr><tr><td style="text-align:center">Telemetry（计量服务）</td><td style="text-align:center">Ceilometer</td><td style="text-align:center">有效收集，规范化和转换OpenStack服务产生的数据</td></tr><tr><td style="text-align:center">Orchestration(编排服务)</td><td style="text-align:center">Heat</td><td style="text-align:center">基于文本文件形式的模板，为云应用程序协调基础结构资源，可以将其视为代码</td></tr><tr><td style="text-align:center">Database Service（数据库服务）</td><td style="text-align:center">Trove</td><td style="text-align:center">一个数据库即服务供应关系和非关系数据库引擎</td></tr><tr><td style="text-align:center">Data Processing（数据处理）</td><td style="text-align:center">Sahara</td><td style="text-align:center">为用户提供一种简单的方法来在OpenStack上预配数据处理框架（例如Hadoop，Spark和Storm）</td></tr></tbody></table><p>看完后再看看官方的最新版图<br><img src="/img/Linux/openstack-map-v20221001.jpg"><br>这就好理解起来了</p><h3 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h3><p>虚拟化是云计算的基础.虚拟化使得在一台物理的服务器上可以运行多台虚拟机,虚拟机共享物理机的CPU,内存,IO硬件资源,但在逻辑上是相互隔离的<br>物理机被称为宿主机(Host),宿主机上面的虚拟机称为客户机(Guest)<br>Host将硬件资源虚拟化并提供给Guest使用的主要方式是通过Hypervisor,根据这个程序的实现方式和所处位置,又分为两种虚拟化形式</p><h4 id="1型虚拟化"><a href="#1型虚拟化" class="headerlink" title="1型虚拟化"></a>1型虚拟化</h4><p>Hypervisor直接安装在物理机上,多个虚拟机在Hypervisor上运行.<br>Hypervisor实现方式一般是一个特殊定制的Linux系统.Xen和VMware的ESXi都属于这个类型<br>理论上1型对硬件虚拟化功能进行了特别优化,所以性能比2型更高<br>2型虚拟化基于普通的操作系统,会比较灵活,比如支持虚拟机内嵌套,可以在KVM中运行KVM</p><h4 id="2型虚拟化"><a href="#2型虚拟化" class="headerlink" title="2型虚拟化"></a>2型虚拟化</h4><p>在x86平台上最热门运用最广泛的虚拟化方案莫过于KVM了。<br>OpenStack对KVM的支持性也很强.<br>KVM全称Kernel-Based Virtual Machine,也就是说KVM是基于Linux内核实现的<br>KVM有一个内核模块叫做<strong>kvm.ko</strong>,只用于管理虚拟CPU和内存<br>IO的虚拟化(比如存储和网络设备)就交由Linux内核和Qeum来实现.<br>作为一个Hypervisor,KVM本身只关注虚拟机调度和内存管理,IO外设的任务交给Linux内核和Qemu</p><p><strong>Libvirt</strong><br>这是<strong>KVM的管理工具</strong><br>除了能够管理Hypervisor,还能管理Xen,VirtualBox等<br>OpenStack底层也使用Libvirt<br>Libvirt 包含 3 个东西：后台 daemon 程序 libvirtd、API 库和命令行工具 virsh<br>libvirtd是服务程序，接收和处理 API 请求；<br>API 库使得其他人可以开发基于 Libvirt 的高级工具，比如 virt-manager，这是个图形化的 KVM 管理工具，后面我们也会介绍；<br>virsh 是我们经常要用的 KVM 命令行工具，后面会有使用的示例。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络基础知识</title>
    <link href="/2023/04/24/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/24/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>挺忙的</p><span id="more"></span><style>    strong{        color: red;    }    #div1 {        display: inline-block;    }    #div1 p{        border-style: solid;border-color: black;background-color: darkorange;text-align: center;color: white;font-size: 8px;    }    a strong{        text-decoration: none;color: white;    }    rt{        color: white;    }</style><h1 id="基础常识"><a href="#基础常识" class="headerlink" title="基础常识"></a>基础常识</h1><h2 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h2><p>网络实际是冷战的产物,是一种分散的指挥系统.最早叫做ARPANET(阿帕网).到1972年时,阿帕网上的网点数已经达到40个,可以相互传输小文本文件,也就是E-mail,也可以利用文件传输协议发送大文本文件,包括数据文件,即现在的FTP.<br>同时,也发现了将一台电脑模拟为另一台远程电脑的终端而使用远程电脑上资源的方法,被称为Telnet.由此可见,E-mail,FTP和Telnet是因特网上较早出现的重要工具,E-mail和FTP目前仍是因特网上最主要的内容.</p><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p>1972年,为了在不同计算机网络之间进行通信达成协议,会议决定成立Internet工作组,负责建立一种<strong>能保证计算机之间进行通信的标准规范即”通信协议”</strong><br>1973年,美国国防部也开始研究如何实现各种不同网络之间的互联问题,到了1974年,IP(Internet协议)和TCP(传输控制协议)问世,合称<strong>TCP&#x2F;IP协议</strong><br>这两个协议定义了一种在电脑网络间传送报文(文件或命令的方法).随后,美国国防部决定向全世界无条件提供TCP&#x2F;IP协议,即向全世界公布了电脑网络之间通信的核心技术,TCP&#x2F;IP协议的公开导致了Internet的迅速发展</p><p>到1980年,世界上既有使用TCP&#x2F;IP协议的ARPA网,也有很多使用其他通信协议的网络,为了连接这些网络,温顿·瑟夫提出了一个想法:在美国<strong>网络内部各自使用自己的通信协议,在和其他网络通信时使用TCP&#x2F;IP协议</strong>,使其利于厂商之间的公平竞争,不遵从则被剔除市场</p><p>TCP&#x2F;IP 具有五层模型</p><ol><li>物理层;和数据链路层都是由底层网络定义的协议</li><li><u>数据链路层</u> </li><li><u>网络层</u> ICMP IGMP IP ARP RARP</li><li><u>传输层</u> TCP UCP SCTP</li><li><u>应用层</u> HTTP FTP TFTP SMTP SNMP DNS</li></ol><p>早期的计算机网络主要是为了解决价格昂贵,电脑数量极少而产生,其形式是将一台计算机经过通信线路与若干台终端直接连接,我们也可以将其看做最简单的<strong>局域网雏形</strong><br>最早的Internet是由美国国防部高级研究计划局建立,如今计算机网络的许多概念和方法,如分组交换技术都来自ARPAnet.不仅进行了租用线互联的分组交换技术研究,而且做了无线,卫星网的分组交换技术研究,其结果便是TCP&#x2F;IP的问世</p><p>ARPAnet最大的贡献是<strong>TCP&#x2F;IP协议的问世</strong></p><p>第一阶段:远程通信连接<br>第二阶段:局域网通信<br>第三阶段:计算机网络互联,同时TCP&#x2F;IP协议诞生并广泛使用<br>第四阶段:信息高速公路,实际就是现代网络</p><p>中国网络从1987年开始通过中国学术网CANET向世界发出第一封E-mail为标志面世<br>第一阶段:87-93研究试验阶段,仅限于小范围内的电子邮件服务<br>第二阶段:94-96起步阶段,正式被承认为中国的互联网,同时96年网民已达到20W<br>第三阶段为97年到现在,是Internet在我国发展最为快速的阶段,截止03年,我国上网总人数到达6800W,比2002年增加了2220W人</p><p>中国的网络域名正式确认为cn</p><p>因特网是人类历史发展中的伟大里程碑,是未来信息高速公路的雏形,已经成为世界上覆盖面最广,规模最大,信息资源最丰富的计算机信息网络</p><h1 id="正式认识计网"><a href="#正式认识计网" class="headerlink" title="正式认识计网"></a>正式认识计网</h1><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><p>计算机网络:将分散的,具有独立功能的计算机系统通过通信设备与线路连接起来,由功能完善的软件实现资源共享和信息传递的系统<br>计算机网络是<strong>互联,自治</strong>的计算机集合<br>互联:通过通信链路互联互通<br>自治:无主从关系</p><h3 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h3><ol><li>数据通信:文件传输</li><li>资源共享:同一个计算机网络上的其他计算机可使用某台计算机的资源,可共享<strong>硬件,软件,数据</strong></li><li>分布式处理:多台计算机各自承担同一工作任务的不同部分<ol><li>提高可靠性:分布式处理的衍生,单台下线后其他计算机可以继续完成任务</li><li>负载均衡:任然是分布式处理的衍生<br>因特网的发展阶段:</li></ol></li><li>ARPAnet→internet→Internet</li><li>三层结构的因特网:主干,地区,本地</li><li>三层结构的衍生,将控制权分散给公司.ISP:因特网服务提供者&#x2F;商</li></ol><h3 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h3><ol><li>组成部分:<strong>硬件,软件,协议(一系列规则和约定的集合)</strong></li><li>工作方式:<ol><li>边缘部分:可以是大型计算机,也可以小型摄像头,是使用网络设备的总和,也是进程之间的通信<ul><li>C&#x2F;S方式:client&#x2F;server,客户端与服务器之间的通信</li><li>P2P方式:peer-to-peer,对等连接,服务者和客户端之间可以相互切换.实际就是允许客户机向另外一台客户机请求资源传输,可以随时切换服务端与客户端.</li></ul></li><li>核心部分:核心部分为边缘部分服务,包括路由器,中间部分等</li></ol></li><li>功能组成:<ol><li>通信子网 实现数据通信</li><li>资源子网 实现资源共享&#x2F;数据处理</li></ol></li></ol><img src="/img/网络基础/网络模型.jpg">网络层:路由器等数据链路层:交换机,网桥物理层:集线器,中继器<p>按分布范围分:广域网WAN&amp;rt;城域网MAN&amp;rt;局域网LAN&amp;rt;个人区域网PAN&amp;rt;<br>按使用者分:公用网,专用网<br>按交换技术分:电路交换,报文交换,分组交换.<br>电路交换最经典的就是电话,当用户已经占用其中一条电路线时,其他用户无法使用(通话正忙).报文交换可以认为是分组的总和,可以统称为存储转发.存储转发通过路由器自动选择更快的方向进行传输,每个路由器都可以作为一个站点,仅占用一小段资源.<br>按拓扑结构分:总线型,星型,环形,网状型<br><img src="/img/网络基础/拓扑结构图.png"></p><p>按传输技术分:广播式网络(共享公共信道),点对点网络(使用分组存储转发与路由选择机制)</p><h3 id="标准化工作及其相关组织"><a href="#标准化工作及其相关组织" class="headerlink" title="标准化工作及其相关组织"></a>标准化工作及其相关组织</h3><p>要实现不同厂商的软,硬件相互连通,必须有一个统一的标准</p><ul><li>标准分类:<br>  1. 法定标准 由权威机构制定的正式的,合法的标准 <strong>OSI</strong><br>  2. 事实标准 某些公司产品在竞争中为主流,这些产品的协议和技术成为了标准</li></ul><p>RFC(Request For Comments)————————————因特网标准的形式<br>RFC上升至因特网正式标准的四个阶段:</p><ol><li>因特网草案:此时还不是RFC文档</li><li>建议标准:从这个阶段开始成为RFC文档(可以由他人进行补充修改)</li><li>草案标准:给IETF,IAB审核(现已取消)</li><li>因特网标准</li></ol><p>国际标准化组织ISO OSI参考模型,HDLC协议<br>国际电信联盟ITU制定通信规则<br>国际电子电气工程师协会IEEE学术机构,IEEE802,5G<br>Internet工程任务组IETF 负责因特网相关标准的制定 形式:RFC+数字编号</p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><p>速率:数据率&#x2F;数据传输率&#x2F;比特(1&#x2F;0)<br>连接在计算机网络上的主机在数字信道上传送数据位数的速率<br>单位有b&#x2F;Kb&#x2F;Mb&#x2F;Gb&#x2F;Tb每秒 一般使用比特代替字节作为传输速度单位,速率的单位转换为10^3,存储容量则是1024</p><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><p>带宽:原本指某个信号具有的频带宽度,即最高频率与最低频率之差,单位是赫兹<br>计算机网络中,带宽用来表示网络的通信线路传送数据的能力,通常是指单位时间内从网络中的某点到另一点所能通过的<strong>“最高数据率”</strong>.单位是”比特每秒”,b&#x2F;s,kb&#x2F;s,Mb&#x2F;s,GB&#x2F;s<br>也可以认为是<strong>网络设备所支持的最高速度</strong><br>链路带宽&#x3D;1MB&#x2F;s 时<br>主机在1us(微秒)内可向链路发送1bit数据<br>链路以电磁波为载体,传播速率近光,但是传输过程中有损耗,所以1us可向前传播200m,可以认为每秒是2*10^8每秒<br>每一段距离内都有1比特的数据正在传输,一段时间内每个正在传输的比特都有其自己的动作</p><p>链路带宽&#x3D;2MB&#x2F;s 时<br>仅仅只是数据传输量变多了,可以认为是每段标准距离内有了两个比特</p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>吞吐量:表示在单位时间内通过某个网络(或信道,接口)的数据量.单位b&#x2F;s,kb&#x2F;s,Mb&#x2F;s等<br>吞吐量受网络的带宽或额定速率的限制<br>吞吐量指的是链路带宽与速率的最大公共值,如果链路带宽的传输速率为100MB&#x2F;s,但是服务器与交换机的传输速率仅有30MB&#x2F;s,则吞吐量为30MB&#x2F;s</p><p><strong>宽带是传输率,带宽是频率范围和最高数据率除以单位时间内通过链路的数量(也可简单称为物理层的最大传输速率)</strong></p><h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><p>时延:指数据(报文&#x2F;分组&#x2F;比特流)从网络(或链路)的一端传送到另一端所需的时间.也叫延迟或迟延,单位是s<br>时延包含了:发送时延,传播时延,排队时延,处理时延<br>发送时延:数据长度&#x2F;信道带宽(以最后一个bit离开主机为准)<br>传播时延:取决于电磁波传播速度与链路长度<br>排队时延:信道占用警告,此时在路由器的缓存区进行等待<br>处理时延:路由器对数据检错与终点查验</p><h4 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h4><p><ruby>时延带宽积<rt>bit</rt></ruby>&#x3D; <ruby>传播时延<rt>s</rt></ruby> X <ruby>带宽<rt>b&#x2F;s</rt><ruby><br>时延带宽积又称为以比特为单位的链路长度,即<strong>“”</strong></p><h4 id="往返时延RTT"><a href="#往返时延RTT" class="headerlink" title="往返时延RTT"></a>往返时延RTT</h4><p>从发送方发送数据开始,到发送方受到接收方的确认为止(接收方收到后立刻发送确认),总共经历的时延<br>RTT越大,在收到确认之前可发送的数据越多<br>RTT包括:往返传播时延(传播*2)和末端处理时间</p><h4 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h4><ol><li>信道利用率(数据通过时间&#x2F;总时长)</li><li>网络利用率(信道利用率加权平均值,利用率越高.时延越大)<br>网络利用率高后,信道占用率极大,速率变慢</li></ol><h2 id="体系结构-amp-参考模型"><a href="#体系结构-amp-参考模型" class="headerlink" title="体系结构&amp;参考模型"></a>体系结构&amp;参考模型</h2><h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h3><p>发送文件:</p><ol><li>发起通信的计算机必须将数据通信的通路进行激活</li><li>要告诉网络如何识别目的主机</li><li>发起通信的主机要查明目的主机是否开机,并与网络连接正常</li><li>发起通信的主机需查明对方计算机中文件管理程序是否做好准备工作</li><li>确保差错和意外能够解决</li></ol><p>如何分层:将最初的物件层层打包.打包前和解包后相同层数的实体被称为对等实体(每一层都是一个实体)<br>对等实体之间具有协议,非对等则无.相邻两层之间通过接口进行连接</p><p>基本规则:</p><ol><li>各层之间相互独立,每层仅实现一种相对独立的功能</li><li>每层之间界面自然清晰,易于理解,相互交流尽可能少</li><li>结构上可分割开.每层采用最合适的技术来使用</li><li>保持下层对上层的独立性,上层单项使用下层提供的服务.</li><li>整个分层结构应该能促进标准化工作</li></ol><h3 id="正式认识分层结构"><a href="#正式认识分层结构" class="headerlink" title="正式认识分层结构"></a>正式认识分层结构</h3><ol><li>实体:第n层中的活动元素称为n层实体.同一层的实体叫做对等实体</li><li>协议:为进行网络中的对等实体数据交换而建立的规则,标准或约定,称为网络协议(水平,可参考网络模型图)<ul><li>语法:规定传输数据的格式</li><li>语义:规定所要完成的功能</li><li>同步:规定各种操作的顺序</li></ul></li><li>接口(访问服务点SAP):上层使用下层服务的入口</li><li>下层为相邻上层提供的功能调用(垂直)</li></ol><p>每一层都可以拆出SDU,PCI,PDU<br>SDU:服务数据单元,为完成用户所要求的功能而传输的数据<br>PCI:协议控制信息,控制协议操作的信息<br>PDU:协议数据单元,对等层次之间传送的数据单位</p><p>PCI+SDU&#x3D;PDU<br>PDU可以作为下一层的SDU<br>原数据+PCI&#x3D;PDU<br>PDU在上一层的基础上再加上PCI就成为一个全新的PDU,在本层PDU此时叫做SDU<br><img src="/img/网络基础/分层结构.png"></p><p>网络体系结构是从<strong>功能</strong>上描述计算机网络结构<br>计算机网络体系结构简称网络体系结构是<strong>分层结构</strong><br>每层遵循某个&#x2F;些<strong>网络协议</strong>以完成本层功能<br><strong>计算机网络体系结构</strong>是计算机网络的各层及其协议的集合<br>第n层在向n+1层提供服务时,此服务不仅包含第n层本身的功能,还包含由下层服务提供的功能<br>仅仅在<strong>相邻层间有接口</strong>,且所提供服务的具体实现细节对上一层完全屏蔽<br>体系结构是<strong>抽象</strong>的,而实现是指能运行的一些软件和硬件</p><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>计算机网络分层结构一般分为<strong>7层OSI参考结构</strong>(法定标准)和<strong>4层TCP&#x2F;IP参考模型</strong>事实标准<br>一般来说可以简单优化记为5层的体系结构</p><h4 id="来历"><a href="#来历" class="headerlink" title="来历"></a>来历</h4><p>为了解决计算机网络复杂的问题,推出了分层结构<br>第一个网络体系结构(SNA)为IBM公司提出<br>然后是DEC公司的DNA和美国国防部的TCP&#x2F;IP</p><p>目的是支持异构网络系统的互联互通<br>国际标准化组织ISO于1984年提出开放系统互连(OSI)参考模型<br>但是理论成功,市场失败</p><ol><li>没有实操经验</li><li>实现复杂,效率低</li><li>标准周期长,没有及时进入市场</li><li>层次划分不够合理</li></ol><p>此后市场被TCP&#x2F;IP结构抢占</p><table><thead><tr><th align="center">层次</th><th align="center">OSI层</th></tr></thead><tbody><tr><td align="center">7</td><td align="center">应用层</td></tr><tr><td align="center">6</td><td align="center">表示层</td></tr><tr><td align="center">5</td><td align="center">会话层</td></tr><tr><td align="center">4</td><td align="center">传输层</td></tr><tr><td align="center">3</td><td align="center">网络层</td></tr><tr><td align="center">2</td><td align="center">数据链路层</td></tr><tr><td align="center">1</td><td align="center">物理层</td></tr></tbody></table><p>注:<strong>有时五层结构会忽略物理层变为四层结构</strong><br><strong>流量控制</strong>:根据双方的传输速率将传输速率进行动态调整,避免接收方缓冲端数据溢出造成<strong>丢包</strong><br>OSI的1-3层叫做通信子网(数据通信),5-7层称为资源子网(数据处理)<br>4-7层是端到端之间的通信,1-3是点到点.端到端是指有明确的终点,点到点只知道下一步要将数据传输到哪一台转发所使用的设备,并不知道终点在哪,比如路由器之间传输信息便是点到点</p><p>两台主机之间想要进行通信时,实际有应用到所有层次<br>一般都是PCI+SDU+PDU,但是数据链路层为其<strong>已经进行封包</strong>了,物理层仅仅是将这个封包通过二进制进行传输.数据链路层实际上是添加了尾部并进行封包,而其他层仅进行封装</p><p><strong>应用层</strong>:所有可以和用户交互产生网络流量的程序<br>典型的应用层服务:<strong>文件传输(FTP),电子邮件(SMTP),万维网(HTTP)</strong></p><p><strong>表示层</strong>:用于处理两个通信系统中交换信息的表示方式(语法和语义)<br>功能:数据格式交换,数据加密解密,数据的压缩与恢复(减少传输时的数据大小)</p><p><strong>会话层</strong>:向表示层的实体&#x2F;用户进程提供<strong>建立连接</strong>并在连接上<strong>有序的传输数据</strong>,也是<strong>建立同步</strong>(SYN)<br>功能:建立,管理和终止回话;使用校验点可使会话在通信失效时从校验点&#x2F;同步点继续恢复通信,实现数据同步(适用于大文件的传输,比如断点续传)</p><p><strong>传输层</strong>:负责主机中<strong>两个进程</strong>的通信,即<strong>端到端</strong>的通信.传输单位是报文段或用户数据报.<br>功能:可靠传输,不可靠传输;差错控制;流量控制;复用分用<br>可靠传输:如果未收到目标主机的信息,则再传输一遍信息,比较消耗时间<br>不可靠传输:无需建立连接,数据也不用管是否能到达目标主机,仅发送一次信息<br>差错控制:如果报文段失序或丢失,则由传输层纠正<br>流量控制:控制流量的传输速率,以免超载<br>复用分用:多个应用层进程可同时使用下面运输层的服务;运输层把收到的信息分别交付给上面应用层相应的进程(多个应用的<strong>端口号+信息</strong>重复组合成一段报文,再由对方的传输层拆开并通过端口分别交付给相应的应用                </p><p><strong>网络层</strong>:主要任务是把分组从源传到目的端,为分组交换网上的不同主机提供通信服务,网络层传输单位是数据报<br>功能:路由选择,流量控制,差错控制,拥塞控制<br>路由选择:选择传输最佳路径<br>拥塞控制:若所有节点都来不及接受分组,而要丢弃大量(报文)分组时,网络就处于拥塞状态.因此要采取一定措施缓解这种拥塞<br>主要协议:IP,IPX,ICMP,IGMP,ARP,RARP,OSPF</p><p><strong>数据链路层</strong>:<br>主要任务是把网络层传下来的数据<strong>组装成帧</strong>.数据链路层&#x2F;链路层得传输单位是<strong>帧</strong>.帧&#x3D;标志+字段(地址字段+控制字段+正文字段+校验字段)<br>功能:成帧(定义帧的开始和结束);差错控制(帧错和位错);流量控制;访问(接入)控制(控制对信道的访问)主要协议:SDLC,HDLC,PPP,STP</p><p><strong>物理层</strong>:<br>主要任务是在<strong>物理媒体</strong>上实现比特流的<strong>透明传输</strong>,物理层传输单位是<strong>比特</strong><br>透明传输:指不管所传数据是什么样的比特组合,都应当能够在链路上传输(仅做电信号转换)<br>功能:定义接口特性(确定引脚数量,连接方式等);定义传输模式(单工,半双工(都可以作为接收&#x2F;发送方,但同时只能有一个人在工作),双工);定义传输速率;比特同步;比特编码(规定电压所表示的0&#x2F;1)<br>主要协议:Rj45,802.3</p><h4 id="TCP-x2F-IP与ISO-x2F-OSI的异同"><a href="#TCP-x2F-IP与ISO-x2F-OSI的异同" class="headerlink" title="TCP&#x2F;IP与ISO&#x2F;OSI的异同"></a>TCP&#x2F;IP与ISO&#x2F;OSI的异同</h4><p>相同点:</p><ol><li>都分层</li><li>基于独立的协议栈的概念</li><li>可以实现异构网络互联</li></ol><p>不同点:</p><ol><li>OSI定义三点:服务,协议,接口</li><li>OSI先出现,参考模型先于协议发明,不偏向于任何协议</li><li>TCP&#x2F;IP设计之初就考虑到异构互联问题,将IP作为一个重要层次</li><li></li></ol><table><thead><tr><th align="center"></th><th align="center">ISO&#x2F;OSI参考模型</th><th align="center">TCP&#x2F;IP模型</th></tr></thead><tbody><tr><td align="center">网络层</td><td align="center">无连接+面向连接</td><td align="center">无连接</td></tr><tr><td align="center">传输层</td><td align="center">面向连接</td><td align="center">无连接+面向连接</td></tr></tbody></table><p>面向连接分为三个阶段,第一是建立连接,发送一个连接请求.第二阶段是连接成功后开始数据传输.第三阶段是传输完后释放连接.当数据传输完毕,必须释放连接. 而面向无连接没有这么多阶段,他直接进行数据传输.</p><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h2 id="通信基础"><a href="#通信基础" class="headerlink" title="通信基础"></a>通信基础</h2><p>物理层接口特性:物理层解决如何在连接各种计算机的传输媒w体上<strong>传输数据比特流</strong>,而不是指具体的传输媒体.<br>物理层主要任务:确定与传输媒体接口有关的一些特性→定义标准</p><ol><li>机械特性:规定物理连接时采用的规格,接口形状,引线数目,引脚数量和排列情况</li><li>电气特性:规定传输二进制位时,线路上信号的电压范围,阻抗匹配,传输速率和距离限制等</li><li>功能特性:指明某条线上出现的某一电平表示何种意义,接口部件的信号线的用途</li><li>规程特性:(过程特性)定义各条物理线路的工作关系和时序关系</li></ol><img src="/img/网络基础/通信过程.png"><p>通信的目的是传送消息<br>数据data:传送信息的实体,通常是有意义的符号序列<br>信号:数据的电信&#x2F;电磁的表现,是数据在传输过程中的存在形式<br>    - 数字信号&#x2F;离散信号:代表消息的参数的取值是离散的<br>    - 模拟信号&#x2F;连续信号:代表消息的参数的取值是连续的</p><p>信源&#x2F;信宿:产生和发送数据的源头&#x2F;接收数据的终点<br>信道:信号的传输媒介.一般用来表示向某一个方向传送信息的介质,因此一条通信线路往往包含一条发送信道和一条接收信道<br>数字信号只能走数字信道,模拟信号走模拟信道<br>信道除了数字和模拟信道之分,还有有线与无线之分</p><p>通信方式:单工通信,半双工通信(双向交替发言),双工通信</p><h3 id="数据传输方式"><a href="#数据传输方式" class="headerlink" title="数据传输方式"></a>数据传输方式</h3><p><strong>串行与并行</strong><br>串行:将表示一个字符的八位二进制数从低(右)位到高(左)位的顺序依次发送<br>并行:江表示一个字符的八位二进制数通过8条信道同时发送</p><p><strong>同步传输&amp;异步传输</strong><br>同步传输:在同步传输的模式下,数据的传送是以一个数据区块为单位,因此同步传输又称为区块传输.<br>在传送数据时,需先送出1个或多个同步字符,再送出整批的数据,同步字符用于同步时序.<br>异步传输:异步传输将比特分成小组进行传送,小组可以是8位的1个字符或更长.发送方可以在任何时刻发送这些比特组,而接收方不知道比特组在什么时候到达.传输数据时,加一个字符起始位和一个字符终止位.<strong>可以想想打电话</strong>,只知道开始和结束的时刻,并不知道什么时候对方的比特组(消息)会发送过来.</p><h2 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h2><p>码元是指用一个固定时长的信号波形(数字脉冲),代表不同离散数值的基本波形,是数字通信中数字信号的计量单位,这个<strong>时长内的信号称为k进制码元,时长称为码元宽度</strong>.当码元的离散状态有M(M&gt;2)时,此时为M进制码元.<br>1码元可以携带多个比特的信息量.二进制编码时只有两种不同的码元,0和1<br>4进制码元拥有4个离散状态,四种高低不同的信号波形,在信号波形被接收时可以由00,01,10,11表示出来.<strong>此时码元一次传输两个比特的信息</strong><br>波特率是600baud,若码元是二进制的，比特率是600bps。若码元是八进制的，比特率就是1800bps（因为一个码元携带了三位信息）</p><h3 id="数字通信系统传输速率的两种表示方法"><a href="#数字通信系统传输速率的两种表示方法" class="headerlink" title="数字通信系统传输速率的两种表示方法"></a>数字通信系统传输速率的两种表示方法</h3><p>速率也叫数据率,是指数据的<strong>传输速率</strong>,表示单位时间内传输的数据量.可以用码元传输速率和信息传输速率表示.</p><ul><li><p>码元传输速率:<br>别名马元速率,波形速率.调制速率,符号速率等,它表示单位时间内数字通信系统所传输的码元个数(也可称为脉冲个数或信号变化的次数),单位是波特(B←baud的缩写).<strong>1波特表示数字通信系统每秒传输一个码元</strong>.<br>数字信号有多进制和二进制之分,但码元速率和进制数无关,只与码元长度T有关<br>码元的速率&#x3D;1&#x2F;T (B)</p></li><li><p>信息传输速率:别名信息速率,比特率等,表示单位时间内数字通信系统传输的二进制码元个数,即(比特数),单位是比特&#x2F;秒(b&#x2F;s)</p></li></ul><p>若一个码元携带Nbit的信息量,则M Baud的码元传输速率所对应的信息传输速率为M*N bit&#x2F;s<br><img src="/img/网络基础/码元计算.png"></p><h3 id="带宽-1"><a href="#带宽-1" class="headerlink" title="带宽"></a>带宽</h3><p>模拟信号系统中:当输入的信号评率高&#x2F;低达到一定程度,使得系统的输出功率称为输入功率的一半时(-3dB),最高频率和最低频率间的差值代表了系统的通频带宽,其单位为赫兹(Hz)</p><p>数字设备中:表示在单位时间内从网络中的某一点到另一地所能通过的”最高数据率”&#x2F;单位时间内通过链路的数量,常用来表示网络的通信线路所能传输数据的能力,单位是比特每秒(bps)可简单认为是网络传输的最高速率</p><h2 id="奈式准则"><a href="#奈式准则" class="headerlink" title="奈式准则"></a>奈式准则</h2><h3 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h3><p>数据在传送过程中发生扭曲与变化<br>信号波形在实际传输过程中可能受到干扰(带宽受限,信道有噪声,干扰),信号波形在信宿就可能难以识别<br>影响失真程度的因素:</p><ol><li>码元传输速率 速度越快越容易失真</li><li>信号传输距离受到干扰的时间变长</li><li>噪声干扰 不解释</li><li>传输媒体质量其实也是传输媒介</li></ol><h4 id="码间串扰"><a href="#码间串扰" class="headerlink" title="码间串扰"></a>码间串扰</h4><p>失真的一种现象<br><img src="/img/网络基础/码间串扰.png"><br>信道带宽在此处等于3000Hz<br>200Hz震动频率过低,在电话线中传输容易受到损耗衰减;4000Hz为码间串扰,震动过快导致接收端受到的信号波形失去了<strong>码元之间清晰界限</strong>的现象,分不清0&#x2F;1</p><p>为了解决码间串扰的问题,所以奈式准则出现<br>在理想低通(无噪声,带宽受限)条件下,为了避免码间串扰,极限码元传输速率为2W Buad,W是信道带宽,单位是Hz<br>理想低通信道下的<strong>极限数据传输率&#x3D;2Wlog₂V(b&#x2F;s)</strong> V是几种码元&#x2F;码元的离散电平数目</p><ol><li>在任何信道中,码元的传输速率都有上限,超限则严重码间串扰,完全正确识别几乎不可能</li><li>信道的频带越宽(即能通过的信道高频分类越多),就可以用更高的速率进行码元的有效传输</li><li>奈式准则给出了码元传输速率的限制,但并没有对信息的传输速率给出限制</li><li>由于码元的传输速率受奈式准则的影响,所以要提高数据的传输速率,就必须设法使每个码元能携带更多个比特的信息量,这需要多元制的调制方法<img src="/img/网络基础/奈式准则题1/png"></li></ol><h2 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h2><p>噪声存在于所有电子设备和通信信道中,由于噪声随机产生,瞬时值时大时小,因此噪声会使接收端对码元的判决产生错误.但是噪声的影响是相对的,若信号较强,则噪声影响相对小,因此,<strong>信噪比</strong>就很重要<br>信噪比&#x3D;信号的平均功率&#x2F;噪声的平均功率,常记为S&#x2F;N,并用分贝(dB)作为度量单位,即:<br>    <strong>信噪比dB&#x3D;10log₁₀(S&#x2F;N)</strong><br>香农定理:在带宽受限且有噪声的信道中,为了不产生误差,信息的数据传输速率有上限值<br>    <strong>信道的极限传输速率&#x3D;Wlog₂(1+S&#x2F;N) (b&#x2F;s)</strong></p><ol><li>带宽的信道或信道中的信噪比越大,则信息的极限传输速率就越高</li><li>对一定的传输带宽和一定的信噪比,信息传输速率的上线便确定了</li><li>只要信息的传输速率低于信道的极限传输速率,就一定嫩找到某种方法来实现<strong>无差错的传输</strong></li><li>香农定理得出的为极限信息传输速率,实际信道能达到的传输速率比这低不少</li><li>若信道带宽W或信噪比S&#x2F;N没有上线(不可能达到),那么信道的极限信息传输速率也就没有上限</li></ol><img src="/img/网络基础/香农定理1.png"><img src="./网络基础/香农与奈式总结.png"><h2 id="编码和调制"><a href="#编码和调制" class="headerlink" title="编码和调制"></a>编码和调制</h2><h3 id="基带信号与带宽信号"><a href="#基带信号与带宽信号" class="headerlink" title="基带信号与带宽信号"></a>基带信号与带宽信号</h3><p>信道:信号的传输媒介,一般用来表示向某一个方向传送信息的介质,因此一条通信线路往往包含一条发送信道和一条接收信道</p><ol><li>按传输信号分:模拟信道和数字信道</li><li>按传输介质分:无线信道和有线信道</li></ol><p>信道上传输的信号:将数字信号1&#x2F;0用两种不同的电压表示,再送到数字信道上取传输(基带传输)来自信源的信号,计算机输出的数据信号基本都是基带信号.基带信号就是发出的直接表达了要传输的信息的信号,比如说话的声波就是基带信号.<br>宽带信号:将基带信号进行调制后形成的频分复用模拟信号,再传送到模拟信道上去传输(宽带传输)<br>把基带信号经过载波调制后,把信号的频率范围搬移到较高的频段以便在信道中传输(即仅在一段频率范围内能通过信道)</p><p>在传输距离较近的时候,计算机网络一般采用基带传输方式(近距离衰减小,从而信号内容不易发生变化)<br>在传输距离较远时,计算机网络采用宽带传输方式(远距离衰减大,即使信号变化大最后也能过滤出来基带信号)<br><img src="/img/网络基础/调制方式.png"><br>数据使用数字发送器成为数字信号,使用调制器成为模拟信号<br>模拟数据使用PCM编码器成为数字信号,使用放大器调制器成为模拟信号</p><h3 id="编码与调制的方法"><a href="#编码与调制的方法" class="headerlink" title="编码与调制的方法"></a>编码与调制的方法</h3><h4 id="数字数据编码为数字信号"><a href="#数字数据编码为数字信号" class="headerlink" title="数字数据编码为数字信号"></a>数字数据编码为数字信号</h4><p>常用编码类型:</p><ol><li>非归零编码</li><li>曼彻斯特编码</li><li>差分曼彻斯特编码</li></ol><p>非常用:</p><ol><li>归零编码</li><li>反向不归零编码</li><li>4B&#x2F;5B编码</li></ol><h5 id="非归零编码"><a href="#非归零编码" class="headerlink" title="非归零编码"></a>非归零编码</h5><p>难以保持同步,使用高电平表示1,低0.当数据类型为连续的0&#x2F;1时,接收端无法正确识别传输的信号长度,需要再建立一条信道同步传输时间周期</p><h5 id="归零编码"><a href="#归零编码" class="headerlink" title="归零编码"></a>归零编码</h5><p>信号电平在一个码元内要恢复成零,零就是零</p><h5 id="反向不归零编码"><a href="#反向不归零编码" class="headerlink" title="反向不归零编码"></a>反向不归零编码</h5><p>信号电平翻转表示0,不变表示1,如果全1则和非归零一样,需要建立信道同步传输时间周期</p><h5 id="曼彻斯特编码"><a href="#曼彻斯特编码" class="headerlink" title="曼彻斯特编码"></a>曼彻斯特编码</h5><p>将一个码元分成两个相等的间隔,前低后高为1,前高后低为0,也可以采取相反的规定.因为有电平跳变,使得可以实现自同步.这种信号所占的频带宽度是原始系带宽度的两倍.每一个码元都被调成两个电平,所以数据传输速率只有调制速率的1&#x2F;2</p><h5 id="差分曼彻斯特编码"><a href="#差分曼彻斯特编码" class="headerlink" title="差分曼彻斯特编码"></a>差分曼彻斯特编码</h5><p>同1异0,常用于局域网传输<br>若码元为1,则前<strong>半个码元的电平和后半个码元的电平相同</strong>.为零则不同.在每个码元中都有一次电平跳转,可以实现自同步,且抗干扰性强于曼彻斯特编码</p><h5 id="4B-x2F-5B编码"><a href="#4B-x2F-5B编码" class="headerlink" title="4B&#x2F;5B编码"></a>4B&#x2F;5B编码</h5><p>在比特流中插入额外的比特打破连续的0&#x2F;1,就是用5个比特编码4比特的数据,之后再传输给接收方.编码效率为80%</p><h4 id="数字数据调制为模拟信号"><a href="#数字数据调制为模拟信号" class="headerlink" title="数字数据调制为模拟信号"></a>数字数据调制为模拟信号</h4><p>数字数据调制技术在发送端将数字信号转换为模拟信号,而在接收端将模拟信号还原为数字信号,分别对应于调制解调器的调制和解调过程</p><ul><li>2ASK:0时无幅度,1有幅度</li><li>2FSK:低频为0,高频为1</li><li>2PSK:调相,当出现数据变化(1&#x2F;0发生改变)时在单位时间内发生一次方向转变<img src="/img/网络基础/调制模拟信号.png"></li></ul><h4 id="模拟数据编码为数字信号"><a href="#模拟数据编码为数字信号" class="headerlink" title="模拟数据编码为数字信号"></a>模拟数据编码为数字信号</h4><p>计算及内部处理的都是二进制数据,处理的都是数字音频,所以需要将模拟音频通过采样,量化转换成有限个数字表示的离散序列(即实现音频数字化)<br>最典型的例子就是对音频信号进行编码的脉码调制(PCM),在计算机应用中,最高保真水平的就是PCM编码,被广泛用于素材保存及音乐欣赏,CD与DVD以及我们常见的WAV文件中均有应用.它主要包括三步:抽样,量化,编码.</p><p>抽样:对模拟信号周期性扫描,把时间上连续的信号变成时间上离散的信号<br>模拟信号是连续的信号,通过周期性扫描将其电平分离出来,成为一个一个的小点<br>为了使得离散信号能无失真的代表抽样的模拟数据,要使用采样定理进行采样<br>f(采样频率)&gt;&#x3D;2f(信号最高频率)</p><p>量化:把抽样取得的电平幅值按照一定的分级标度转化为对应的数字值,并取整数,这就把连续的电平幅值转换为离散的数字量</p><p>编码:把量化的结果转换为与之对应的二进制编码<br><img src="/img/网络基础/模拟编码数字.png"><br>一般在一个周期内采样两次便可取得单个波形的评率<br>但一般要考虑到多个波形,所以对每条波形来说,每秒内采样的次数是不同的,因为波形的周期并不相同</p><h4 id="模拟数据调制为模拟信号"><a href="#模拟数据调制为模拟信号" class="headerlink" title="模拟数据调制为模拟信号"></a>模拟数据调制为模拟信号</h4><p>声波(模拟数据)在传播时可能难以应对在信道上的传输损耗,所以需要调制成一个高频的信号.高频的信号再受损后也可还原为基带信号.接收端在收到时通过解调器将高频信号还原为基带信号(原来的声波形式)</p><h2 id="数据交换"><a href="#数据交换" class="headerlink" title="数据交换"></a>数据交换</h2><img src="/img/网络基础/数据交换1.png">如果不使用交换机,则会造成资源浪费<h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p>电路交换原理:在传输期间源节点与目的节点有一条专用物理连接线路,在数据传输结束前一直保持.<br>建立连接(呼叫&#x2F;电路建立)→通信(数据传输)→释放连接(拆除电路)</p><p>特点:独占资源,用户始终占用端到端的固定传输带宽.一般用于远程批处理信息传输或系统间实时性要求高的大量数据传输情况(总不能花大时间连接后传一个小文本)</p><table><thead><tr><th align="center">电路交换优点</th><th align="left">电路交换缺点</th></tr></thead><tbody><tr><td align="center">传输时延小</td><td align="left">建立连接时间长</td></tr><tr><td align="center">数据按需传输,无失序问题</td><td align="left">线路独占,即使空闲也不能供他人使用,信道使用率低</td></tr><tr><td align="center">实时性强,建立通路后可以实时通信,适用于交互式会话类通信</td><td align="left">灵活性差,线路中任何一点故障必须重新拨号建立连接,不适合突发性通信</td></tr><tr><td align="center">全双工通信,无冲突.通信双方信道不同,不占用物理信道</td><td align="left">无数据存储能力,难以平滑通信</td></tr><tr><td align="center">适用于模拟信号和数字信号</td><td align="left">电路交换时,数据直达,不同类型,不同规划与速率的终端很难相互进行通信</td></tr><tr><td align="center">控制简单,交换设备及控制较简单</td><td align="left">无法发现和纠正传输差错,难在通信过程中进行差错控制</td></tr></tbody></table><h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3><p>报文是网络中交换与传输的数据单元,及站点一次性要发送的数据块.报文包含将要发送的完整的数据信息,长短很不一致,长度不限且可变</p><p>报文交换的原理:</p><ol><li>无需在两个站点之间建立专用通路,其数据传输的单位是报文,传送过程采用存储转发的方式<img src="/img/网络基础/报文交换的优缺点.png"></li></ol><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p>和报文交换几乎相同,都采用存储转发,但是分组交换为限制传输数据的长度,一般是128B<br>将报文切为小数据块+控制信息(源和目的地址.编号)&#x3D;分组,这些分组会通过不同路径到达源地址,优先选择最快路线,在源处进行组装</p><h3 id="数据交换方式的选择"><a href="#数据交换方式的选择" class="headerlink" title="数据交换方式的选择"></a>数据交换方式的选择</h3><ol><li>传输数据量大,传送时间远大于呼叫时间时,选择电路交换.电路交换传输时延最小</li><li>当端到端的通路有很多段链路组成时,分组交换传输较为合适</li><li>从信道利用率来看,报文交换和分组交换都优于电路交换,但分组交换时延更小,更适合计算机之间突发性的数据通信</li></ol><h3 id="数据报方式"><a href="#数据报方式" class="headerlink" title="数据报方式"></a>数据报方式</h3><ol><li>将报文分组,依次发送到直接相连的节点</li><li>收到分组后,对分组进行差错检测和路由检测,不同分组的下一跳可能不同</li><li>节点C收到分组p1<br>后,对分组p1进行差错检测,正确则向A发送确认信息,A收到C确认后丢弃P1副本</li><li>所有分组到达终点<br>特点:</li><li>为网络层提供无连接服务.发送方可随时发送分组,网络中的节点随时接收</li><li>同一报文的不同分组到达目的节点时可能乱序,重复与丢失</li><li>每个分组传输时必须携带源地址和目的地址,以及分组号</li><li>分组在交换节点存储转发时,需要排队等候处理,产生时延.当通过交换节点的通信量较大或网络发生拥塞时,这种时延会大大增加,交换节点还可根据情况丢弃部分分组</li><li>网络具有冗余路径,当某一交换节点或一段链路出现故障时,可相应的更新转发表,寻找另一条路径转发分组,对故障的适应能力强,适用于突发性通信,不适合长报文,会话式通信</li></ol><h3 id="虚电路方式"><a href="#虚电路方式" class="headerlink" title="虚电路方式"></a>虚电路方式</h3><p>虚电路奖数据报方式和电路交换方式结合,发挥两者优点<br>建立后不需要目的地址,因为报文仅能沿此路径传输<br><img src="/img/网络基础/虚电路方式.png"></p><ol><li>为网络层提供连接服务.建立的;连接是逻辑连接,不是物理连接</li><li>一次通信的所有分组都通过虚电路顺序传输,包含虚电路号,相对数据报方式开销小,同一报文的不同分组抵达时不会乱序,重复与丢失</li><li>分组通过虚电路上每个节点时,节点仅进行差错检测,不需要进行路由选择</li><li>每个节点可能与多个节点间建立多条虚电路,每条虚电路支持特定两个端系统之间的数据传输,可以对两个数据端点的流量进行控制,两个端系统之间也可以有多条虚电路为不同的进程服务</li><li>当某个节点出现故障彻底失效时,所有经过该节点的连接全部报错,需要重新建立<img src="/img/网络基础/数据报与虚电路的区别.png"></li></ol><h2 id="物理层传输介质及分类"><a href="#物理层传输介质及分类" class="headerlink" title="物理层传输介质及分类"></a>物理层传输介质及分类</h2><p>传输介质就是在发送与接收设备之间的物理通路<br>传输媒体不是物理层,物理层是体系结构的第一层,而传输媒体是第0层.传输媒体并不知道传输的信号代表什么,仅传输.物理层规定了<strong>电气特性</strong>,因而能识别所传送的是比特流</p><p>传输介质可分为导向性和非导向性</p><ul><li>导向性:按固定媒介进行传播</li><li>非导向性:自由空间传播,介质可以是空气,真空,海水等</li></ul><h3 id="导向媒介-双绞线"><a href="#导向媒介-双绞线" class="headerlink" title="导向媒介-双绞线"></a>导向媒介-双绞线</h3><p>双绞线是古老又常用的传输介质,由两根采用一定规则并排校合的,相互绝缘的铜导线<br>绞合可以减少相邻导线的电磁干扰<br><img src="/img/网络基础/双绞线.png"><br>为了提高抗电磁干扰能力,可在双绞线外再加上由金属丝编织成的屏蔽层,这就是屏蔽双绞线(STP),无屏蔽层为非屏蔽双绞线(UTP)<br>双绞线价格便宜,常用,在局域网和传统电话网中普遍使用,模拟信号和数字纯属都可以,通信距离为几公里到数十公里,太远时对于模拟传输需要使用<strong>放大器</strong>放大衰减的信号;对于<strong>数字传输</strong>需要用中继器将失真的信号整形</p><h3 id="导向媒介-同轴电缆"><a href="#导向媒介-同轴电缆" class="headerlink" title="导向媒介-同轴电缆"></a>导向媒介-同轴电缆</h3><p>由导体铜制芯线,绝缘层,网状编制屏蔽层和塑料外层构成,有不同的阻抗数值.通常分为50欧姆同轴电缆和75欧姆同轴电缆.50的主要用于传送基带数字信号,又称为基带同轴电缆,在局域网中广泛应用1;75欧姆用于传送宽带信号,又称为宽带同轴电缆,它用于有线电视系统<br><img src="/img/网络基础/同轴电缆结构.png"><br>由于外导体屏蔽层的作用,同轴电缆抗干扰特性比双绞线号,被广泛用于传输较高速率的数据,其传输距离更远,但价格更贵</p><h3 id="导向介质-光纤"><a href="#导向介质-光纤" class="headerlink" title="导向介质-光纤"></a>导向介质-光纤</h3><p>光纤通信利用光导纤维(简称光纤)传递光脉冲通信.有光脉冲为1,无0.而可见光的频率大约是10的8次方MHz,因此光纤通信系统的带宽远远大于目前其他各种传输媒体的带宽<br><img src="/img/网络基础/光纤.png"><br>光纤主要由纤芯(实心)和包层构成,光波通过纤芯进行传导,包层较纤芯有较低的折射率.当光线从高折射率介质射向向低折射率介质时,其折射角大于入射角.因此,只要入射角足够大,就会出现全反射,即光线碰到包层的时候就会折射回纤芯,这个过程不断重复,光也就沿着光纤传输下去,损耗极低</p><ul><li>多模光纤:发送时有多条入射光线,角度随机,反射次数过多,易失真,适合近距离传输</li><li>单模光纤:将直径缩小,使其接近横向传输.光源是定向很好的激光二极管,衰减小,适合远距离传输</li></ul><p>一根光缆少则一根光纤,多则十至数百根</p><ol><li>传输损耗小,中继距离长,远距离传输经济</li><li>抗雷电和电磁干扰性能好</li><li>无串音干扰,保密性好,不易被窃听与截取数据</li><li>体积小,重量轻</li></ol><h3 id="非导向介质"><a href="#非导向介质" class="headerlink" title="非导向介质"></a>非导向介质</h3><p>使用者距离:无线电波(仅此是全向传输),微波,红外线与激光</p><ul><li>无线电波:穿透强,距离远,广泛用于通信领域</li><li>微波:通信频率高,频段范围广,因此数据率很高<ul><li>地面微波接力通信</li><li>卫星通信</li></ul></li><li>红外线,激光<img src="/img/网络基础/非导向性传输介质.png"></li></ul><h2 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h2><h3 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h3><p>由于存在损耗,信号在信道上传输时功率会逐渐衰减,衰减到一定程度时失真,导致接收错误<br>中继器可以对信号进行<strong>再生和还原</strong>,对衰减的信号进行放大,保持与原数据相同,增加信号传输距离,延长网络长度<br>中继器用于再生数字信号,放大器再生模拟信号<br>中继器的部分是网段,而不是子网,适用于完全相同的两类网络的互联,且两个网段速率要相同<br>中继器只将任何电缆上的数据发送到另一端电缆上,仅作用于信号的电气部分,并不管数据中是否有错误数据或不适于网段的数据<br>两端可连接相同&#x2F;不同的媒体<br>中继器两端的网段协议要相同(中继器不会存储转发),否则协议不同堵塞<br>网络标准中对信号的延迟范围作了具体的规定,因而中继器只能在规定的范围内进行,否则会网络故障(5-4-3规则)<br>5-4-3规则:最常用的规则,在网络中只能拥有不超过5个网段,最多只能有4个物理层的网络设备,只有3个段可以挂接计算机<br><img src="/img/网络基础/543规则.png"></p><h3 id="集线器-多口中继器"><a href="#集线器-多口中继器" class="headerlink" title="集线器(多口中继器)"></a>集线器(多口中继器)</h3><p>对信号进行再生放大转发,可以转发到其他所有(除了输入端口)处于工作状态的端口上,增加传输距离,延长网络长度,不具备信号的定向传送能力,是一个共享式设备<br><img src="/img/网络基础/集线器.png"><br>集线器不能分割冲突域<br>连在集线器上的工作主机平分集线器的带宽,导致传输效率变低</p><h1 id="数据链路层功能概述"><a href="#数据链路层功能概述" class="headerlink" title="数据链路层功能概述"></a>数据链路层功能概述</h1><h2 id="数据链路层基本概念"><a href="#数据链路层基本概念" class="headerlink" title="数据链路层基本概念"></a>数据链路层基本概念</h2><p>节点:主机,路由器,相邻的称为相邻节点<br>链路:网络中两个节点的物理通道,链路传输介质主要有双绞线,光纤和微波.分为有线链路和无线链路<br>数据链路:网络中两个节点间的逻辑通道,把实现控制数据传输协议的硬件和软件加到链路上构成数据链路<br>帧:链路层得协议数据单元,封装网络层数据报<br>功能:</p><ol><li>为了网络层提供服务.无确认无连接服务,有确认无连接服务,有确认面向连接服务</li><li>链路管理,即连接的建立,维持,释放</li><li>组帧</li><li>流量控制</li><li>差错控制(帧错&#x2F;位错)</li></ol><p>数据链路层:把网络层交于的数据报加工处理后交给物理层</p><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p>在数据前后添加首尾,形成帧.接收端收到物理层上交的比特流后,可以根据首尾部的标记,从收到的比特流中识别帧的开始与结束<br>首尾包含许多的控制信息,重要作用是帧的定界<br>帧同步:接收方应当从接收到的二进制比特流中分出帧的起始和终止</p><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p>不管数据是怎样的数据组合,都应当在链路上传输,因此链路层看不见妨碍数据传输的东西<br>当所传的数据组合恰巧和控制信息一样时,必须采取适当措施使接收方不会将数据认为是控制信息,这样才能保证链路层的传输是完全透明的</p><ol><li>字符计数法:用帧首部的第一个字节作为计数字段表明帧内的字符数.易出错,传输时缺少一个字符则全部识别出错</li><li>字符填充法:在首尾各添加一个比特组合作为首尾</li><li>零比特填充法:首尾的标志符变为了01111110,解决假控制字段的方法是往连续的5个1后方加一个0.在接收端对5个1后的0删除  (<strong>保证了透明传输,在传输的比特流中可以传送任何比特组合而不引起帧边界的错误判断</strong>)</li><li>违规编码法:使用两个编码中不会用到的电平方式编码,定义帧的起始和终止.比如曼彻斯特编码中同时高高&#x2F;低低</li></ol><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><p>传输中的差错都由噪声引起<br>全局性:线路本身由于电气特性随机产生噪音,固有随机存在,提高信噪比减少或避免干扰<br>局部性:外接短暂原因造成的冲击噪声,是产生差错的主要原因,解决方法:是利用编码技术解决<br>位错:比特位出错,1变为0,0变成1<br>帧错:有丢失,重复,失序三种方式</p><p>对通信质量好的一般使用无确认无连接服务(不使用确认和重传机制),差的选择有确认无连接或有确认面向连接</p><p>冗余码:在数据发送之前,先按某种关系附加上冗余位,构成一个符合某一规则的码字后再发送,当要发送的有效数据变化时,相应的冗余位也变化,使码字不变.接收端根据码字是否符合原规则判断是否出错</p><h4 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h4><p>分为奇校验码和偶校验码(传输信息中1的个数)<br>数据&#x3D;n-1位信息元和一位校验元<br>1100101的奇校验为11001010,偶校验为11001011,其实就是1的数量<br>但是只能检查出奇数个比特错误,如果发生偶数个比特错误则无法校验出,例如<br>1100101变为1111101,同样通过了偶数校验</p><h4 id="CRC循环冗余码"><a href="#CRC循环冗余码" class="headerlink" title="CRC循环冗余码"></a>CRC循环冗余码</h4><img src="/img/网络基础/CRC.png"><img src="/img/网络基础/CRC题目.png">接收端检错过程:把收到的每一个帧除以同样的除数,然后检查余数R1. 余数为零正确2. 余数不为0,错误.丢弃,无法精确定位错误FCS的生成以及接收端CRC校验都是由硬件实现,处理迅速,不会延误数据传输链路层使用CRC检验可以实现无比特差错的传输,但这并不是可靠传输,因为没有接收下所有的数据,错误的数据被丢弃了,未处理<h3 id="纠错控制"><a href="#纠错控制" class="headerlink" title="纠错控制"></a>纠错控制</h3><h4 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h4><p>可以发现错误,定位和纠正,需要冗余码<br>校验码并不一定在尾部</p><h5 id="海明距离"><a href="#海明距离" class="headerlink" title="海明距离"></a>海明距离</h5><p>两个合法编码对应的比特取值不同的比特数为海明距离,一个有效编码集中,任意两个合法编码的海明距离的<strong>最小值</strong>称为该编码集的海明距离<br>如果一个编码集中同时存在000 001 111,那么码距为1,因为取最小值.(000和111的码距是3)<br>移位错误可以被检测,无法被纠正.比如码距为2时0000变为0001<br>此时因为码距变动,所以被检测出.但是1001移位后也可能为0001,无法检测出是哪一位编码发生了移位错误<br>当码距为3时便可以对移位比特错,但是仅能检测1位,2位不行<br>如果海明码需要检测n位错时,检测可以是n+1<br>纠错需要2n+1<br><img src="/img/网络基础/海明不等式.png"><br>要发送的数据为1100时,m&#x3D;4,满足不等式的最小r为3,所以海明码为7位<br>原数据4位,校验码3位,校验码放在序号为2的n次幂的位置上,比如1,2,4,8<br>对于1100需要在1,2,4位放上校验码<br><img src="/img/网络基础/海明校验码.png"><br><img src="/img/网络基础/海明不纠错.png"><br>纠错方法1:取差集<br><img src="/img/网络基础/海明纠错1.png"><br>纠错方法2异或<br><img src="/img/网络基础/海明纠错2.png"></p><h2 id="流量控制与可靠传输机制"><a href="#流量控制与可靠传输机制" class="headerlink" title="流量控制与可靠传输机制"></a>流量控制与可靠传输机制</h2><p>流量控制实为调整发送方与接收方的传输速率,以免接收方过载<br>链路层得流量控制是点对点的,传输层是端到端<br>数据链路层得控制手段:接收端收不下就不回复确认<br>传输层:接收端给发送端一个窗口公告(包含缓冲区剩余大小等)</p><h3 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h3><p>虽然常用全双工通信,但为了方便讨论,仅考虑一方发送数据,一方接收.<br>因为是在讨论传输原理,所以不讨论传送层次<br>每发送完一个帧(或者分组),对方收到后回复确认,发送方再发送下一个帧(分组)<br>停止等待协议一开始属于链路层,后期将交由给了传输层,链路层仅差错控制<br>除了比特出差错,底层信道还可能会丢包(丢失数据包)<br><img src="/img/网络基础/停等无错.png"><br>发完一个帧后会保留副本,收到确认后才销毁<br>数据帧和确认帧必须编号<br><img src="/img/网络基础/停等有错1.png"><br>有时确认帧会丢失<br><img src="/img/网络基础/停等有错2.png"><br>确认帧高时延传输<br><img src="/img/网络基础/停等有错3.png"></p><p>停止等待协议信道利用率过低<br><img src="/img/网络基础/停等信道.png"></p><h3 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h3><p>在发送方保持一个帧的循环(周期)即为一个发送窗口,接收窗口也有相同的接收窗口<br>接收窗确认发送方的起始窗口后返回一个确认帧个发送方<br>停止等待协议发送窗口为1,接收窗口大小为1<br>后退N帧协议大小&gt;1,接收窗口大小&#x3D;1<br>选择重传协议发送&gt;1,接收窗口大小&gt;1<br><img src="/img/网络基础/流量控制协议.png"><br><img src="/img/网络基础/链路传输协议总结.png"></p><h3 id="后退N帧协议"><a href="#后退N帧协议" class="headerlink" title="后退N帧协议"></a>后退N帧协议</h3><p>停等协议最大的问题是发送方发送数据的时间很长,要等到接收后才能再发送<br>发送窗口:发送方维持一组连续的允许发送帧的序号<br>接收窗口:接收方维持一组连续的允许接收帧的序号<br>发送串口可以有N个,接收窗口只有1个<br>发送方短时间内发送一串帧,接收方仅需要发送其中<br>可以累计确认:仅需要发送最后一个接受的确认帧即可(收1-3,确认3)</p><h3 id="GBN协议"><a href="#GBN协议" class="headerlink" title="GBN协议"></a>GBN协议</h3><p>上层的调用:发送前先检查发送窗口是否已满,未满则产生一个帧发送,已满则发送方将数据返回给上层,使上层待会在发送<br>GBN协议中,对n号帧采用累计确认的方式,表明接收方已收到n号帧及它之前的全部帧<br>超时事件,协议的名字也可以是后退n帧,来源于出现丢失和时延过长时发送方的行为.定时器将用于恢复数据或确认帧的丢失.出现超时或乱序,发送方重传所有已发送但未确认的帧<br>当接收方正确收到n号帧(按序),则发送一个确认帧,并将该帧中的数据部分交付给上层<br>其余情况都丢弃帧,并为按序接受的最近的帧发送确认帧,接收方无需缓存任何失序帧,仅需要维护一个信息:expectedseqnum(下一个按序接受的帧序号)</p><h3 id="滑动窗口长度"><a href="#滑动窗口长度" class="headerlink" title="滑动窗口长度"></a>滑动窗口长度</h3><p>若采用n个比特对帧编号,发送窗口尺寸m应<br>1&lt;&#x3D;m&lt;&#x3D;2^n-1,发送窗口尺寸过大时会使得接收方分不清新旧帧优点:提高了信道利用率<br>缺点:重传时正确的帧也被重传,传送效率降低<br>n:和二进制有关,1个比特表示0-1;2个比特表示0-3;3个比特表示0-7</p><h3 id="选择重传-SR-协议"><a href="#选择重传-SR-协议" class="headerlink" title="选择重传(SR)协议"></a>选择重传(SR)协议</h3><p>设置单个帧,同时加大接收窗口,设置接收缓存,缓存乱序到达的帧<br>SR接收方的情况:<br><img src="/img/网络基础/运行中的SR.png"><br>接收方滑动窗口的长度由此可见应该小于2^(n-1),n表示编号用的比特</p><ol><li>对数据帧逐一确认,收一个确认一个</li><li>只重传出错帧</li><li>接收方有缓存</li><li>双方窗口最大值&#x3D;2^(n-1)</li></ol><h2 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h2><p>传输数据使用的两种链路:<br>点对点链路:两个相邻节点仅通过一条链路相连(应用:PPP协议,常用于广域网)<br>广播式链路:所有主机共享通信介质(应用:早期总线以太网,无线局域网,常用于局域网)<br>在广播式链路中,所有设备都可以收到,但是只有指定设备对其进行处理<br>典型拓扑结构:总线型,星型(逻辑总线型)</p><p>介质访问控制:采取一定措施使得两对节点之间的通信不会相互干扰</p><ul><li>静态划分信道:信道划分介质访问控制<ol><li>频分多路复用FDM</li><li>时分多路复用TDM</li><li>波分多路复用WDM</li><li>码分多路复用CDM</li></ol></li><li>动态分配信道:<ol><li>轮询访问介质访问控制 <ol><li>令牌传递协议</li></ol></li><li>随机访问介质访问控制<ol><li>ALOHA协议</li><li>CSMA协议</li><li>CSMA&#x2F;CD协议</li><li>CSMA&#x2F;CA协议</li></ol></li></ol></li></ul><h3 id="信道划分介质访问控制"><a href="#信道划分介质访问控制" class="headerlink" title="信道划分介质访问控制"></a>信道划分介质访问控制</h3><p>将适用介质的每个设备与来自同一信道上其他设备的通信隔离开,把时域和频域资源合理地分配给网络上的设备<br>多路复用技术:<br>把多个信号组合在一条物理信道上进行传输,使得多个计算机或终端设备共享信道资源,提高信道利用率,把一条广播信道逻辑上分成几条用于两个节点间通信的互不干扰的子信道,实际就是把广播信道转变为点对点信道,在数据传输到指定设备后分开传输给相应主机</p><h4 id="频分多路复用FDM"><a href="#频分多路复用FDM" class="headerlink" title="频分多路复用FDM"></a>频分多路复用FDM</h4><p>用户在分配到一定的频带后,在通信过程中自始至终都占用.频分复用的所有用户在同样的时间占用不同的带宽(频段带宽)资源.充分利用了传输介质带宽,系统效率较高.由于技术比较成熟,实现也很容易</p><h4 id="时分多路复用TDM"><a href="#时分多路复用TDM" class="headerlink" title="时分多路复用TDM"></a>时分多路复用TDM</h4><p>和FDM的区别在于将时间划分为一段段等长的时分复用帧(TDM)帧.每一个时分复用的用户在每一个TDM帧中占用固定序号的时隙,所有用户轮流占用信道<br>TDM帧是在物理层传输的比特流划分的帧,标志一个周期<br><img src="/img/网络基础/时分多路复用.gif"></p><h4 id="统计时分复用STDM"><a href="#统计时分复用STDM" class="headerlink" title="统计时分复用STDM"></a>统计时分复用STDM</h4><p>改进后的时分复用,主机并不是时时刻刻都在发送数据,所以时分多路复用可能造成每一个周期内仅有一个主机在发送数据,这台主机也必须在等待三个时间后才可以再次发送<br><img src="/img/网络基础/统计时分复用.png"><br>统计时分复用通过一个接收器来进行发送,每一个STDM帧中的时隙数小于连接在集中器上的用户数,用户有数据就随时发往集中器的输入缓存,集中器按顺序扫描输入缓存并存放入STDM帧中,一个STDM帧满了后再发出.<strong>STDM帧不是固定分配时隙,而是按需动态分配</strong></p><h4 id="波分多路复用WDM"><a href="#波分多路复用WDM" class="headerlink" title="波分多路复用WDM"></a>波分多路复用WDM</h4><p>实际为光的频分多路复用,在光线中传输多种不同波长(频率)的光信号,使其互不干扰.最后再用波长分解复用器分解出来<br><img src="/img/网络基础/波分多路复用.png"></p><h4 id="码分多路复用CDM"><a href="#码分多路复用CDM" class="headerlink" title="码分多路复用CDM"></a>码分多路复用CDM</h4><p>类似波分,仅在终点设备将数据分给对应主机<br>码分多址是码分复用的一种方式<br>1个比特分为多个码片&#x2F;芯片,每一个站点被指定一个唯一的m位的芯片序列,发送1时发送芯片序列(通常把0写为-1)<br><img src="/img/网络基础/码分多路复用.png"></p><h2 id="动态分配信道"><a href="#动态分配信道" class="headerlink" title="动态分配信道"></a>动态分配信道</h2><h3 id="随机访问介质访问控制"><a href="#随机访问介质访问控制" class="headerlink" title="随机访问介质访问控制"></a>随机访问介质访问控制</h3><p>所有用户可随机发送信息,发送时占用全部带宽</p><h4 id="ALOHA协议"><a href="#ALOHA协议" class="headerlink" title="ALOHA协议"></a>ALOHA协议</h4><p>纯ALOHA协议:不监听信道,不按时间槽发送,随机重发.想法就发<br><img src="/img/网络基础/纯ALOHA.png"><br>如果发生冲突,接收方在酒会检测出差错,然后不予确认,发送方在一定时间内收不到确认则判断发生错误,等待一定时间后重传</p><p>时隙ALOHA协议:把时间分为若干个时间片,所有用户在时间片开始时刻同步接入网络通道,若发生冲突,则必须等到下一个时间片开始时刻再发送<br>纯ALOHA比时隙ALOHA吞吐量低,效率也低<br>纯ALOHA想法就发,时隙ALOHA只有在时间片段开始时才能发</p><h4 id="CSMA协议"><a href="#CSMA协议" class="headerlink" title="CSMA协议"></a>CSMA协议</h4><p>CSNA:载波监听多路访问协议<br>CS:载波侦听&#x2F;监听,每一个站在数据发送前要检测总线上是否有其他计算机在发送数据(多个站点同时发送数据时,总线上信号电压摆动值叠加增大.当站检测到电压摆动值超过门限时,认为至少有两个站在同时发送数据,表明产生碰撞,即发生冲突)<br>MA:多点接入,表示许多计算机以多点接入的方式连接在一根总线上<br>协议思想:发送帧之前,监听信道<br>监听结果:</p><ul><li>信道空闲:发送完整帧<ol><li>坚持CSMA</li><li>非坚持CSMA</li><li>p-坚持CSMA</li></ol></li><li>信道忙:推迟发送</li></ul><h5 id="坚持CSMA"><a href="#坚持CSMA" class="headerlink" title="坚持CSMA"></a>坚持CSMA</h5><p>坚持指的是对于监听信道忙之后的坚持<br>坚持CSMA思想:如果一个主机发送信息,则会先监听信道,空闲则直接传输,<strong>忙则一直监听,直到空闲马上传输</strong>.如果有冲突,则等待一个时间再监听,重复上述过程<br>优点:只要媒体空闲,站点就可以马上发送,避免了媒体利用率的损失<br>缺点:如果有两个及以上的站点想要发送数据,则无法避免冲突</p><h5 id="非坚持CSMA"><a href="#非坚持CSMA" class="headerlink" title="非坚持CSMA"></a>非坚持CSMA</h5><p>非坚持指的是对监听信道忙之后不继续监听<br>非坚持CSMA思想:如果一个主机要发送信息,先监听信道.空闲直接传输,忙则等待一个随机的事件后再进行监听<br>优点:随机的重发延迟时间可以减少冲突发生的可能性<br>缺点:可能大家都在延迟等待过程中,媒体处于空闲状态,实用率降低</p><h5 id="p-坚持CSMA"><a href="#p-坚持CSMA" class="headerlink" title="p-坚持CSMA"></a>p-坚持CSMA</h5><p>p是针对信道空闲时的处理方式<br>发送前监听<br>空闲则以概率p来发送,否则则持续到下一个时隙<br>空闲以概率p之间传输,1-p等待到下一个时间槽再传输<br>忙则持续监听到空闲再以概率p发送,冲突则等到下一个时间槽监听并重复<br>优点:既能向非坚持算法一样减少冲突,又能像坚持算法那样减少媒体空闲时间<br>缺点:发生冲突后还是将数据帧发送完,造成了浪费<br><img src="/img/网络基础/对比总结.png"></p><h4 id="CSMA-x2F-CD协议"><a href="#CSMA-x2F-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a>CSMA&#x2F;CD协议</h4><p>边发送数据边检测信道,冲突则暂时暂停<br>CS:载波监听&#x2F;监听,每一个站在发送前和发送时检测总线上是否有其他计算机在发送数据<br>MA:多点接入,表示许多计算机以多点接入方式连接在一根总线上,总线型网络<br>CD:碰撞检测(冲突检测):边发送边监听,适配器边发送数据检测信道上信号电压的变化情况,一遍判断自己发送数据时其他站点是否也在发送数据(半双工网络)<br>电磁波传输速率有限,在检测时可能没有数据传输,发送时有数据传输,然后造成冲突<br>上述状况发生时后发送数据的一方会先检测到碰撞(得到了对方的混合信号)<br>检测到发生碰撞的时间最长是2x单程端到端传播时延-n(n趋近于0)</p><p>如何确认碰撞后的重传时机?<br>截断二进制指数退避算法:</p><ol><li>确定基本退避(推迟)时间为征用期2t</li><li>定义参数k等于重传次数,但不超过10,大于10时&#x3D;10</li><li>从离散的整数集合中随机取出一个数r(0,1,2,2^k -1),重传所需要的时间就是r倍的基本退避时间,即2tr</li><li>当重传16此仍不成功,抛弃并报告出错</li></ol><p>最小帧长:<br>帧的传输时延至少要两倍于信号在总线中的传播时延<br>最小帧长&#x3D;总线传输时延x数据传输时延x2<br><img src="/img/网络基础/最小帧长.png"><br>以太网规定最短为64B帧长,小于64B则补充道64B</p><h4 id="CSMA-x2F-CA协议"><a href="#CSMA-x2F-CA协议" class="headerlink" title="CSMA&#x2F;CA协议"></a>CSMA&#x2F;CA协议</h4><p>CSMA&#x2F;CA:载波监听多点接入&#x2F;碰撞避免<br>为什么要有这个协议?<br>CA适用于无线局域网当中,CD适用于以太网,对于不同的传输介质应当使用不同协议<br>无线局域网无法做到360°碰撞检测<br>隐蔽站:当A和C都检测不到信号,认为信道空闲时,同时向终端B发送数据帧,就会导致冲突</p><p>工作原理:<br>发送前检测信道是否空闲:<br>空闲则发出RTS,RTS包括发送端地址,接收端地址,下一份数据将持续发送的时间等信息;信道忙则等待<br>接收端收到RTS后,将响应CTS(clear to send)<br>发送端收到CTS后,开始发送数据帧(同时预约信道:发送方告知其他站点自己要传多久数据)<br>接收端收到数据帧后,将用CRC来检验数据是否正确,正确则相应ACK帧<br>发送方收到ACK帧就可以进行下一个数据帧的发送,若没有则一直重传到规定重发次数为止(采用二进制退避算法确定随机的推迟时间)</p><ol><li>预约信道</li><li>ACK帧</li><li>RTS&#x2F;CTS帧(相互对应,可选)</li></ol><p>和CD的不同点:</p><ol><li>传输介质不同</li><li>载波检测方式不同,CD检测电压摆动值,CA采用能量检测,载波检测和能量载波混合检测三种方式检测信道空闲</li><li>CSMA&#x2F;CD检测冲突,CSMA&#x2F;CA避免冲突,二者出现冲突后都会进行有上限的重传</li></ol><h2 id="轮询访问介质控制"><a href="#轮询访问介质控制" class="headerlink" title="轮询访问介质控制"></a>轮询访问介质控制</h2><h3 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h3><p>信道划分介质访问控制(MAC Multiple Access Control)协议:<br>    基于多路复用技术划分资源<br>    网络负载重:共享信道效率高,且公平<br>    网络负载轻:共享信道效率低<br>随机访问MAC协议:<strong>←←←←←仅此发生冲突</strong><br>    用户根据意愿随机发送信息,发送信息时可独占信道带宽<br>    网络负载重:产生冲突开销(开销指被废弃的数据)<br>    网络负载轻:共享信道效率高,单个节点可利用全部信道带宽<br>轮询访问MAC协议&#x2F;轮流协议&#x2F;轮转访问MAC协议:<br>    <strong>既要不产生冲突,又要发送时占用全部带宽</strong></p><h4 id="轮询协议"><a href="#轮询协议" class="headerlink" title="轮询协议"></a>轮询协议</h4><p>主节点轮流”邀请”从属节点发送数据<br>问题:</p><ol><li>轮询开销</li><li>等待延迟(即使不发送也要问)</li><li>单点故障(父节点故障后子节点无法发送)</li></ol><h4 id="令牌传递协议"><a href="#令牌传递协议" class="headerlink" title="令牌传递协议"></a>令牌传递协议</h4><p>逻辑上是环形网状架构,物理上是星型<br>TCU转发器可以数据帧的传递提供转发作用<br><img src="/img/网络基础/令牌传递协议.png"><br>令牌:一个特殊格式的MAC控制帧,不包含任何信息<br>控制信道的使用,确保同一时刻只有一个节点独占信道<br>令牌环网无碰撞<br>在令牌后方增添数据帧,然后令牌在结构内轮转到指定信宿主机.令牌闲置后再传递给其他主机,再次沿信道传递.<br>每个节点只能在一定的时间内拥有发送数据的权利,并不是无限制持有<br>问题:</p><ol><li>令牌开销</li><li>等待延迟(令牌轮不到自己)</li><li>单点故障(可能造成断路)<br>应用于令牌环网(物理星型拓扑,逻辑环形拓扑)<br>采用令牌传送方式的网络常用于负载重,通信量大的网络中</li></ol><h2 id="局域网基本概念和体系结构"><a href="#局域网基本概念和体系结构" class="headerlink" title="局域网基本概念和体系结构"></a>局域网基本概念和体系结构</h2><p>局域网:LAN,是指某一区域内由多台计算机互联成的计算机组,使用广播信道<br>特点:</p><ol><li>覆盖地理范围小,只在相对独立的局部范围内联,如一座或集中的建筑群内</li><li>使用专门铺设的传输介质(双绞线,同轴电缆)进行联网,数据传输率高(10Mb&#x2F;s-10Gb&#x2F;s)</li><li>通信延迟时间短</li><li>各站关系平等,共享传输信道</li><li>多采用分布式控制和广播式通信,能进行广播和组播</li></ol><p>决定局域网的主要要素为:网络拓扑,传输介质和介质访问控制方法<br><img src="/img/网络基础/局域网常见拓扑结构.png"></p><h3 id="局域网传输介质"><a href="#局域网传输介质" class="headerlink" title="局域网传输介质"></a>局域网传输介质</h3><p>有线常用:双绞线,同轴电缆,光纤<br>无线常用:电磁波</p><h3 id="局域网介质访问控制方法"><a href="#局域网介质访问控制方法" class="headerlink" title="局域网介质访问控制方法"></a>局域网介质访问控制方法</h3><ol><li>CSMA&#x2F;CD 常用于总线型局域网,也用于树形网络</li><li>令牌总线 常用于总线型局域网,也用于树形网络;将总线型或树形网络中各个工作站按一定顺序排列成一个逻辑环.只有令牌持有者才能控制总线,拥有发送信息的权利</li><li>令牌环 常用于环形局域网,如令牌环网</li></ol><h3 id="局域网的分类"><a href="#局域网的分类" class="headerlink" title="局域网的分类"></a>局域网的分类</h3><ol><li>以太网 应用最广泛的局域网,包括标准(10Mbps)&#x2F;快速(100Mps)&#x2F;千兆(1000Mbps)和10G以太网</li><li>令牌环网 物理上采用了星型拓扑结构,逻辑上是环形拓扑结构.”食之无味,弃之可惜”,等待淘汰</li><li>FDDI网(Fiber Distributed Interface) 物理上采用双环拓扑结构,逻辑上是环形拓扑结构</li><li>ATM网(Asynchronous Transfer Mode) 较新型的单元交换技术,使用53字节固定长度的单元进行交换</li><li>无线局域网(Wireless Local Area Network;WLAN) 采用<strong>IEEE 802.110</strong>标准</li></ol><h3 id="IEEE802标准"><a href="#IEEE802标准" class="headerlink" title="IEEE802标准"></a>IEEE802标准</h3><p>IEEE 802系列标准是由IEEE 802 LAN&#x2F;MAN 标准委员会指定的局域网,城域网技术标准(1980年2月成立).其中最广泛使用的有以太网,令牌环,无线局域网等.这一系列标准中的每一个子标准都由委员会中的一个专门工作组负责</p><h3 id="MAC子层和LLC子层"><a href="#MAC子层和LLC子层" class="headerlink" title="MAC子层和LLC子层"></a>MAC子层和LLC子层</h3><p>IEEE 802标准所描述的局域网参考模型只对应OSI参考模型的数据链路层与物理层,它将数据链路层划分为逻辑链路层LLC子层和介质访问控制MAC子层<br><img src="/img/网络基础/MAC和LLC.png"></p><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><p>以太网指的是由Xerox公司创建并由Xerox,Intel和DEC公司联合开发的基带总线局域网规范,是当今现有局域网采用的最通用的通信协议标准.以太网络使用CSMA&#x2F;CD(载波监听多路访问及冲突检测)技术</p><ol><li>造价低廉</li><li>应用最广泛的局域网技术</li><li>比令牌环网,ATM网便宜,简单</li><li>满足网络速率要求:10Mb&#x2F;s-10Gb&#x2F;s<br>以太网的两个标准:<br>DIX Ethernet V2:第一个局域网产品(以太网)规约<br>IEEE 802.3:IEEE 802委员会802.3工作组制定的第一个IEEE的以太网标准.(帧格式有一点改动)</li></ol><h3 id="以太网提供无连接-不可靠的服务"><a href="#以太网提供无连接-不可靠的服务" class="headerlink" title="以太网提供无连接,不可靠的服务"></a>以太网提供无连接,不可靠的服务</h3><p>无连接:发送方和接收方之间无”握手过程”.<br>不可靠:不对发送方的数据帧编号,接收方不向发送方进行确认,差错帧直接丢弃,差错纠错由高层负责<br>以太网只实现无差错接收,不实现可靠传输</p><h3 id="以太网传输介质与拓扑结构的发展"><a href="#以太网传输介质与拓扑结构的发展" class="headerlink" title="以太网传输介质与拓扑结构的发展"></a>以太网传输介质与拓扑结构的发展</h3><p>粗同轴电缆→细同轴电缆→双绞线+集线器<br>物理拓扑 总线型→星型</p><p>使用集线器的以太网在逻辑上仍是一个总线网<br>各站共享逻辑上的总线,使用的还是CSMA&#x2F;CD</p><p>以太网拓扑:逻辑上总线,物理上星型</p><h3 id="10BASE-T以太网"><a href="#10BASE-T以太网" class="headerlink" title="10BASE-T以太网"></a>10BASE-T以太网</h3><p>10BASE-T是传送基带信号的双绞线以太网,T表示采用双绞线,现10BASE-Y采用的是无屏蔽双绞线(UTP),传输速率是10Mb&#x2F;s<br>物理上采用星型拓扑,逻辑上总线,每段双绞线最长为100m<br>采用曼彻斯特编码<br>采用CSMA&#x2F;CD(载波监听多路访问&#x2F;冲突避免)介质访问控制</p><h3 id="适配器与MAC地址"><a href="#适配器与MAC地址" class="headerlink" title="适配器与MAC地址"></a>适配器与MAC地址</h3><p>计算机与外界有局域网的连接是通过通信适配器的<br>网络接口板<br>网络接口卡NIC<br>NOW,不再使用单独网卡<br>适配器上装有处理器和存储器(包括RAM和ROM)<br>ROM上有计算机硬件地址MAC地址<br>在局域网中,硬件地址又称为物理地址或MAC地址(实际为标识符)<br>MAC地址:48位唯一的2进制地址,前24位代表厂家,后24位由厂家自己指定.常用6个16进制数表示,如02-60-8c-e4-b1-21</p><h3 id="以太网MAC帧"><a href="#以太网MAC帧" class="headerlink" title="以太网MAC帧"></a>以太网MAC帧</h3><p>最常用的MAC帧是以太网v2的格式<br><img src="/img/网络基础/以太网MAC帧的组成.png"><br>与IEEE 802.3的区别:</p><ol><li>第三个字段是长度&#x2F;类型</li><li>当长度&#x2F;类型字段值小于0x600时,数据字段必须装入LLC子层</li></ol><h3 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h3><ol><li>100BASE-T以太网<br>在双绞线上传送100Mb&#x2F;s基带信号的星型拓扑以太网,仍使用IEEE802.3的CSMA&#x2F;CD协议<br>支持全双工和半双工,可在全双工方式下工作而无冲突</li><li>吉比特以太网<br>在光纤或双绞线上传送1Gb&#x2F;s信号<br>支持全双工和半双工,可在全双工方式下工作而无冲突</li><li>10吉比特<br>10吉比特以太网在光纤上传输10Gb&#x2F;s信号<br>只支持全双工,无争用问题</li></ol><h3 id="IEEE-802-11标准"><a href="#IEEE-802-11标准" class="headerlink" title="IEEE 802.11标准"></a>IEEE 802.11标准</h3><p>是无线局域网通用的标准,是由IEEE所定义的无线网络通信的标准</p><h4 id="802-11的MAC帧头格式"><a href="#802-11的MAC帧头格式" class="headerlink" title="802.11的MAC帧头格式"></a>802.11的MAC帧头格式</h4><img src="/img/网络基础/802.11MAC帧头格式.png">地址1:RA 接收端地址2:TA 发送端地址3:DA 目的地址地址4:SA 源地址<h2 id="VLAN基本概念与原理"><a href="#VLAN基本概念与原理" class="headerlink" title="VLAN基本概念与原理"></a>VLAN基本概念与原理</h2><h3 id="传统局域网的局限"><a href="#传统局域网的局限" class="headerlink" title="传统局域网的局限"></a>传统局域网的局限</h3><ul><li>缺乏流量隔离:即使把组流量局域划到一个单一交换机中,广播流量仍会跨越整个机构网络(ARP,RIP,DHCP协议)</li><li>管理用户不便:如果一个主机在不同组间移动,必须改变物理布线,连接到新的交换机上</li><li>路由器成本较高:局域网内使用很多路由器花销较大</li></ul><p>虚拟局域网VLAN是一种将局域网内的设备划分成与<strong>物理位置无关</strong>的技术,这些逻辑组有某些共同的需求.每个VLAN是一个单独的广播域&#x2F;不同的子网</p><h3 id="VLAN实现"><a href="#VLAN实现" class="headerlink" title="VLAN实现"></a>VLAN实现</h3><ul><li>交换机上生成的各VLAN互不想通,若想实现通信,需要借助:</li></ul><ol><li>路由器</li><li>三层交换机</li></ol><p>VLAN有基于接口地址&#x2F;MAC地址两种实现方式</p><h3 id="VLAN实现-IEEE-802-1Q帧"><a href="#VLAN实现-IEEE-802-1Q帧" class="headerlink" title="VLAN实现-IEEE 802.1Q帧"></a>VLAN实现-IEEE 802.1Q帧</h3><p>VLAN标记的前两个字节表明是IEEE 802.1Q帧,接下来4位没用,后面12位是VLAN标识符VID,唯一表示了该以太网属于哪个VLAN<br>VID的取值为0-4095,但0和4095不用来表示VLAN,所以有效VID为1-4094<br>IEEE 802.1Q帧是由交换机来处理的,而不是由用户主机来处理的(即主机和交换机之间只交换普通的以太网帧)<br><img src="/img/网络基础/IEEE_802.1Q帧.png"></p><p>虚拟局域网是建立在局域网交换技术基础上的<br>虚拟局域网可以将局域网上的节点划分为若干个逻辑工作组,那么一个逻辑工作组就是一个虚拟网络<br>逻辑工作组的节点组成可以不受物理位置的限制<br>虚拟网络建立在网络交换机之上,它以硬件方式来实现逻辑工作组的划分与管理</p><h2 id="广域网及相关协议"><a href="#广域网及相关协议" class="headerlink" title="广域网及相关协议"></a>广域网及相关协议</h2><p>广域网:通常跨接很大的物理范围,从几十公里到几千公里,能连接城市或国家,甚至横跨几个州,形成国际性的远程网络<br>通信子网使用分组交换技术.广域网的通信子网可以利用公用分组交换网,卫星通信网和无线分组交换网,它将分布在不同地区的局域网或计算机系统互联,达到资源共享的目的,如因特网就是世界范围内最大的广域网<br><img src="/img/网络基础/广域网.png"></p><h3 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h3><p>Point-to-Point Protocol 点对点协议,支持全双工线路,拨号上网一般都使用ppp协议<br>要求:</p><ol><li>简单 对于链路层得帧,无需纠错,无需序号,无需流量控制</li><li>封装成帧 帧定界符</li><li>透明传输 与帧定界符一样比特组合的数据应该如何处理;异步线路用字节填充,同步线路用比特填充</li><li>多种网络层协议 封装的IP数据报可以采用多种协议</li><li>多种类型链路 串行&#x2F;并行 ,同步&#x2F;异步,点&#x2F;光</li><li>差错检测 错就丢弃</li><li>检测连接状态 检测链路是否正常工作</li><li>最大传送单元 数据部分最大长度MTU</li><li>网络层地址协商 知道通信双方的网络层地址</li><li>数据压缩协商</li></ol><p>无需满足的要求:</p><ol><li>无需纠错</li><li>流量控制</li><li>序号</li><li>不支持多点线路(仅点对点)</li></ol><h4 id="PPP协议的三个组成部分"><a href="#PPP协议的三个组成部分" class="headerlink" title="PPP协议的三个组成部分"></a>PPP协议的三个组成部分</h4><ol><li>一个将ip数据报封装到串行链路(同步&#x2F;异步串行)的方法</li><li>链路控制协议LCP:建立并维护数据链路连接(身份验证)</li><li>网络控制协议NCP:PPP可支持多种网络层协议,每个不同的网络层协议都要一个相应的NCP来配置,为网络层协议建立和配置逻辑连接.</li></ol><h4 id="PPP协议的工作状态图"><a href="#PPP协议的工作状态图" class="headerlink" title="PPP协议的工作状态图"></a>PPP协议的工作状态图</h4><img src="/img/网络基础/PPP协议状态.png"><h4 id="PPP协议的帧格式"><a href="#PPP协议的帧格式" class="headerlink" title="PPP协议的帧格式"></a>PPP协议的帧格式</h4><img src="/img/网络基础/PPP协议的帧.png"><img src="/img/网络基础/PPP协议的帧格式1.png"><h2 id="链路层设备"><a href="#链路层设备" class="headerlink" title="链路层设备"></a>链路层设备</h2><h3 id="物理层扩展以太网"><a href="#物理层扩展以太网" class="headerlink" title="物理层扩展以太网"></a>物理层扩展以太网</h3><p>集线器与主机之间一般不能超过100m,否则严重失真<br>方法1:使用光纤调制解调器,光纤的传播距离足够远<br>方法2:用多个集线器将主机连接,每一个集线器所在的域为冲突域(仅能有一台主机通信),然后再使用一台主干集线器连接所有集线器(还是冲突域,效率更低了)</p><h4 id="网桥-amp-交换机"><a href="#网桥-amp-交换机" class="headerlink" title="网桥&amp;交换机"></a>网桥&amp;交换机</h4><p>网桥根据MAC帧的目的地址对帧进行转发和过滤.当网桥收到一个帧时,并不向所有接口转发此帧,而是先检查此帧的目的MAC地址,然后再确认将该帧转发到哪一个接口或者丢弃(过滤)<br><img src="/img/网络基础/网桥.png"><br><img src="/img/网络基础/网桥2.png"><br>网桥优点:</p><ol><li>过滤通信量,增大吞吐量</li><li>扩大了物理范围</li><li>提高了可靠性</li><li>可互连不同物理层,不同MAC子层和不同速率的以太网</li></ol><h4 id="网桥分类–透明网桥"><a href="#网桥分类–透明网桥" class="headerlink" title="网桥分类–透明网桥"></a>网桥分类–透明网桥</h4><p>透明网桥:”透明”是指以太网上的站点并不知道所发送的帧将经过哪几个网桥,是一种即插即用设备(自学习)<br>自学习:自带一个转发表,在介入后会自动填写转发表<br>因为并不知道接口的网络拓扑结构,所以需要转发表进行自学习<br><img src="/img/网络基础/转发表.png"><br>转发表每隔几分钟就会更新一次,清空原有的转发表</p><h4 id="网桥分类–源路由网桥"><a href="#网桥分类–源路由网桥" class="headerlink" title="网桥分类–源路由网桥"></a>网桥分类–源路由网桥</h4><p>源路由网桥:在发送帧时,把详细的最佳路由信息(路由最少&#x2F;时间最短)放在帧的首部中<br>方法:源站以广播方式向域通信的目的地发送一个发现帧<br>发现帧:以广播方式从源站发送到目的站,路径不定,有很多条.目的站每收到一个发现帧后会都返回一个响应帧.路由最少&#x2F;时间最短的信息会成为最佳路由信息</p><h4 id="多接口网桥–以太网交换机"><a href="#多接口网桥–以太网交换机" class="headerlink" title="多接口网桥–以太网交换机"></a>多接口网桥–以太网交换机</h4><p>以太网交换机独占传输媒体带宽,所以冲突域可以占满媒体带宽</p><h3 id="以太网交换机的两种交换方式"><a href="#以太网交换机的两种交换方式" class="headerlink" title="以太网交换机的两种交换方式"></a>以太网交换机的两种交换方式</h3><p>直通式交换机:查完目的地址(6B)就立即转发,延迟小,可靠性低,无法支持具有不同速率的端口的交换<br>存储转发式交换机:将帧放入高速缓存,并检查是否正确,正确则转发,错误则丢弃.<br>延迟大,可靠性高,可以支持具有不同速率的端口的交换<br>交换机的自学习功能和网桥极其相似,也有转发表</p><h3 id="冲突域和广播域"><a href="#冲突域和广播域" class="headerlink" title="冲突域和广播域"></a>冲突域和广播域</h3><img src="/img/网络基础/冲突域和广播域.png"><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>主要任务是把分组从源段传到目的端,为分组交换网上的不同主机提供通信服务.网络层传输单位是数据报.<br>功能一:路由选择与分组转发 最佳路径<br>功能二:异构网络互联 依靠路由器使不同的网络相连<br>功能三:拥塞控制 若所有节点都来不及接受分组,而要丢弃大量分组,网络就处于拥塞状态.因此要采取一定措施缓解这种状态<br>WAY1:开环控制 静态(预先考虑所有状况)<br>WAY2:闭环控制 动态(动态调整)</p><h2 id="路由器功能"><a href="#路由器功能" class="headerlink" title="路由器功能"></a>路由器功能</h2><h3 id="转发-amp-路由选择"><a href="#转发-amp-路由选择" class="headerlink" title="转发&amp;路由选择"></a>转发&amp;路由选择</h3><p>转发:达到路由器输入链路之一的数据报转发到该路由器的输出链路之一<br>↑时间短,通常由硬件解决<br>路由选择:控制数据报沿着源主机到目的主机的端到端路径中路由器之间的路由方式<br>↑时间长,通常软件解决</p><p>数据平面(分组如何从一个端口转发出去到另一个端口之中):<br>数据平面对于数据处理过程中各种具体处理转发过程.<br>控制平面(控制路由选择):<br>控制平面用于控制和管理网络协议的运行,比如OSPF,RIP协议,BGP协议</p><h4 id="数据平面"><a href="#数据平面" class="headerlink" title="数据平面"></a>数据平面</h4><p>根据转发表进行转发,这是路由器的本地动作<br>路由表:子网掩码,端口等数据<br><img src="/img/网络基础/数据平面.png"></p><h4 id="控制平面"><a href="#控制平面" class="headerlink" title="控制平面"></a>控制平面</h4><p>传统方法:路由选择算法运行在每台路由器中,并且在每台路由器中都包含转发和路由选择两种功能<br>具体方法:在一台路由器中的路由选择算法和其他路由器的选择算法通信(通过交换路由选择报文),计算出路由表和转发表<br><img src="/img/网络基础/控制平面.png"></p><h5 id="控制平面SDN方法"><a href="#控制平面SDN方法" class="headerlink" title="控制平面SDN方法"></a>控制平面SDN方法</h5><p>是目前流行的方法<br>传统方法:控制平面从路由器物理上奋力.路由器仅实现转发,远程控制器计算和分发转发表供每台路由器所使用<br>具体方法:路由器通过包含转发表和其他路由选择信息的报文与远程控制器通信.因为计算转发并与路由器交互的控制器是由软件实现的,所以网络是”软件定义的”.<br><img src="/img/网络基础/控制面板SDN.png"><br>远程控制的好处在于可以人工编码控制转发表</p><h5 id="控制平面中的路由选择处理器"><a href="#控制平面中的路由选择处理器" class="headerlink" title="控制平面中的路由选择处理器"></a>控制平面中的路由选择处理器</h5><p>传统方法:路由选择器执行控制平面功能.在传统的路由器中,它执行路由器选择协议,维护路由选择表关于关联链路状态信息,并为该路由器计算转发表<br>SDN方法:在SDN路由器中,路由选择处理器负责于远程控制器融信,目的是接受远程控制器计算的转发表项</p><h4 id="SDN控制平面"><a href="#SDN控制平面" class="headerlink" title="SDN控制平面"></a>SDN控制平面</h4><ol><li>SDN控制器:维护准确的网络状态信息(远程链路,交换机和主机的状态);为运行在控制平面中的网络控制应用程序提供这些信息(逻辑集中,在多台服务器上实现)</li><li>网络控制应用程序:根据SDN控制器提供的方法,这些应用程序通过这些方法能够监视,编程和控制下面的网络设备</li></ol><h5 id="SDN控制器的三个层次"><a href="#SDN控制器的三个层次" class="headerlink" title="SDN控制器的三个层次"></a>SDN控制器的三个层次</h5><p>对于网络控制应用程序的接口:<br>SDN控制器通过”北向接口”与网络控制应用程序交互.该API允许网络控制应用程序在状态管理层之间读取网络状态</p><p>网络范围状态管理层:<br>由SDN控制平面做出的最终控制决定,将要求控制器具有相关网络的主机,链路等最新状态信息,在这些信息的基础上实现路由选择协议,并通知给控制器落地执行</p><p>通信层:<br>SDN控制器与受控网络设备之间的通信(OpenFlow协议),包含”南向接口”<br><img src="/img/网络基础/SDN控制器的三个层次.png"></p><h2 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h2><img src="/img/网络基础/路由器表.png">最佳路由:"最佳"只能是相对于某一种特定要求下得出的较为合理的选择而已<h3 id="路由算法的分类"><a href="#路由算法的分类" class="headerlink" title="路由算法的分类"></a>路由算法的分类</h3><p>路由算法:</p><ul><li>动态路由算法(非自适应路由算法):管理员手工配置路由信息<ul><li>优点:简便可靠,在负荷稳定,拓扑变化不大的网络中运行效果很好,广泛用于高度安全性的军事网络和较小的商业网络</li><li>缺点:路由更新慢,不适合大型网络</li></ul></li><li>动态路由算法(自适应路由算法):路由器之间彼此交换信息,按照路由算法优化出路由表项<ul><li>优点:路由更新快,适用大型网络.及时响应链路费用或网络拓扑变化</li><li>缺点:算法复杂,增加网络负担</li></ul></li></ul><p>动态路由算法:</p><ul><li>全局性:链路状态算法路由 OSPF<ul><li>优点:所有路由器掌握完整的网络拓扑和链路费用信息</li></ul></li><li>分散性:距离向量路由算法 RIP<ul><li>路由器只掌握物理相连的邻居及链路费用</li></ul></li></ul><h3 id="分层次的路由选择协议"><a href="#分层次的路由选择协议" class="headerlink" title="分层次的路由选择协议"></a>分层次的路由选择协议</h3><ol><li>因特网规模很大</li><li>许多单位不希望外界知道自己的路由选择协议,但仍想连入因特网</li></ol><p>因此,产生了自治系统<br>自治系统AS:在单一的技术管理下的一组路由器,而这些路由器使用一种AS内部的路由选择协议和共同的度量以确定分组在该AS内的路由,同时还使用一种AS之间的路由协议以确定在AS之间的路由.<br>一个AS内的所有网络都属于一个行政单位来管辖,一个自治系统的所有路由器在本自治系统内必须联通</p><ul><li>路由选择协议<ul><li>内部网关协议IGP 一个AS内使用的 RIP OSPF</li><li>外部网关协议EGP AS之间使用的BGP<img src="/img/网络基础/路由协议.png"></li></ul></li></ul><h2 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h2><h3 id="TCP-x2F-IP协议栈"><a href="#TCP-x2F-IP协议栈" class="headerlink" title="TCP&#x2F;IP协议栈"></a>TCP&#x2F;IP协议栈</h3><img src="/img/网络基础/IP数据报组成.png">固定部分是一段固定字节大小的数据(20字节)<img src="/img/网络基础/IP数据报格式1.png">版本:ipv4/ipv6首部长度:单位是<strong>4B</strong>,最小为5区分服务:指示期望获得哪种类型的服务总长度:首部+数据,单位是<strong>1B</strong>生存时间(TTL):IP分组的保质期.经过一个路由器-1,变成0时丢弃.防止无法交付的数据变为"电子幽灵"一直存在,也可以避免传输距离过长的数据持续占用资源协议:数据部分的协议<img src="/img/网络基础/协议的字段值.png">首部检验和:只检验首部源IP地址和目的IP地址:32位可选字段:0-40B,用于支持排错,测量以及安全等措施填充:全是0,把首部补全成4B的整数倍<h3 id="IP数据报分片过程"><a href="#IP数据报分片过程" class="headerlink" title="IP数据报分片过程"></a>IP数据报分片过程</h3><h4 id="最大传送单元MTU"><a href="#最大传送单元MTU" class="headerlink" title="最大传送单元MTU"></a>最大传送单元MTU</h4><p>链路层数据帧可封装数据的上现<br>以太网的MTU是1500字节<br><img src="/img/网络基础/MTU.png"><br>IP分组形成了数据帧的数据部分,叫做MTU<br>当所传送的数据超过某链路的MTU值时就需要分片<br><strong>此段结合数据报格式图</strong><br>标识:同一数据报的分片使用统一的标识</p><p>标志:只有两位有意义x _ _<br>中间位DF(Dont’t Fragment)<br>    DF&#x3D;1,禁止分片<br>    DF&#x3D;0,允许分片<br>最低位MF(More Fragment)<br>    MF&#x3D;1,后面”还有分片”<br>    MF&#x3D;0,代表最后一片&#x2F;没分片</p><p>片偏移:指出较长分组分片后,某片在原分组中的相对位置,以<strong>8B</strong>为单位(除了最后一个分片,每个分配长度一定是8B的整数倍)</p><h4 id="IP数据报分片例题"><a href="#IP数据报分片例题" class="headerlink" title="IP数据报分片例题"></a>IP数据报分片例题</h4><p>首部(20B) 数据部分(3800B) 需要分片长度不超过1420B的数据报片<br><img src="/img/网络基础/IP数据报分片例题.png"><br>首部在此时分为3个部分<br>首部1(20B)+数据部分(1400B)<br>首部2(20B)+数据部分(1400B)<br>首部3(20B)+数据部分(1000B)</p><p>首部1的数据部分从原数据的0开始,1399B结束<br>首部2的数据部分从原数据的1400B开始,2799B结束<br>首部3的数据部分从原数据的2800B开始,3799B结束</p><p>偏移量计算:该片开头所对应的原数据位置除8<br>首部2的偏移量:1400B&#x2F;8&#x3D;175<br>首部3的偏移量:2800B&#x2F;8&#x3D;350<br>更多数据:<br><img src="/img/网络基础/IP数据报分片例题2.png"><br>中间位DF(Dont’t Fragment)<br>    DF&#x3D;1,禁止分片<br>    DF&#x3D;0,允许分片<br>最低位MF(More Fragment)<br>    MF&#x3D;1,后面”还有分片”<br>    MF&#x3D;0,代表最后一片&#x2F;没分片</p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>全球唯一化的表示主机接口和路由器接口,每一台设备都有自己的IP地址</p><h3 id="IP编址的历史阶段"><a href="#IP编址的历史阶段" class="headerlink" title="IP编址的历史阶段"></a>IP编址的历史阶段</h3><ol><li>分类的IP地址</li><li>子网的划分</li><li>构成超网(无分类编制方法)</li></ol><h4 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h4><p>IP地址:全世界唯一的32位&#x2F;4字节标识符,表示路由器主机的接口<br>IP地址::&#x3D;{&lt;网络号&gt;,&lt;主机号&gt;}<br>例如:11011111 00000001 00000001 00000001 &#x3D; 223.1.1.1<br>这种缩进方式被称为点分十进制<br><img src="/img/网络基础/IP地址结构图.png"><br>网桥不能分隔广播域,所以LAN3内仍然是一个局域网<br><img src="/img/网络基础/IP地址的分类.png"><br>部分IP地址是不可直接使用的<br><img src="/img/网络基础/特殊IP地址.png"><br>localhost 它并不是IP，而是一种特殊的域名（没有后缀），默认的情况下它解析到的是本地IP（127.0.0.1），主要通过本机的host文件进行管理，如果你愿意，也可以把localhost域名解析到某个公网IP上去。</p><p>127.0.0.1它是一个私有IP，代表的就是你的本机环回地址，其实本质上是绑定在虚拟网卡（loopback）上的IP。<br>1、localhost和127.0.0.1并不需要联网访问，即使在无网络环境下访问这两者都能找到本机；<br>2、localhost是域名，默认是指向127.0.0.1的；<br>3、本机IP中的有线网IP和无线网IP都是需要联网后才能正常分配和访问的，它们是本机对外开放的IP地址。</p><h4 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h4><p>路由器对目的地址是私有IP地址的数据报不进行转发<br><img src="/img/网络基础/私有IP地址.png"><br><a href="https://www.cnblogs.com/zhezh/p/3773431.html" title="网段计算">点此网段计算详解</a><br><img src="/img/网络基础/IP类计算.png"><br>因为全0和全1都不可用,所以网络数和主机数需要-2</p><h4 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h4><p>在专用网连接到因特网的路由器上安装NAT软件,安装了NAT软件的路由器叫NAT路由器,它至少有一个有效的外部全球IP地址<br><img src="./网络基础/NAT转换"></p><h2 id="子网掩码与子网划分"><a href="#子网掩码与子网划分" class="headerlink" title="子网掩码与子网划分"></a>子网掩码与子网划分</h2><p>分类的IP地址的弱点:</p><ol><li>IP地址空间的利用率有时很低</li><li>两级IP地址不够灵活</li></ol><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><img src="/img/网络基础/子网划分.png">划分子网后,对外表现仍为一个网络,本单位外的网络看不见本单位内子网的划分子网号一般不能全0/1三级IP地址的主机号不能全0/1<img src="/img/网络基础/子网划分1.png"><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p>二级IP地址中对应子网号的部分全写1,主机号0即可<br>使用八位二进制数表示<br>子网掩码与IP地址逐位相与,就可以得到子网网络地址<br><img src="/img/网络基础/子网掩码.png"><br>逐位相与:将数字转化为二进制数,对位相等保留,对位不等&#x3D;0,比如:<br>11000000<br>01001000<br>逐位相与后得到01001000&#x3D;72<br>广播分组&#x3D;广播地址&#x3D;主机号全1</p><h4 id="使用子网时的分组转发"><a href="#使用子网时的分组转发" class="headerlink" title="使用子网时的分组转发"></a>使用子网时的分组转发</h4><p>路由表中:</p><ol><li>目的网络地址</li><li>目的网络子网掩码</li><li>下一跳地址</li></ol><p>路由器转发分组的算法</p><ol><li>提取目的IP地址</li><li>是否直接交付</li><li>特定主机路由(路由表中的特殊IP地址)</li><li>检测路由表中有无路径</li><li>默认路由0.0.0.0(前几步都失败;将分组转发给其他路由)</li><li>丢弃,报告转发分组出错</li></ol><h2 id="无分类编址CIDR"><a href="#无分类编址CIDR" class="headerlink" title="无分类编址CIDR"></a>无分类编址CIDR</h2><p>B类地址很快将分配完毕,路由表中的项目急剧增长<br>CIDR将网络号与子网号合并,但前缀可以变长,<strong>消除了传统的A&#x2F;B&#x2F;C类地址以及划分子网的概念.</strong><br><img src="/img/网络基础/CIDR.png"><br>CIDR记法:IP地址后加上&#x2F;,然后写上网络前缀(任意长度)的位数.e.g.128.14.32.0&#x2F;20<br><strong>融合了子网地址与子网掩码,方便子网划分</strong></p><p>使用全1表示网络号位置,0表示主机号<br><img src="/img/网络基础/CIDR1.png"></p><p>192.199.170.82&#x2F;27</p><ol><li>表示网络号占了27位,主机号32-27&#x3D;5位</li><li>包括了2^5&#x3D;32个IP地址</li><li>最小地址:192.199.170.64(010<strong>00000</strong>)&#x2F;27 最大地址:192.199.170.96(010<strong>11111</strong>)&#x2F;27</li><li>CIDR地址块&#x3D;主机地址全0&#x3D;最小地址</li><li>CIDR地址块的子网掩码&#x2F;地址掩码&#x3D;网络号全1,主机号全0</li></ol><h3 id="构成超网"><a href="#构成超网" class="headerlink" title="构成超网"></a>构成超网</h3><p>将多个子网聚合成一个较大的子网,叫做构成超网或路由聚合<br>方法:将网络前缀缩短(所有网络地址取交集)<br>例如:<br>网络1: 206.1.0.0&#x2F;17<br>网络2: 206.1.128.0&#x2F;17<br>构成超网后:206.1.0.0&#x2F;16(因为只有前16位对得上,所以前16位作为网络号)</p><h3 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h3><p>使用CIDR时,查找路由表可能得到及格匹配结果(跟网络掩码按位相与),应选择具有最长网络前缀的路由.前缀越长,地址块越小,路由越具体.</p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>发送数据时需要封装和解封装<br>在传输层分片<br>网络层封装入源主机地址和目的主机地址<br>数据链路层在网络层的基础上封入源mac地址和目的mac地址,再封入一个尾部FCS(一个帧检验序列)构成一个链路层传输单元(数据帧)<br>目的mac地址可以通过ARP高速缓存获取,如果表中没有,则通过广播ARP请求分组获取地址<br><img src="/img/网络基础/ARP发送数据.png"><br>单播:单向广播<br><img src="/img/网络基础/ARP发送数据1.png"></p><h1 id="暂结"><a href="#暂结" class="headerlink" title="暂结"></a>暂结</h1><p>其实<strong>听的不是很懂,先学别的去了</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一个临时的Linux笔记</title>
    <link href="/2023/03/30/Linux%20(3)/"/>
    <url>/2023/03/30/Linux%20(3)/</url>
    
    <content type="html"><![CDATA[<p>之后会合并,忙</p><hr><p>.bashrc 这个文件可以自定短命令,且开机会自动执行其中的命令,处于用户的home目录下<br>用此可以在开机时自定短命令alias ll &#x3D; “ls -lha”<br>不要alias cd &#x3D; “rm -f &#x2F;“<br>echo $? 检测上一条命令是否报错,0为正确输出</p><h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><p>命令名 可选项 参数<br>ls 参数，选项 展示当前目录文件 a全 l列表和文件信息，蓝色为文件夹 h切换格式显示大小<br>cd 参数 切工作目录，仅cd回到home目录<br>pwd打印工作目录<br>mkdir选项，参数 创建新的目录,-p自动创建不存在的父目录，使用与创建连续多层级的目录体系，需要权限，一般仅在home内操作<br>clean等同于ctrl+l，清屏<br>touch 参数 创建文件，该命令无选项，参数必填，表示文件名<br>cat参数 查看文件内容，后跟路径<br>more参数 查看文件内容，支持翻页，文件内容过多时可以一页页展示，空格翻页，q退出<br>cp选项，参数 具有两个参数，被复制文件路径与目标路径，复制文件夹时需要-r，可以具有改名的效果<br>mv参数 两个参数，起点与终点，具有改名效果<br>rm选项，参数 可以有多个参数，-r删除文件夹，-f强制删除，只有管理员用户删除内容会有提示。删除多个内容时使用空格隔开每一项参数，支持通配符<em>，test</em>表示以test开头的内容，<em>test表示以test结尾的内容，</em>test*表示匹配任何包含test的内容<br>su选项 -root临时获取root权限，exit退出<br>which参数 后跟具体命令，可以查看该命令的本体存放位置<br>find参数，选项 可以根据文件名&#x2F;文件大小查找文件 参数写名字或大小 +1G表示大于1G -100M表示小于100MB 可以使用通配符<br>find起始路径 -name&#x2F;size “参数”<br>grep从文件中通过关键字过滤文件行 -n可选，表示显示匹配的行的行号<br>grep 选项 关键字 文件路径(可作为管道符的输入结果)<br>wc      统计文件行数和单词数量，-c统计bytes(字节占用)数量，-m字符数量，-l行数，-w单词数量<br>wc 选项 文件路径<br>|管道符号，将左边命令的输出(要有输出)作为右边命令的输入（参数）<br>cat 文件 | wc -l 统计cat文件输出的内容中的行数<br>echo输出后面跟随的内容，建议使用双引号包裹，被&#96;&#96;包含的内容会作为命令执行</p><blockquote><p>和&gt;&gt; 分别为覆写与追加。左侧的命令结果会被覆写&#x2F;追加到右边的文件内<br>tail查看文件尾部的内容，追踪文件的最新更改。-f持续追踪，-num查看尾部多少行，不加默认10<br>tail 选项 Linux路径<br>vimvi的加强版，兼容vi所有指令，具有shell程序编辑的功能，可以代码高亮辨别语法的正确性 有命令模式(所有输入都被理解为命令，作为输入和底线的中转站，按ESC进入)，输入模式(i o a)，底线命令模式(：) 当目标文件不存在时，创建新文件并编辑<br>vim 路径  输入模式：i光标处 a光标后 I本行首 A行尾 o光标下行 O光标上行  命令模式：&#x2F;搜索模式 n&#x2F;N 向下&#x2F;上继续搜索 0&#x2F;$ 行头&#x2F;尾  底线命令：set nu显示行号 set paste 设置粘贴模式</p></blockquote><h2 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h2><p>绝对路径从根目录出发，例如&#x2F;home&#x2F;用户名&#x2F;Downloads<br>相对路径从当前所在目录出发，无需以&#x2F;开头<br>. 当前目录<br>.. 上一级目录<br>~ 该用户的home目录</p><h2 id="一些事项"><a href="#一些事项" class="headerlink" title="一些事项"></a>一些事项</h2><p>rm -rf &#x2F;表示强制删除根目录下所有文件夹，斜杠后可以带星号<br>命令实际上是一个个可执行的二进制程序，通过which查看存放位置</p><h2 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h2><p>在linux拥有最大权限的账户名为root(超级管理员)，默认使用普通账户，在home目录内不受限<br>通过sudo命令为当前命令调用管理员权限，sudo -i获取管理员权限<br>su - 用户名 临时切换用户,横杠表示切换的时候加载环境变量，exit回到上一个用户<br>普通用户切换需要密码 管理员用户切换无需密码<br>并非所有用户都有权利使用sudo命令，可以对用户进行配置<br>在&#x2F;etc&#x2F;sudoers文件的末尾添加 用户名 ALL&#x3D;(ALL)    NOPASSWD:ALL可以令该用户输入sudo命令无需输入密码</p><h3 id="用户-用户组"><a href="#用户-用户组" class="headerlink" title="用户 用户组"></a>用户 用户组</h3><p>针对多个用户的权限控制<br>创建用户组：groupadd 用户组名<br>删除用户组：groupdel 用户组名</p><p>创建用户：useradd 用户名<br>-g指定用户组 不指定会创建同名组自动加入。当已经存在同名组时，必须使用-g。-d指定用户的home路径</p><p>删除用户：userdel 用户名<br>-r删除用户的home目录</p><p>查看用户所属组：id 用户名<br>不提供用户名则查看自身</p><p>修改用户所属组：usermod -ag 用户组 用户名</p><p>查看用户：getend passwd<br>获得七份信息：密码：用户ID：组ID：描述信息：home目录：执行终端<br>密码用x显示，因为在一次更新后密码不储存于此了</p><h3 id="查看文件所属"><a href="#查看文件所属" class="headerlink" title="查看文件所属"></a>查看文件所属</h3><p>听过ls -l查看内容<br>-或d或l 所属用户权限 所属用户组权限 其他用户权限 所属用户 所属用户组 文件大小 时间</p><p>修改文件权限：chmod 权限 文件或文件夹<br>-R，对文件夹内全部内容执行同样操作<br>示例chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x 文件名  ugo分别表示拥有者，拥有者所在组，其他用户</p><p>权限可以用数字表示，rwx分别为421<br>chmod 751 表示u&#x3D;rwx,g&#x3D;rx,o&#x3D;x</p><h3 id="chown修改文件所属用户组"><a href="#chown修改文件所属用户组" class="headerlink" title="chown修改文件所属用户组"></a>chown修改文件所属用户组</h3><p>chown 选项 用户 ： 用户组 文件或文件夹<br>选项-R对文件夹内所有内容应用相同规则<br>：用于分割用户与用户组<br>chown root 文件  将文件所属用户修改为root<br>chown : root 文件 将文件所属用户组修改为root<br>chown root:用户组 文件  将文件所属用户修改为root，用户组修改为用户组</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>Ctrl+C 强制停止当前命令（不能用于停用vi&#x2F;vim）<br>history 查看历史输入过的命令<br>！  作为前缀自动匹配上一次执行过的相同前缀的命令<br>ctrl+r输入内容匹配搜索历史命令<br>ctrl+a&#x2F;e&#x2F;←&#x2F;→  跳到开头&#x2F;结尾&#x2F;左跳一个单词&#x2F;右跳一个单词<br>ctrl+l  清屏</p><p>系统服务管理：<br>systemctl start&#x2F;stop&#x2F;status&#x2F;enable&#x2F;disable 参数 启动&#x2F;关闭&#x2F;查看状态&#x2F;开机自启&#x2F;关闭开机自启</p><p>NetworkManager 主网络服务<br>network 副网络服务<br>Firewalld 防火墙服务</p><p>软链接(快捷方式) 作为一个指向，类似于快捷方式<br>ln -s 参数1 参数2  -s创建软链接，将参数一作为被链接的文件或文件夹到参数2 </p><p>时间校准<br>date -d +格式化字符串<br>-d按照给定的字符串显示日期，一般用于日期计算<br>%Y年<br>%y年份后两位<br>%m月份<br>%d日<br>%H小时<br>%M分钟<br>%S秒<br>%s 自1970.01.01 00:00:00 UTC 到现在的秒数<br>date +%Y-%m-%d %H:%M:%S</p><p>正式：<br>服务器的主要作用还是为其他计算器提供服务的配置更高的电脑<br>其他计算机可以用作服务器，但是因为系统和硬件限制并不能完全发挥作为服务器的效用，服务器有自己专门的系统</p><p>典型的服务器模式：<br>C&#x2F;S，Client&#x2F;Server<br>由服务商给客户提供资源或某种功能</p><p>服务器的物理堆叠类型有<br>机架，塔式，刀片式，机柜式<br>机架式是标准的工业设计，方便规划空间，节约空间成本<br>塔式可以认作是机箱，向一个箱式服务器存放柜供电，机箱空间大，方便硬盘和电源的冗余扩展<br>刀片式服务器高密度，支持热插拔，随时可以添加新的组件提高性能。性能的利用性较低，适合用于组件集群<br>机柜式服务器通草在企业中见到，由机架式，刀片式再加上其他设备组合而成</p><p>1964年IBM推出第一台大型服务器，1965年即被改善，由DEC公司推出小型机。在1989年，新概念型小型机被推出，由x86系统构建，Intel 486微处理器。到1989年，Unix服务器RISC CPU和Unix操作系统已经被部署到了服务器上</p><p>客户机访问网站，实际是访问网站服务器。在客户机和网站服务器之间有一台代理服务器（分发器），代理服务器不提供服务，但是将用户的请求进行分类，然后指向指定的服务器，避免服务器的超载（访问上限）</p><p>Unix于1969年诞生，前身为unics，在1973年被C语言之父重写成为Unix<br>linux之父为linus Torwalds，与1991年十月发布linux第一个公开的内核。linux的logo是企鹅<br>Linux操作系统&#x3D;内核+文件系统+应用程序<br>主要为内核，内核管理CPU&#x2F;内存，驱动基本硬件，提供文件系统<br>版本号的组成为：主版本.次版本.修订号<br>目录：<br>&#x2F;boot 存放系统引导必须的文件，包括内核与启动配置<br>&#x2F;bin,&#x2F;sbin存放各种命令程序<br>&#x2F;dev存放硬盘,键盘,鼠标,光驱等各种设备文件<br>&#x2F;etc存放Linux系统及各种程序的配置文件<br>&#x2F;root,&#x2F;home 提供给管理员和普通用户的默认家目录<br>&#x2F;var存放日志文件,邮箱目录等经常变化的文件<br>&#x2F;proc存放内存中的映射数据,不占用磁盘<br>&#x2F;tmp存放系统运行过程中使用的一些临时文件</p><p>Linux一切皆文件,家目录类似于Windows系统中的user目录</p><p>系统启动过程:接通电源→BIOS(UEFI):开机自检→BIOS(UEFI)搜索可启动设备→加载内核→启动初始化进程sysemd→挂载文件系统→启动systemd目标→登录界面<br>自检主要检查能不能正常启动</p><h2 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h2><p>在内核选择界面按e<br>将光标跳转到Linux版本号所在的行末,空一格输入rd.break console&#x3D;tty0,按ctrl+x<br>界面跳转到switch_root:&#x2F;#代表进入紧急救援模式<br>获取修改密码的权限:把系统真实根目录以读写的权限临时挂载到当前的紧急救援模式下<br>输入mount -o remount,rw &#x2F;  &#x2F;sysroot<br>mount命令用于挂载,-o代表重新挂载,”remount,rw”以读写的权限重新挂载&#x2F;到sysroot目录下,逗号后为追加,算是remount命令的一部分<br>紧急救援模式下的根目录是sysroot<br>将当前工作目录切换至根目录下<br>chroot &#x2F;sysroot&#x2F;  (此时根目录挂载在sysroot下)<br>输入echo 密码 | passwd –stdin 用户名(root) 对密码进行修改,|作为管道符将左边的输出结果赋予右边的passwd<br>跳过SELinux的异常检测<br>SELinux会给文件进行标记,当密码被改变后,文件标记也有变化,此时该文件对于系统是不安全的.通过touch &#x2F;.autorelabel 在根目录下创建一个叫autorelabel的文本文件重置标记,前面的”.”代表这是一个隐藏文件<br>输入reboot或者exit重启或者关闭模式</p><p>命令的执行依赖于shell<br>用户→shell(解释器)→内核(仅认识0,1)→硬件<br>shell在etc&#x2F;shells目录下</p><p>&#x2F;bin&#x2F;bash 是系统内核的默认shell<br>用户向shell下达命令,shell向内核解释命令,然后传递给硬件 然后过程反向输出反馈给用户</p><p>@&#x3D;at 代表在…上<br>[同户名@主机名 文件夹名称]权限标识符<br>#root用户 $普通用户</p><p>bash(shell)可以提供相对完整的命令补全和标识符<br>esc&#x2F;alt+. 粘贴上一个命令的参数(可以不断切)<br>ctrl+u 清空至行首<br>ctrl+w 往回删除一部分</p><p>显示cal 日历<br>wc统计文本数据 -l行数 -w单词数 -c字节数</p><p>reboot重启<br>poweroff关机<br>shutdown -h now 立刻关机<br>shutdown -h 10:00&#x2F;+10 十点关机&#x2F;十分钟后关机<br>shutdown -r now 立刻重启,默认一分钟\</p><p>运行级别init 0&#x2F;1&#x2F;2&#x2F;3&#x2F;4&#x2F;5&#x2F;6<br>关机&#x2F;单用户(修复模式&#x2F;破解密码模式)&#x2F;字符界面(无网络)&#x2F;字符界面&#x2F;未定义&#x2F;图形界面&#x2F;重启</p><p>ls -A同-a,但不会显示.和..</p><p>pinfo 与man相似,但是每段有自己的独立节点,就像超链接一样<br>ls -l查看当前目录的详细信息</p><p>vim搜索&#x2F;word 切换结果n&#x2F;N<br>撤销u 回复ctrl+r<br>剪切Ndd 剪切N行<br>p 粘贴在行末 P粘贴在行首</p><p>通配符:<br>*,代表所有<br>?代表一个不确定的字符,有几个问号代表几个字符<br>ls &#x2F;etc&#x2F;<em>ab</em> 列出etc目录下所有名称含有ab字符的文档<br>列表集合ls &#x2F;dev&#x2F;tty{13,18,27,3,6} 列出与后面字符相匹配的项<br>{20..30}表示二十到三十<br>2[0-9] 20-29</p><p>head&#x2F;tail -n 参数 查看文本的头部&#x2F;尾部n行,默认十行</p><p>8-12行<br>cat -n &#x2F;etc&#x2F;passwd | head -12 | -5<br>grep 文本过滤 过滤出包含条件的行<br>grep 选项 参数 -n显示行号 -c显示匹配行数 -i忽略大小写 -v取反(不包括)<br>^关键词 以关键词开头的行<br>$关键词,以关键词结尾的行<br>^$输出空行</p><p>重定向:<br>标准输入:从键盘输入内容<br>标准输出:输出到屏幕(终端上)</p><p>重定向:将标准输入或者输出重新定向到别的地方<br>标准输入(stdin,文件描述符为0):默认从键盘输入<br>标准输出(stdout,描述符为1):默认输出到屏幕<br>错误输出(stderr,文件描述符为2),默认输出到屏幕</p><p>输入重定向<br>命令 &lt; 文件 将文件作为命令的标准输入<br>命令 &lt;&lt; 分界符 从标准输入中读入,直到遇见分界符才停止</p><p>输出重定向,两个&gt;&gt;是追加</p><blockquote><p>只重定向标准输出<br>2&gt;只重定向错误输出<br>&amp;&gt;重定向标准输出与错误输出</p></blockquote><p>find 搜索路径 条件1 选项 条件2 根据预设的条件”递归”查找对应文件<br>-a查找条件为条件1和2<br>-o条件为1或2<br>多个条件情况下省略默认为-a</p><p>type 按文档的类型查找(f文本文件,d目录,l快捷方式)<br>格式:find &#x2F;路径&#x2F;目录 -type f或d或l</p><p>-name或-iname(iname忽略大小写) 按名字查找,支持通配符<br>格式:<br>find &#x2F;路径&#x2F;目录 -name或-name “文档名”</p><p>-size 按大小查找,+大于-小于,后面跟数字和G,M等<br>-user 按文档的所有者进行查询<br>-group按文档的所属组查找<br>-maxdepth … -maxdepth 层数</p><p>管道符一般并不支持多参数命令,例如cp<br>-exec 对查找结果执行二次处理<br>find &#x2F; -user student -type f -exec cp {} &#x2F;mnt&#x2F;abc&#x2F; ;<br>{}代表find命令查询出的每一个结果<br>-exec要以;表示结束,否则不知道何时结束而报错</p><p>-mtime +&#x2F;-n<br>find 参数 -mtime +N或-N或N<br>-N表示N天之内<br>+N表示N天之前<br>N表示前N天的一天<br>实际上-N表示N天之内,+N表示N天之外,N表示这两之间的那一天<br>比如30号的前五天之内为30,29,28,27,26.这前五天是包含30号在内的<br>但是在30号的5天之前是不包含本身的,也就是说这是29,28,27,26,25之前的天数,从24号开始算起.N表示25号</p><p>locate 文档名称<br>配合数据库查找文件位置</p><p>whereis 文档名称<br>查看文件的位置,只能查二进制(含可执行)文件,说明文档,源文件等</p><p>本地用户与组<br>默认创建一个与用户同名的组将用户分类<br>useradd 选项 参数<br>-u uid 指定用户的uid.系统程序用户的uid为1-999,普通用户从1000开始,root为0<br>-d 参数 用户名 指定用户的家目录</p><p>-s &#x2F;解释器路径 用户名<br>指定用户的登录shell,不指定默认为&#x2F;bin&#x2F;bach</p><p>-G 附加组 用户名 新用户默认是没有附加组的<br>groupadd 组名  新建附加组<br>useradd -G 附加组 用户名 新建用户并加入指定附加组</p><p>修改密码<br>passwd 用户名<br>没有用户名时默认为当前登录用户<br>非交互式修改密码:(无需二次确认)<br>passwd –stdin 用户名 或带上echo使用管道符<br>非交互式修改会被调用历史记录看见密码</p><p>临时切换用户:<br>su - 用户名 </p><p>passwd文件的信息:<br>用户名:密码占位符:用户uid:基本组的gid:描述信息(可以为空):用户的家目录路径:用户的默认登录shell</p><p>etc目录下的shadow文档用于存放用户密码,默认加密<br>用户名:加密过的密码:上次修改的时间戳:<br>-u 修改uid<br>-d 修改家目录<br>-s &#x2F;shell解释器的路径<br>-G 指定一个附加组</p><p>user 选项 用户名<br>-r删除用户的同时删除家目录</p><p>创建组<br>groupadd -g 指定组的gid<br>groupdel    删除组</p><p>添加用户到组<br>gpasswd -a 用户名 组名  添加用户<br>gpasswd -d 用户名 组名  删除用户</p><p>etc下的group文件中<br>组名:密码占位符:gid:组成员列表(可空)</p><p>ls -ld 文件或目录<br>文件类型权限权限权限. 子目录个数&#x2F;硬链接个数 拥有者 所属组 大小 创建时间 路径<br>d开头为目录,-为文本,l为快捷方式</p><p>Linux判断用户权限的方式<br>先判断所有者,优先级为:所有者&gt;所属组&gt;其他用户(匹配到哪一步即停止到哪里).然后判断文档的权限归属问题,再查看相应权限位置的权限设置</p><p>chmod 归属关系 +&#x2F;-&#x2F;&#x3D; 权限类别 &#x2F;文档<br>chmod o+w &#x2F;test    为其他用户(o)添加写入权限(w)<br>chmod u-w &#x2F;test 删除所有者的写入权限<br>chmod g&#x3D;— &#x2F;test   令所属组的权限&#x3D;无<br>chmod u&#x3D;r &#x2F;test 把所有者u的权限设置为只读r<br>chmod ugo&#x3D;rwx &#x2F;test 将ugo的权限都设置为rwx<br>chmod u&#x3D;wrx,g&#x3D;rx,u&#x3D;— &#x2F;test 我想,不用解释了<br>chmod 764 &#x2F;test 将test的三位用户类型权限分别修改为rwx,rx,r<br>可选项:<br>-R 递归设置所有目录与文档</p><p>如果对父目录无权限,对子文档有权限也无意义<br>Set GID可以使目录下新增的文档新建时自动设置与父目录相同的组<br>chmod g+s或g-s &#x2F;路径<br>附加在所属组的执行权限x位上,所属组的权限标识会变为s或S<br>s代表所属组的执行权限为x,S代表所属组的执行权限为-</p><p>一些题目<br>rd.break console&#x3D;tty0<br>mount -o remount,rw &#x2F; &#x2F;sysroot<br>chroot &#x2F;sysroot<br>passwd相关命令<br>touch &#x2F;.autorelabel<br>exit<br>reboot</p><p>过滤&#x2F;etc&#x2F;passwd 包含字符串root的行,过滤以字符串root开头的行<br>grep root &#x2F;etc&#x2F;passwd<br>grep ^root &#x2F;etc&#x2F;passwd<br>过滤以字符串nologin结尾的行<br>grep root$ &#x2F;etc&#x2F;passwd<br>过滤fstab的有效配置行并存放到&#x2F;root&#x2F;101.txt<br>grep -v ^$ &#x2F;etc&#x2F;passwd | grep -v ^# &gt; &#x2F;root&#x2F;101.txt<br>-v表示取反,得到满足条件的行,然后对其取反<br>查看&#x2F;etc&#x2F;以g开头,p结尾的文档<br>ls &#x2F;etc&#x2F; g<em>p<br>或find &#x2F;etc&#x2F; maxdepth 1 -name g</em>p<br>*可满足任意的字符与字符数量,?只表示任意的字符<br>创建一个web组,gid为8484<br>groupadd -g 8484 web</p><p>创建一个用户harry,该用户的uid为10086,属于附加组web,用户密码为redhat<br>useradd -u 10086 -G web harry<br>echo redhat | passwd –stdin harry</p><p>统计&#x2F;etc目录下的文档数<br>ls &#x2F;etc | wc -l</p><p>创建一个用户natasha,以nologin作为shell解释器,属于harry组,用户密码为redhat<br>user -s &#x2F;sbin&#x2F;login -G harry natasha<br>echo redhat | passwd –stdin natasha</p><p>把当前的日期和时间按照年-月-日 时:分:秒 的格式存放到文件&#x2F;root&#x2F;time.txt中<br>date +’%Y-%m-%d %H-%M-%S’ &gt;&gt; &#x2F;root&#x2F;time.txt<br>查找所有属于student用户的文件,并复制到目录&#x2F;mnt&#x2F;studir下<br>复制后的文件所有者需保持不变<br>find &#x2F; -user student type f -exec copy -p {} &#x2F;mnt&#x2F;studir ;<br>ls -Al<br>root用户在使用cp命令时会更改所有者等关系,当使用-p时,便仅进行复制,不对信息进行更改<br>type f查找文件<br>访问权限有读 写 执行,对应rwx<br>使用权限的对象为 所有者 所属组 其他用户,对应ugo<br>文本文件放下不谈<br>ls命令用到的权限是r<br>rm,mv,cp,mkdir,touch等更改内容(不包括更改目录属性)用到的权限是w<br>cd用到的是x<br>若对父目录无权限,则对子目录与文件有权限也无意义<br>普通用户无法使用chmod命令,一个普通的文件一般不需要加执行权限,有执行权限的文件一般为脚本,绿色显示<br>目录必须有执行权限,否则cd无法进入<br>chmod harry:root 文件 则会将文件的所有者与所属组改为harry和root<br>:root 仅更改所属组<br>harry 仅更改所有者</p><p>Set GID:令新增的子目录及文件自动继承父目录的所属组<br>chmod o&#x3D;- 令其他用户无权限<br>chmod g+s (s代表执行权限原本是x,S代表是-,就是代表被代替之前的位有没有执行权限) g表示组,s表示有执行权限 s&#x2F;S表示这个目录下的所有文件递归继承</p><p>Set UID:传递所有者身份,用户可以暂时拥有所有者的权限<br>chmod u+&#x2F;-s 路径&#x2F;可执行文件<br>附加在所有者的执行权限位x上,其他同Set GID<br>在用户执行这个文件时,可以暂时调用所有者的权限</p><p>Sticky Bit<br>防止用户滥用执行权限(禁止用户操作他人文档),只有所有者能操作(删除等)自己的文档.其他人无法操作<br>适用范围:适用于开放w权限的目录<br>chmod o+&#x2F;-t 路径&#x2F;文档<br>特征,附加在执行权限x位上.其他用户的权限标识变为t&#x2F;T,t表示x,T表示-</p><p>acl策略:访问控制列表<br>针对个别用户&#x2F;组设置独立的权限<br>可以实现更精细的权限控制<br>setfacl 选项 u或g:用户名:组名:权限类别(rw-) 文档路径<br>acl权限查看:getfacl<br>兼容ext3&#x2F;4,xfs文件系统,默认支持Linux平台<br>-m修改 -R递归 -x删除指定用户或组的acl权限 -b删除所有acl权限</p><p>监控与进程管理<br>top 选项<br>-d 刷新时间 -u 用户名<br>交互快捷键:<br>P 按cpu进行排序<br>M 按内存进行排序<br>q 退出<br>程序:静态的代码,占用磁盘储存空间<br>进程:动态的代码,占用内存和CPU<br>金城的标识为PID</p><p>僵尸进程(状态):进程卡死(是否等待这个进程),无法退出与使用.僵尸进程会大量占用系统资源,此时需要进程的PID以结束僵尸进程</p><p>优先级&#x3D;优先系数+nice值<br>优先级高的进程优先执行,NICE值的取值范围为-20~19,NICE值越大优先级越低,默认0</p><p>优先级设置:renice -n nice值 进程号<br>设置新进程的优先级:nice -n nice值 命令</p><p>sleep 数字  等待一定秒数</p><p>ctrl+C 中断当前命令程序<br>kill -9 PID 强制杀死进程,-9为强制<br>killall -9 进程名 按进程名称强制杀死进程<br>pkill 查找条件模糊搜索杀死进程,一般不用</p><p>杀死一个用户所有的进程(踢出用户)<br>killall -9 -u 用户名</p><p>分析和存储日志<br>日志系统&#x3D;systemd-journald服务+rsyslog服务<br>记录系统和程序运行中发生的时间<br>用于信息安全控制的依据和故障排除<br>默认存储目录为&#x2F;var&#x2F;log</p><p>常见的日志文件<br>messages记录内核消息,各种服务的公共消息<br>demesg 记录系统启动过程的各种消息<br>cron 记录cron计划任务相关的消息<br>maillog 记录邮件收发相关的消息<br>secure记录与访问限制相关的安全消息</p><p>日志消息的优先级分为0-7共八种,数值越小越紧急 紧急&#x2F;警告&#x2F;严重&#x2F;错误&#x2F;提醒&#x2F;注意&#x2F;信息&#x2F;调试<br>通过journalctl 查看近期所有的消息记录<br>-u 服务名 -p优先级 -f追踪十行</p><p>NTP时间同步(Network Time Protocol)<br>装包,配置,起服务<br>1.安装一个与NTP时间同步服务器进行沟通的软件<br>npm -q chrony<br>vim &#x2F;etc&#x2F;chrony.conf<br>域名替换为 classroom.example.com iburst<br>服务重启 systemctl restart chronyd(加d代表服务,没有d是软件), 重启服务<br>enable chronyd设置开机自启<br>chronyc sources -v<br>*同步成功,+备用服务器,?同步失败</p><p>周期性计划任务<br>crontab -e -u 用户名  以某个用户的身份添加计划任务<br>时间格式<br>分  时  日  月  周  命令(或脚本,绝对路径)<br>0   8   8   3   *   &#x2F;    在3月8日运行脚本<br>数字代表具体的时间<br>*代表匹配范围内的任意时间<br>,分割多个不连续的时间点<br>-指定连续时间范围<br>&#x2F;n代表频率<br>crontab -l -u 用户名查看用户的计划任务</p><p>网络基础知识<br>IP地址,唯一标识网络中一台主机<br>组成:32个二进制位<br>01010010.10010100.10100100.010000001<br>每八位一个点,上述为82.148.164.65(点分十进制地址)<br>最大的ip地址和最小的分别是255.255.255.255&#x2F;0.0.0.0 这两位作为特殊地址一般不提供使用<br>一般计算机网络使用<br>A类:1-127    网.主.主.主<br>B类:128-191 网.网.主.主<br>C类:192.223    网.网.网.主</p><p>组播与科研专用:<br>D类:224-239 ←记此即可<br>E类:240-254</p><p>B类可认为是8比特位上限到常用ip前(128-191),然后再根据D类占位可以推出5类所使用的ip地址<br>网络位与主机位:<br>网络位:区号<br>主机位:电话号码</p><p>一般情况下,只有同网段的主机才能进行直接通信</p><p>管理Linux网络:<br>两台计算机通信必须要有ip&#x2F;子网掩码<br>一般要有网关地址</p><p>子网掩码:用于区分网络位与主机位<br>一般写法为ip&#x2F;掩码<br>有时是ip&#x2F;8,这代表了一个网段,ip取值范围为<br>xx.0.0.1-xx.255.255.254<br>8←表示的是子网掩码长度,表示连续的数,网段主机位使用0表示,代表同一网段</p><p>DHCP<br>通过交换机寻找到主机,并为主机提供自动分配的ip地址.同一网络环境中仅允许一个DHCP服务器,否则出错</p><p>网关地址:用于解决不同网络通信(路由器)</p><p>DNS服务器:将域名解析为ip地址<br>网址:域名→可以被解析为ip地址</p><p>短主机名:server0<br>完整主机名:server0.example.com<br>hostname查询主机名<br>临时修改主机名:hostname 新主机名<br>永久方法一:&#x2F;etc&#x2F;hostname中修改<br>方法二:hostnamectl set-hostname 主机名</p><p>修改IP地址&#x2F;子网掩码,网关地址,DNS地址<br>nmcli命令(network manager client)<br>通过nmcli connection show 获取连接的名称(虚拟网卡?)</p><p>修改连接的ip地址等信息<br>nmcli connection modify eth0 ipv4.method manual ipv4.addresses ‘172.25.0.11&#x2F;24 172.25.0.254’ ipv4.dns 172.25.0.254 connection.autoconnect yes<br>第一个是ip地址,第二个网关地址.dns地址因为只有一个参数所以不用引号,然后设置自动连接.上述命令并不能理科生效<br>nmcli connection up eth0 立刻重启eth0的连接状态</p><p>为了保证服务器稳定性,一般使用静态ip地址</p><p>查看网络连接状态：</p><p>nmcli n connectivity(简写为c)<br>网络连接状态共有五种：full、limited（连网，但无法上网）、portal（连网，但需要认证登录后才能上网）、none（没连网）和 unknown。</p><p>nmcli connection show可简写为nmcli c,show是默认项,connection可简写为c,co,con,conn</p><p>修改连接：</p><p>nmcli c modify ens33  [ + | - ]选项 选项值  # 或<br>nmcli c m ens33  [ + | - ]选项 选项值</p><p>下面给出常用修改示例：</p><p>nmcli c m ens33 ipv4.address 192.168.80.10&#x2F;24  # 修改 IP 地址和子网掩码<br>nmcli c m ens33 ipv4.method manual             # 修改为静态配置，默认是 auto<br>nmcli c m ens33 ipv4.gateway 192.168.80.2      # 修改默认网关<br>nmcli c m ens33 ipv4.dns 192.168.80.2          # 修改 DNS<br>nmcli c m ens33 +ipv4.dns 114.114.114.114      # 添加一个 DNS<br>nmcli c m ens33 ipv6.method disabled           # 将 IPv6 禁用<br>nmcli c m ens33 connection.autoconnect yes     # 开机启动<br>注意，必须先修改 ipv4.address，然后才能修改 ipv4.method！<br>connection.interface-name（别名 ifname）：设备名；<br>nmcli connection modify eth0 ipv4.method manual ipv4.addresses ‘172.25.0.11&#x2F;24 172.25.0.254’ ipv4.dns 172.25.0.254 connection.autoconnect yes</p><p>用空引号””代替选项的值，可将选项设回默认值（以 ipv4.method 为例）：</p><p>nmcli c m ens33 ipv4.method “”</p><p>若想要查看内核版本,找到etc目录下的release结尾的文件打开即可<br>chown修改文件拥有属性等change own<br>setfacl -m g:web:rwx …<br>useradd -s &#x2F;bin&#x2F;nologin -u 3000<br>setfacl u:natasha:rwx …</p><p>vim &#x2F;etc&#x2F;chrony.conf</p><p>ssh ip地址 连接到主机<br>linux命令行下载工具:wget -O &#x2F;存放路径&#x2F;文件名 下载链接<br>存放路径与文件名是-O的参数,如不更改则默认下载于当前路径</p><p>在linux中 安装和更新软件包主要来源是官方镜像光盘<br>另外来源是软件官网的rpm包<br>rpm包:红帽体系Linux<br>Linux命令行下载工具:wget<br>wget [-O &#x2F;路径&#x2F;文件名称] 文件地址<br>压缩格式使用红色显示<br>安装rpm包使用rpm -i 软件包名.rpm</p><p>查看软件包是否已安装rpm -q 软件包</p><p>卸载软件包rpm -e 软件包</p><p>Linux中的绝大部分软件包都存在依赖关系,由于开源的性质,Linux的软件包之间可能存在相互调用功能的情况<br>rpm是手动安装命令,当软件包存在的依赖包过多时,需要一个个安装过去非常麻烦,所以这个时候需要使用YUM(YellowDogUpdateManager,黄狗升级管理),一个红帽系统中专门用于安装和更新软件管理的工具,可以为客户端自动解决依赖关系<br>YUM安装软件包需要rpm包与软件清单<br>YUM需要配置源,方法一:<br>修改配置文件,重新指定一个YUM软件仓库<br>vim &#x2F;etc&#x2F;yum.repos.d&#x2F;文件<br>配置文件的名称为*.repo<br>配置文件中需要编写五个项<br>[rhe17]  仓库标识符,必须首行<br>name   仓库描述信息<br>baseurl&#x3D;… 仓库地址,网络仓库<br>enabled&#x3D;0&#x2F;1 1代表启动此仓库,停用0<br>gpgcheck&#x3D;0&#x2F;1跳过数字签名验证<br>数字签名验证对于私人小仓库必须开启,防止他人伪造作者信息写入恶意代码</p><p>检验配置文件成功 yum clean all<br>yum repolist   </p><p>yum安装软件包<br>yum install  软件包</p><p>若不清理缓存,在查询信息时会返回上一次成功的结果,所以需要yum clean all</p><p>方法二:yum-config-manager -add-repo 仓库地址<br>此时在&#x2F;etc&#x2F;yum.repo.d&#x2F;下会出现一个以仓库地址为文件名的配置信息文本,其中的斜杠会被换成下划线<br>使用工具生成的配置文件没有gpgcheck,需要手动添加</p><p>卸载软件包:卸载时一般只卸载软件包本体,不卸载其依赖包(防止软件包的依赖包被其他软件包依赖)<br>rpm -e 软件包名<br>yum remove 软件包名  不使用-y选项就不会卸载软件包<br>yum provides 命令     搜寻该命令有哪一个软件包提供</p><p>如果配置目录下有一个错误,都会影响其他所有文件,所以仅配置一个仓库时建议清空目录</p><p>LDPA(Lightweight Directoty Access Protocol)轻量级目录访问协议<br>实现网络用户集中管理,用户由LDAP服务器创建<br>存储网络用户,为客户端提供用户信息<br>安装软件sssd包<br>yum -y install sssd<br>利用图形工具authcofig-tui设置sssd配置文件,指定ldap服务端位置<br>重启sssd程序systemctl restart sssd<br>systemctl enable sssd<br>验证 grep ldapuser0 &#x2F;etc&#x2F;passwd<br>无输出说明非本地用户<br>id ldapuser0   检测ldap服务器用户</p><p>使用TLS加密技术,需要服务端与加密技术base DN(Domain Name 基础域名)<br>例如qq的域名就是qq.com,前面的www一般只是用于表示主页</p><p>下载证书到authconfig-tui提供的地址<br>wget 证书地址(需提前cd进指定目录)</p><p>重启sssd服务并设置自启<br>systemctl restart sssd<br>systemctl enable ssse</p><p>除了id ldapuser0查询用户之外<br>还可以通过grep ^ldapuser &#x2F;etc&#x2F;passwd查询本地是否有这些用户,这些实际都是网络用户<br>这些网络用户可以登录,但是没有家目录,需要指定&#x2F;挂载一个家目录<br>mkdir &#x2F;share  创建一个家目录<br>mount classroom.example.com:&#x2F;home&#x2F;guests &#x2F;share 挂载家目录,通过NFS文件共享服务给网络用户,服务器上以配置好共享,仅需要通过挂载到本地</p><p>再次尝试登录,如失败则将家目录挂载到&#x2F;home&#x2F;guests&#x2F;  创建一个准确的家目录路径<br>mkdir &#x2F;home&#x2F;guests<br>卸载之前的错误操作 umount &#x2F;share<br>mount classroom.example.com:&#x2F;home&#x2F;guests<br>再次尝试登录<br>为了防止下次重启失效,使用autofs工具实现自动挂载<br>yum -y install autofs<br>此时自动在etc目录下生成一个交auto.master.d的配置文件<br>尾行加入&#x2F;home&#x2F;guests &#x2F;etc&#x2F;auto.rule<br>shift+G跳到最后一行,然后按o新开一行,并写入上述配置<br>规则文件本不存在,需要手动创建<br>挂载点目录 规则文件路径(默认没有)<br>ldapuser0 -rw classroom.example.com:&#x2F;home&#x2F;guests&#x2F;ldapuser0<br>第一个字段写用户名 第二个字段写用户名的权限,需要对家目录有读写权限 第三个是挂载的路径</p><p>设置自动挂载的开机自启动<br>systemctl restart autofs<br>systemcyl enable autofs</p><p>仅登录时挂载,退出一段时间后卸载,避免资源的占用<br>ldapuser0可以换成通配符,这样所有用户都可以自行挂载 &#x2F;guests&#x2F;之后换成&amp;,匹配所有子目录</p><p>用户名 读写权限 远程共享的目录的地址与路径</p><p>快捷方式:软连接与硬链接<br>元数据:文档的属性信息<br>软连接:快捷方式→区域数据→i节点→源文档→i节点→数据区域:文档数据<br>源文档记录了源文件的地址,若被删除,链接失效.软链接可以存放在不同分区&#x2F;文件系统,常用</p><p>常见的系统出错与引导方法</p><p>设备等待超时:一般是fstab文件配置有问题,此时自动进入紧急救援模式<br>fstab常见错误:<br>文件系统损坏系统自动进入紧急救援模式<br>挂载的设备不存在等待超时后,自动进入紧急模式<br>挂载点不存在启动创建挂载点,若无法创建则进入紧急救援模式<br>挂载点错误 系统自动改进入紧急模式</p><p>在给予密码后vim进入etc&#x2F;fstab修复即可</p><p>管理系统守护程序和网络服务<br>systemctl:用于管理各种服务的工具</p><p>用法格式:<br>systemctl 参数 服务名称</p><p>常用参数:<br>start   启动服务<br>restart 重启服务<br>stop 停止服务<br>status 查看服务状态(绿正常,红启动报错,无 服务未启动)<br>enable&#x2F;disable 设置&#x2F;禁用自启<br>mask&#x2F;unmask 屏蔽&#x2F;取消屏蔽服务</p><p>systemd目标:类似运行级别,底层原理就是调用运行级别<br>目标<br>graphical.target 多用户模式,图形界面<br>multi-user.target 多用户模式,字符界面<br>rescue.target 救援单用户模式<br>emergency.target 紧急shell模式</p><p>切换运行目标(模式)<br>systemctl isolate 运行目标   此为临时修改<br>systemctl get-default 查看默认运行的目标<br>systemctl set-default  设置默认运行目标</p><p>ifconfig 查看ip地址<br>route查看网关</p><p>网卡可通过vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0进行配置<br>prefixo是网管<br>bootproto是连接方式,动态是ldap</p><p>常见的压缩格式及命令工具<br>.gz   gzip,gunzip(速度最快,压缩比例最小)<br>.bz2  bzip2,bunzip2<br>.xz   xz,unxz(速度最慢,压缩比例最大)</p><p>tar -_cf  &#x2F;压缩包路径&#x2F;压缩包名称.tar.格式  &#x2F;被压缩文档的路径<br>-c创建归档,必须要有的选项  -f指定归档文件名称,必须放在选项最后<br>-z -j -J分别对应gz,bz2,xz格式<br>-v 输出释放tar包的过程<br>-p 解压到制作tar包时保留的源路径</p><p>ssh服务远程管理<br>ssh 选项 用户名@对方的ip地址<br>-X 远程管理时,在本机运行对方的图形程序<br>-p 端口号指定端口号<br>scp ssh+cp 简单传输工具<br>scp &#x2F;源文档 用户名@目标机器IP地址:&#x2F;目标路径<br>-r  递归  复制目录时必须</p><p>ls -i &#x2F;文档路径 可以查看i节点</p><p>yum clean all<br>yum-config-manager –add-repo 地址<br>yum -y install httpd<br>-y表示全yes(通过)<br>systemctl restart httpd<br>systemctl status httpd</p><p>systemctl get-default</p><p>tar -jcf &#x2F;mnt&#x2F;guazai&#x2F;tar&#x2F;bz2 &#x2F;etc&#x2F;fstab<br>ln -s &#x2F;mnt&#x2F; &#x2F;root&#x2F;m1</p><p>cd &#x2F;etc&#x2F;openldap&#x2F;cacerts 证书地址<br>wget 证书地址<br>yum -y install autofs<br>vim &#x2F;etc&#x2F;auto.master<br>&#x2F;home&#x2F;guests     &#x2F;etc&#x2F;auto.rule<br>指定受检测的目录,不存在会自动创建    配置文件路径<br>vim &#x2F;etc&#x2F;auto.rule<br>ldapuser10 -rw classroom.example.com:&#x2F;home&#x2F;guests&#x2F;ldapuser10<br>挂载目录 挂载文件类型及权限 :设备名称<br>ldapuser10是不存在的目录,当用户访问该路径时,会自动挂载<br>网络地址:挂载路径<br>当用户访问ldapuser10这个目录时,触发autofs,将网络地址上的home&#x2F;guests&#x2F;ldapuser10挂载到本地的ldapuser10上</p><p>文件系统原理及应用:识别硬盘→分区规划→格式化→挂载使用<br>格式化:赋予空间文件系统的过程,对空间赋予规则<br>文件系统:存储数据的规则<br>典型的文件系统类型:ext3,4 第*代扩展文件系统<br>xfs  高级日志文件系统<br>swap  交换空间(虚拟内存):利用硬盘空间,缓解物理真实内存不足<br>u盘:fat32<br>系统,每次仅能存放单个不超过4G的文件<br>exfat突破了4G的限制<br>MBR分区模式有两个分区方案<br>1.1-4个主分区<br>2.0-3个主分区+1个扩展分区(n个逻辑分区)<br>最大支持2.2TB硬盘  扩展分区不能格式化与存储数据,容量大小显示1k,逻辑分区基于扩展分区创建</p><p>lsblk磁盘分区管理工具<br>sdb是未进行分区的硬盘<br>硬盘disk<br>分区part<br>卷组vlm</p><p>查看分区表:fdisk -l &#x2F;dev&#x2F;硬盘名<br>fdisk &#x2F;dev&#x2F;硬盘名   使用硬盘管理工具操作硬盘<br>p查看现有分区表 d删除分区 q放弃更改并退出 w保存更改并退出<br>n开始分区 主&#x2F;扩展 p&#x2F;e<br>然后+size</p><p>mkfs.格式 &#x2F;dev&#x2F;磁盘设备分区  格式化分区<br>blkid 参数    可以查看文件系统类型  TYPE&#x3D;”类型”</p><p>创建挂载点mkdir &#x2F;part1<br>mount &#x2F;dev&#x2F;sdb1 &#x2F;part1<br>之后往part1中写入数据时,实际是在向sdb1中写入<br>df -h  查看已挂载的设备 -h会将格式变为标准格式,加-T可以查看文件系统</p><p>设置开机自动挂载(修改etc&#x2F;fstab)<br>设备路径(分区路径) 挂载点 文件系统类型 挂载参数 备份标记 检测顺序<br>后三个默认defaults 0 0 这样就好</p><p>检查&#x2F;etc&#x2F;fstab文件自动挂载的格式并挂载还未挂载的设备<br>mount -a</p><p>如果针对一块已经分区且正在使用的硬盘对剩余的空间进行分区,保存退出后会有警告:重新读取分区列表失败,设备资源繁忙.   此时内核仍然使用了一个旧的列表,新的列表将会在下次重启时使用.<br>此时可以使用partprobe立刻获取新的分区表</p><p>扩展分区无法格式化与挂载使用,强制格式化会出错<br>硬盘命名规则:<br>sda1:<br>SCSI设备<br>Disk设备<br>第一块硬盘<br>第一个分区</p><p>sdb2:该主机SCSI接口协议的第二块的第二个主分区<br>sdb4:类似上,但是扩展分区<br>sdc6:该主机SCSI接口协议的第三块硬盘的第六个分区(或者第二个逻辑分区)</p><p>vdb2,VMware添加的虚拟硬盘</p><p>挂载点:一般情况下为空目录,如果挂载到一个非空目录,那么此时任何的写入与删除操作都是对挂载点的操作,卸载后原有的内容恢复<br>如果重复对一个路径挂载,则二次挂载的会被先前挂载的所覆盖,不会显示出来</p><p>交换分区:<br>类似于Windows中的虚拟内存,Windows将系统上的一块区域当成RAM(内存)使用,以临时缓解物理内存不足的问题(仅为缓解,并不能根除)<br>目前最快的硬盘协议接口是nvme,拥有3KMB&#x2F;s的传输速度,但仍没有内存快</p><p>配置交换空间<br>1.分区(决定了交换空间的大小)<br>2.格式化 格式化是没有swap类型的,需要的命令是mkswap,不是mkfs.swap<br>3.查看文件系统类型 blkid 路径<br>4.临时启用交换分区swapon 路径    swapon -s查看是否启用成功<br>Priority数值越大,当物理内存不足时被调用于临时存储的优先级越高<br>5.停用交换分区  swapoff 设备路径<br>6.开机自动启用交换分区fstab<br>&#x2F;dev&#x2F;sdb6 swap swap defaults 0 0<br>因为交换分区不存在挂载点,所以挂载点处写swap<br>7.检查fstab中文件系统是swap的配置,并启用还未启用的交换分区<br>swapon -a<br>swapon -s  再次查询,发现并重新启用交换空间</p><p>分区加密通过密码,先分区再加密<br>cryptsetup 加密格式 路径<br>cryptsetup luksFormat<br>完事后进入一个交互式命令<br>确认后按提示输入8位密码,对密码的复杂度有要求</p><p>解密:<br>cryptsetup luksOpen 路径 文件名<br>ls &#x2F;dev&#x2F;mapper&#x2F;  在此会出现一个解密之后的自定义命名文件</p><p>完事后仍需再次格式化加密分区,此时可以像正常分区一样格式化</p><p>echo $? 检测上一条命令是否报错,0为正确输出<br>不使用开机自动挂载的原因是不支持,重启后需要重新解密<br>不使用时卸载,然后自行加锁</p><p>验证加锁是否成功.仅需要重新挂在一次,此时提示设备不存在为已上锁</p><p>零散的存放空间可以被卷组统一,相当于是将各个磁盘没用到的空间归为了一块虚拟磁盘,可以随时对其进行划分成为虚拟分区(逻辑卷).之前都是物理卷,因为是直接对物理磁盘进行的操作</p><p>物理卷管理pvs 卷组管理vgs   逻辑卷管理lvs<br>创建 显示 删除 create&#x2F;display&#x2F;remove<br>一般是pv&#x2F;vg&#x2F;lv+create&#x2F;display&#x2F;remove<br>但是物理卷不能扩展,只有卷组和逻辑卷能扩展extend<br>从卷组中划分逻辑卷<br>lvcreate -L 逻辑卷 -n 逻辑卷名 卷组名称(基于哪个卷组创建)<br>p 物理<br>v 卷组<br>g 组<br>l 逻辑<br>s 扫描(pv&#x2F;vg&#x2F;lvs都是扫描卷)</p><p>挂载使用:mkdir &#x2F;lv<br>vim &#x2F;etc&#x2F;fstab<br>&#x2F;dev&#x2F;myvg&#x2F;mylv &#x2F;lv ext3 defaults 0 0<br>mount -a</p><p>逻辑卷优点:整合零散空间,扩大空间大小</p><p>逻辑卷空间的扩大:<br>情况1,卷组有足够的空间<br>lvextend -L +&#x2F;文件大小(可以不带加号) 逻辑卷址<br>但是df -Th查看大小又和lsblk的不同</p><p>刷新&#x2F;扩展文件系统<br>ext2-4使用resize2fs 卷址<br>xfs使用xfs_growfs   卷址</p><p>情况2,卷组没有足够的剩余空间<br>扩大卷组:vgextend 卷组名 闲置分区<br>然后按照第一种情况扩展</p><p>调整逻辑卷PE大小<br>卷组划分空间的最小单位称作PE,默认4M<br>大小不符合设定是因为需要预留一部分卷组的属性信息,所以会少一点或多一点.因为逻辑卷基于卷组进行创建,所以逻辑卷的PE和卷组共同.可以通过vgdisplay查看到.会自动补全到4的倍数</p><p>情况1:创建卷组时设置PE大小<br>vgcreate -s 大小 卷组名 卷址  需要能被大多数卷组大小整除,同时也要足够存放属性信息,所以2M最好<br>如果报错,需要使用partprobe刷新</p><p>修改已存在的卷组PE大小(要求:2的次幂)<br>vgchange -s PE大小 卷组名称<br>大小需要考虑到卷组内所有文件的大小,比如存在一个52M的文件,则不能将PE大小改为8,一定需要是所有文件大小的公因数</p><p>删除逻辑卷:<br>意义不大<br>umount &#x2F;lv<br>删除fstab文件中对应的设置,防止卡开机加载<br>lvremove 逻辑卷址    移除逻辑卷<br>vgremove 卷组名        移除卷组<br>pvremove 物理卷名物理卷会自动创建,但不会自动删除</p><p>逻辑卷的缩小,无意义,易出错<br>ext4支持缩小,但仍容易出错</p><p>rd.break console&#x3D;tty0<br>umount -o remount,rw &#x2F; &#x2F;sysroot<br>chroot &#x2F;sysroot&#x2F;<br>echo 密码 | passwd –stdin 账户 (此命令在部分系统中无法识别stdin)<br>touch &#x2F;.autorelabel<br>exit<br>reboot</p><p>nmcli c s<br>nmcli c m eth0 ipv4.addresses “172.25.0.11&#x2F;24 172.25.0.254” ipv4.dns 172.25.0.254 ipv4.method manual ipv4.dns-search group8.example connection.autoconnect yes connection.interface-name eth0<br>hostnamextl set-hostname 主机名</p><p>rm -rf &#x2F;etc&#x2F;yum.repos.d&#x2F;*<br>yum-config-manager –add-repo 地址<br>或vim &#x2F;etc&#x2F;yum.repos.d&#x2F;自定名.repo<br>[仓库名]<br>描述name &#x3D;<br>地址baseurl &#x3D;<br>是否启用enable &#x3D; 1<br>gpg签名gpgcheck &#x3D; 0<br>yum clean all<br>yum repolist</p><p>lsblk 查看硬盘情况<br>fdisk &#x2F;dev&#x2F;盘址<br>n<br>p<br>1<br>默认值<br>+5G</p><p>重复上述<br>+1G两次分号三块主分区</p><p>然后新建一块扩展分区<br>n<br>e 然后一路回车将所有空间全部分配给扩展分区<br>然后开始分配逻辑分区n 此时提示所有主分区都已经被使用,增添逻辑分区5,指定起始扇面<br>+4G<br>+1.5G</p><p>lsblk确认分区情况<br>或者partprobe立刻重新获取分区表</p><p>mkfs.ext4 &#x2F;dev&#x2F;sdb1<br>mkfx.xfs &#x2F;dev&#x2F;sdb5<br>vim &#x2F;etc&#x2F;fstab<br>mkdir &#x2F;mnt&#x2F;part{1,2}<br>&#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;part1 ext4 defaults 0 0<br>&#x2F;dev&#x2F;sdb5 &#x2F;mnt&#x2F;part2 xfs defaults 0 0<br>mount -a</p><p>fdisk &#x2F;dev&#x2F;sda1<br>n<br>p<br>全部分配<br>n<br>e<br>全部分配<br>w</p><p>partprobe刷新分区表<br>mkswap &#x2F;dev&#x2F;sda5<br>vim &#x2F;etc&#x2F;fstab<br>&#x2F;dev&#x2F;sda5 swap swap defaults 0 0<br>swapon -a<br>swapon -s</p><p>vgcreate myvg &#x2F;dev&#x2F;sdb2 &#x2F;dev&#x2F;sdb6</p><p>lvcreate -L 1G -n mylv myvg 在卷组myvg中创建逻辑卷mylv,指定大小为1G<br>mkfs.xfs &#x2F;dev&#x2F;myvg&#x2F;mylv<br>vim &#x2F;etc&#x2F;fstab<br>&#x2F;dev&#x2F;myvg&#x2F;mylv &#x2F;mnt&#x2F;lv101 xfs defaults 0 0<br>mkdir &#x2F;mnt&#x2F;lv101<br>mount -a</p><p>lvextend -L 2140M &#x2F;dev&#x2F;myvg&#x2F;mylv 这里仅需写上需要扩大到的容量,不是需要多少空间用于扩容<br>xfs_growfs &#x2F;dev&#x2F;myvg&#x2F;mylv 增长文件系统大小</p><p>rd.break console&#x3D;tty0<br>mount -o remount,rw &#x2F; &#x2F;sysroot<br>chroot &#x2F;sysroot<br>echo sj49a1 | passwd –stdin root<br>touch &#x2F;.autorelabel<br>exit reboot</p><p>nmcli c m 网卡名称 ipv4.addresses “172.25.0.11&#x2F;24 172.25.0.254” ipv4.dns 172.25.0.254 ipv4.method manual ipv4.dns-search  connection.autoconnect yes<br>hostnamectl set-hostname server0.example.com</p><p>rm -rf &#x2F;etc&#x2F;yum.repos.d&#x2F;*<br>vim &#x2F;etc&#x2F;yum.repos.d&#x2F;Download<br>[rhel]<br>name&#x3D;none for you<br>baseurl&#x3D;<br>enable&#x3D;1<br>gpgcheck&#x3D;0</p><p>yum clean all<br>yum repolist<br>yum -y install sssd autofs</p><p>fdisk<br>n<br>p<br>默认起始柱面<br>+5G<br>重复上述,将容量改为1G,1G<br>然后将剩下的全部分配给扩展分区<br>创建逻辑分区<br>n<br>+4G<br>n<br>+1536MB<br>wq<br>lsblk查看分区表</p><p>mkfs.ext4 &#x2F;dev&#x2F;sdb1<br>mkfs.xfs &#x2F;dev&#x2F;sdb5</p><p>mkdir &#x2F;mnt&#x2F;part{1,2}<br>vim &#x2F;etc&#x2F;fstab<br>&#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;part1 ext4 defaults 0 0<br>&#x2F;dev&#x2F;sdb5 &#x2F;mnt&#x2F;part2 xfs defaults 0 0<br>mount -a</p><p>fdisk &#x2F;dev&#x2F;sda<br>n<br>e</p><p>n<br>+512M</p><p>partprobe<br>lsblk<br>mkswap &#x2F;dev&#x2F;sda5<br>vim &#x2F;etc&#x2F;fstab<br>&#x2F;dev&#x2F;sda5 swap swap defaults 0 0<br>swapon -a<br>swapon -s</p><p>fdisk<br>vgcreate myvg &#x2F;dev&#x2F;sdb2 &#x2F;dev&#x2F;sdb6<br>vgs<br>lvcreate -L 1G -n mylv myvg<br>lvs<br>mkfs.xfs &#x2F;dev&#x2F;myvg&#x2F;mylv<br>vim &#x2F;etc&#x2F;fstab<br>mkdir &#x2F;mnt&#x2F;lv101<br>&#x2F;dev&#x2F;myvg&#x2F;mylv &#x2F;mnt&#x2F;lv101<br>lvextend -L 2140M &#x2F;dev&#x2F;myvg&#x2F;mylv<br>xfs_growfs &#x2F;dev&#x2F;mylv&#x2F;myvg</p><p>vgchange -s 2M myvg</p><p>linux防火墙:<br>RHEL7,8firewalld<br>老版本iptables</p><p>管理工具firewall-cmd(命令)学习时间长,比图形方便,容错高<br>firewall-config(图形)使用简单,学习成本低,容错率低</p><p>public:仅允许访问本机的ssh,dhcp,ping等少数几个服务<br>trusted:允许任何访问<br>block:阻塞任何来访请求,明确拒绝<br>drop:丢弃任何来访的数据包,直接丢弃<br>匹配即停原则,查询访问请求中源ip的地址,若有区域有真对该源ip的策略,则允许进入该区域.如果无则默认进入public</p><p>防火墙操作:查看及修改防火墙默认区域:<br>查看:firewall-cmd -get-default-zone<br>修改:firewall-cmd -set-default-zone&#x3D;区域名称</p><p>添加服务到区域,查看一个区域的详细信息<br>firewall-cmd –zone&#x3D;区域 -add-service&#x3D;服务名<br>在未输入服务名时按两下tab可以列出可支持的服务<br>firewall-cmd –zone-public –list-all<br>重载防火墙<br>firewall-cmd –reload</p><p>永久配置(不能用于默认区域)<br>firewall-cmd –permanent(加这个选项)</p><p>端口映射(转发)<br>firewall-cmd –permanent –zone&#x3D;public -add-forward-port&#x3D;port&#x3D;5423:proto&#x3D;tcp:toport&#x3D;80<br>对本地应用的端口请求重定向<br>源端口5423,协议tcp,目标端口80<br>对来自客户机访问端口1的请求自动映射到端口2处理</p><p>firewall-cmd –permanent –zone&#x3D;public -add-forward-port&#x3D;port&#x3D;5423:proto&#x3D;tcp:toport&#x3D;80</p><p>firewall-cmd –permanent –zone&#x3D;public -add-forward-port&#x3D;port&#x3D;8234:proto&#x3D;tcp:toport&#x3D;80</p><p>端口号:用于表示服务或程序的编号(让访问的客户机能够找到服务器上对应的程序)</p><p>端口范围是0~65535(2^16 -1)<br>程序的端口号可变,也允许一个服务或程序有多个端口号</p><p>常见协议的默认端口号<br>http超文本传输协议:80,8080(java)<br>https安全的超文本传输协议:443<br>ftp文件传输协议:21<br>ssh远程链接:22<br>tftp简单地文件传输协议:69<br>dns域名解析协议:53<br>smtp发邮件协议:25<br>pop3收邮件协议:110</p><p>selinux:一套增强系统安全的 强制 访问控制 体系<br>运行模式,关键在于强制性和访问控制<br>enforcing 强制<br>permissive 宽松<br>上述是启用状态下<br>disable 禁用</p><p>强制:直接采用selinux的策略强制禁止认为不安全的行为<br>宽松:不会直接禁止,只会警告并记录到日志文件<br>禁用:啥都没有,策略也没有,日志也不记录</p><p>切换模式:在启用状态下切换为强制或宽松为<br>setenforce 1&#x2F;0<br>查看当前模式:getenforce<br>如果将selinux从启用切换成禁用必须修改配置文件永久配置,重启后生效(启动时无法修改罢了)<br>vim &#x2F;etc&#x2F;selinux&#x2F;config</p><p>firewall-cmd –permanent –zone&#x3D;public -add-forward-port&#x3D;8234:proto&#x3D;tcp:toport&#x3D;80<br>systemctl restart firewalld<br>systemctl status firewalld<br>firewall-cmd –zone&#x3D;public –list-all</p><p>简单文件共享服务:NFS文件共享NetworkFileSystem网络共享服务<br>协议NFS,PRC<br>设置防火墙默认区域为trusted<br>客户端:classroom<br>服务端:server0<br>firewall-cmd set-defaults-zone&#x3D;trusted<br>yun-config-manager –add-repo<br>yum clean all<br>yum repolist<br>yum -y install nfs-utils<br>创建共享目录<br>mkdir&#x2F;nfs_share<br>echo “hello world” &gt; &#x2F;nfs_share&#x2F;test.txt 创建测试用文件</p><p>修改配置文件<br>vim &#x2F;etc&#x2F;exports<br>&#x2F;nfs_share 172.25.0.254(ro)<br>systemctl restart nfs-server<br>systemctl enable nfs-server</p><p>启动服务并设置服务开机自启<br>systemctl enable nfs-server<br>systemctl restart nfs-server</p><p>mkdir &#x2F;nfs<br>vim etc&#x2F;fstab<br>ip地址:共享目录的路径 挂载点 文件系统类型(nfs) defaults,_ netdev 0 0</p><p>ls &#x2F;nfs</p><p>Samba:文件共享服务<br>适用范围:Windows和Linux的跨平台共享<br>协议:SMB,CIFS<br>为客户端提供共享使用的目录<br>环境:防火墙默认区域设置为trusted</p><p>安装服务包<br>yum -y install samba<br>创建共享目录<br>mkdir &#x2F;smb_share<br>建立samba共享账号:专门用于验证samba共享服务的用户<br>建立samba账号前,需要建立一个同名系统用户,shell使用nologin,且不设置密码<br>samba共享账号采用独立的密码设置<br>pdbedit -a 用户名<br>然后设置密码 </p><p>删除samba账号:pdbedit -x 用户名<br>查看所有samba账号<br>pdbedit -L<br>修改配置文件:&#x2F;etc&#x2F;samba&#x2F;smb.conf<br>[共享名称,挂载时使用]<br>path&#x3D;&#x2F;sam_share 共享目录的路径</p><p>systemctl restart&#x2F;enable smb</p><p>使用及管理KVM虚拟机<br>KVM基于系统内核的虚拟机<br>virt-manager 图形化虚拟机管理工具<br>virsh 字符界面虚拟机管理</p><p>RHEL7自动安装<br>kickstart+PXE 服务器批量安装程序<br>PXE是服务器,与其他服务器之间通过网络进行连接.刚刚狗辉的服务器仅能通过DHCP分配地址,因为没有系统,无法通过其他方式赋予ip地址.所以PXE在此也可以称作是DHCP服务器<br>PXE这一部分包含DHCP协议 内核 驱动程序 菜单文件<br>在PXE与服务器之间还有TFTP服务,软件包(yum源)平时通过PXE服务器进行共享,可以通过很多种服务协议共享(http等)<br>装机时的自动配置文件称作应答文件,操作者可以提前写好以供装机使用<br>通过多种服务组合在一起装机称作PXE(Pre-boot execution Environment)预启动执行环境<br>PE(预启动环境),在操作系统之前运行<br>用于安装操作系统<br>ISO镜像:压缩包的一种格式</p><p>PXE优点:批量,自动化,远程,不需要介质(这点很重要)<br>主机的网卡具有PXE功能,PXE客户端(pxe-client)<br>计算机一般设置为硬盘引导,但是出厂时为网卡引导.将客户端调用到内存中执行起来,通过该程序(pxe-client)与PXE服务器联系,开始装机</p><p>工作模式:<br>网卡中集成了pxe-client客户端,当计算机进行引导时会从网卡中将pxe客户端调入内存中运行,此后pxe-client会获取pxeserver配置,显示菜单,根据应答文件完成装机</p><p>服务组件:<br>DHCP:提供网络<br>TFTP:共享内核,引导,驱动<br>HTTP&#x2F;FTP&#x2F;NFS:提供yum源和应答文件</p><p>CE环境介绍<br>classroom:考官,讲师机器,提供必要服务,需先开此台<br>server0:服务端<br>desktop0:客户端</p><p>准备工作:<br>配置Ipv4地址,同网段之间的通信无序网关,也不需要DNS<br>nmcli c m eth0 ipv4.method manual ipv4.addresses ip地址 connection.autoconnect yes<br>启动网卡nmcli connection up eth0<br>物理机去网络中心中设置VMware虚拟网卡的高级TCP&#x2F;IP属性,使其和虚拟机设置的ip地址相同<br>关闭防火墙,然后就可以进行连接了<br>systemctl stop firewalld<br>systemctl disable firewalld<br>ssh ip地址<br>修改主机名<br>hostnamectl set-hostname 主机名</p><p>配置yum源<br>ssh root@主机ip地址<br>fstab中可以查看到仓库的挂载地址,通过xshell的sz命令可以将其导出到本地<br>sz 地址<br>然后在虚拟机的光驱中选中ISO映像文件<br>iso文件并不能直接作为yum源,必须导出后才可以<br>设备状态勾选已连接和启动时连接</p><p>放入光盘映像<br>挂在光盘<br>mkdir &#x2F;dvd 创建挂载点<br>&#x2F;dev&#x2F;cdrom &#x2F;dvd iso9660 defaults 0 0<br>mount -a<br>ls &#x2F;dvd&#x2F; 即可查看到光盘内的内容</p><p>yum-config-manager或者直接vim &#x2F;etc&#x2F;yum.repo.d&#x2F;文件名<br>[rhe17]<br>name<br>baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;dvd    file在此处为本地文件协议<br>enabled&#x3D;1<br>gpgcheck&#x3D;0</p><p>yum clean all<br>yum repolist<br>修改配置文件<br>subnet网段  192.168.4.0 netmask子网掩码     255.255.255.0<br>{<br>range IP地址的分配范围,此处为100~200   192.168.4.100   192.168.4.200;<br>default-lease-time默认超时时间              600;<br>max-lease-time最大超时时间                  7200;<br>next-server     192.168.4.7;执行下一个IP地址<br>filename    “pxelinux.0”;指定网卡引导文件名称<br>}<br>最后两行如果不配置pxe服务器可以不要<br>next-server是告诉客户机pxe服务器在哪里<br>filename告诉客户机网络装机的配置文件名称,是二进制文件,指定服务器自动完成装机<br>安装一个软件包以获取引导文件</p><p>vim &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf写入上述配置<br>systemctl restart dhcpd<br>systemctl enable dhcpd</p><p>创建一台空白虚拟机<br>VMware Workstation新建虚拟机<br>自定义<br>稍后安装操作系统<br>客户机操作系统选择Linux,版本选择red hat enterprise Linux 7 64位<br>之后自定义即可<br>网络类型选择仅主机网络<br>之后默认即可</p><p>测试DHCP<br>VMware的虚拟机默认为PXE启动,启动后测试是否能自动获取DHCP服务<br>如果未能拉起,执行systemctl status dhcpd 查看服务状态是否为active,然后重启客户机重新获取DHCP</p><p>搭建tftp服务<br>安装软件包:<br>yum -y install tftp*  一键安装tftp的所有软件包</p><p>修改配置文件<br>vim &#x2F;etc&#x2F;xinetd.d&#x2F;tftp<br>将disable改为no<br>systemctl restart xinetd.service 重启服务,该服务默认自启,也可以自行添加自启</p><p>默认共享路径:&#x2F;var&#x2F;lib&#x2F;tftpboot</p><p>获取pxelinux.0</p><p>which ifconfig查询命令本体的文件路径<br>yum provides &#x2F;路径  查询是哪个软件包提供了这个命令&#x2F;文件,如果不知道要查找的是命令还是文件,可以*&#x2F;文件名.</p><p>yum provides *&#x2F;pxelinux.0<br>查询哪个软件包提供了该文件<br>是由syslinux-4.05-8.e17.x86_64提供的<br>同时下方的filename也会写出其软件包文件的存放地址</p><p>yum -y install syslinux安装此软件包<br>ls filename的路径查看是否有该文件</p><p>部署预执行文件<br>cp 预执行文件的路径 共享路径(&#x2F;var&#x2F;lib&#x2F;tftpboot)</p><p>部署菜单文件:<br>install和test镜像的文件,默认是测试镜像文件,但是一般情况下都需要install镜像<br>一般情况下预执行文件中规定了存放路径存放在默认共享路径下<br>菜单文件存放路径:&#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux.cfg<br>命名必须为default</p><p>从光盘中部署菜单文件到指定位置<br>ls &#x2F;dvd&#x2F;isolinux&#x2F; 即可查找到菜单文件(该目录下的isolinux.cfg)<br>cp 菜单文件 指定位置,并重命名为default<br>ls -l查询是否成功<br>该文件默认只读,需要添加可写权限<br>chmod 666 文件或者chmod u+w 文件</p><p>验证:启动待安装虚拟机,查看是否可以连接上TFTP并且获取菜单文件(OK) 此时还未部署镜像文件,除了could not find kernel image之外,boot:也是空的</p><p>部署文件可以通过通配符部署,也可以<br>cp &#x2F;dvd&#x2F;isolinux&#x2F;{vesamenu.c32,splash.png,vmlinuz,initrd.img} &#x2F;var&#x2F;lib&#x2F;tftpboot<br>部署菜单图形模块,背景图片,启动内核,驱动程序<br>少一样都报错<br>此时可以ls &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F; 与ls &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux.cfg&#x2F;查看文件是否全部部署完毕</p><p>修改菜单文件:<br>vim &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux.cfg&#x2F;default<br>第二行的timeout超时时间改为60<br>第11行的menu title 可以随意改为别的<br>65gg切换到第65行<br>100dd删除100<del>65行所有的内容,再修改61</del>65行<br>62行为菜单第一行的内容,可以改为自己想要的样式<br>63行添加menu default使其拥有倒计时,并指定菜单文件<br>65行改为append initrd&#x3D;initrd.img 使用指定驱动程序</p><p>DHCP:IP地址,next-server,pxelinux.0 为此三样操劳<br>TFTP:pxelinux.0 简单传输此文件<br>pxelinux.0:&#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux.cfg&#x2F;default 仅能存放于此<br>default:vesamenu.c32,splash.png,vmlinuz,initrd.img<br>然后初步验证即可</p><p>部署HTTP服务,共享光盘的YUM源<br>安装http服务的软件包<br>yum -y install httpd</p><p>将光盘挂载到http的默认网页文件目录(光盘内容以网页的文件形式共享)<br>在网页文件目录建立挂载点<br>mkdir &#x2F;var&#x2F;www&#x2F;html&#x2F;rhe17<br>fstab输入<br>&#x2F;dev&#x2F;cdrom &#x2F;var&#x2F;www&#x2F;html&#x2F;rhe17 iso9660 defaults 0 0</p><p>卸载原有的光驱挂载 umount &#x2F;dev&#x2F;cdrom<br>重新挂载到新的挂载点mount -a</p><p>重启httpd服务并设置开机自启</p><p>生成应答文件<br>修复yum源(之前的路径已经空了)<br>file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;rhel7<br>安装辅助图形工具<br>yum -y install system-config-kickstart.noarch<br>system-config-kickstart启动图形工具<br>export LANG&#x3D;zh_CN.UTF-8) 可以将系统语言临时切换为中文</p><p>图形工具中软件包可能会提示下载信息失败,软件包选择被禁止<br>此时打开yum源,将仓库名改为development即可解决此bug</p><p>时区可改<br>根密码:root管理员密码<br>确认密码<br>加密随意<br>安装后重新引导系统<br>可以勾选在文本模式中执行安装</p><p>安装方法改为HTTP共享,HTTP服务器写IP地址即可<br>HTTP目录写子目录名称即可,完整路径出错</p><p>安装新引导装载程序</p><p>清除主引导记录<br>删除所有现存分区<br>初始化硬盘标签<br>可添加交换分区防止安装过程中内存不足</p><p>网络配置添加一个配置,一切默认即可</p><p>验证默认</p><p>防火墙禁用<br>安全级别禁用防火墙</p><p>显示配置默认</p><p>软件包选择基本即可,别的也行</p><p>后两项空即可</p><p>操作完成后左上角保存到&#x2F;root  </p><p>vim &#x2F;root&#x2F;ks.cfg即可查看应答文件</p><p>通过http服务共享kickstart文件<br>cp &#x2F;root&#x2F;ks.cfg &#x2F;var&#x2F;www&#x2F;html&#x2F;</p><p>vim &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pxelinux.cfg&#x2F;default</p><p>在最后一行的同行空格ks&#x3D;<a href="http://192.168.4.7/ks.cfg">http://192.168.4.7/ks.cfg</a><br>将ks的连接低脂写到配置文件中</p><p>通过DHCP配置了ip地址,next-server,filename,”pxelinux.0”<br>tftp:共享了pxelinux.0<br>pxelinux.0:指定了菜单文件,必须存放在tftpboot共享目录下的pxelinux.cfg中<br>default:vesamenu.c32,splash.png,vmlinuz,initrd.img→ks.cfg<br>ks.cfg:时区,键盘,分区等装机预设<br>http:挂载光盘内容</p><p>磁盘:数据的容器,空间巨大<br>分区:分类存放,便于查找<br>块存储:分类更精细,切块<br>文件系统格式:连续的扇区组成一个块,常见的4KB<br>一般每1&#x2F;2KB设置一个inode<br>DHCP的安装:<br>yum install -y dhcp<br>subnet网段  192.168.4.0 netmask子网掩码     255.255.255.0<br>{<br>range IP地址的分配范围,此处为100~200   192.168.4.100   192.168.4.200;<br>default-lease-time默认超时时间              600;<br>max-lease-time最大超时时间                  7200;<br>next-server     192.168.4.7;执行下一个IP地址<br>filename    “pxelinux.0”;指定网卡引导文件名称<br>}<br>tftp<br>将&#x2F;mnt&#x2F;iso&#x2F;isolinux下的vesamenu.c32;initrd.img;splash.png;vmlinuz拷贝到TFTP目录下<br>&#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;pexlinux.cfg&#x2F;default 菜单文件<br>vesamenu 图形模块<br>initrd  驱动程序<br>splash.png 背景图片<br>vmlinuz  内核<br>pxelinux.0 预处理文件<br>firewall-cmd –permanent –zone&#x3D;public</p><p>系统管理高级设置sudo与ipv6&amp;team<br>系统权限管理<br>su [-] 用户名    快速切换用户,root切换无序密码,-可以切换到对方的环境<br>su - -c “命令” 用户名 以某个用户的身份执行命令,无用户名则请求管理员权限<br>以普通用户的身份启动httpd服务<br>systemctl start httpd<br>仅验证完成,并未真正启动服务<br>sudo(Super or another Do)<br>作用:管理员可以为普通用户授予执行命令的许可</p><p>实验准备:useradd tom<br>echo 123 | passwd –stdin tom<br>vim &#x2F;etc&#x2F;sudoers<br>用另外一种方式打开没有高亮显示<br>该文件默认为只读</p><p>在用户root下方一行输入<br>tom ALL&#x3D;&#x2F;user&#x2F;bin&#x2F;systemctl * httpd,&#x2F;user&#x2F;bin&#x2F;vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf<br>用户 tom ,在 任何主机 上执行systemctl * httpd和vim httpd.conf 时拥有最高权限<br>此后执行这两个命令前带上sudo即可通过用户tom而非root用户的密码执行带有最高权限的命令</p><p>sudo -l查看自己拥有的权限<br>提权时必须写上命令的绝对路径,可以使用which查询命令的本体文件在哪<br>which 命令1 命令2 命令3  连续查询多条命令<br>groupadd webadmin<br>useradd web1<br>useradd web2<br>gpasswd -a web1 webadmin<br>gpasswd -a web2 wdbadmin<br>再分别设置密码<br>vim &#x2F;etc&#x2F;sudoers<br>在%wheel下方即可添加组,组名前需要%,其他和用户提权差不多</p><p>sudoers中有一些命令组,使用这些命令组等同于提权多条相关命令,使用前需要将命令组(别名)前面的#删除</p><p>高级网络管理:<br>ipv6<br>128个二进制组成,以:分隔8部分<br>两台主机之间的通信需要IP地址,目前来说ipv4地址可用数岌岌可危,所以推出了ipv6<br>ipv4为32个二进制数,ipv6为128个<br>以:分隔8部分,4个16进制表示每段内连续的前置0可省略,连续的多个:可简化为::<br>例如:<br>2008:ac18:0000:0000:0000:0000:0000:0305&#x2F;64<br>2008:ac18::0305&#x2F;64</p><p>nmcli n m eth0 ipv6.addresses 2008:ac18::305&#x2F;64 ipv6.method manual connection.autoconnect yes<br>nmcli n m eth0 nat 192.168.0.0&#x2F;24</p><p>ipv6对内外网的划分没有ipv4严格<br>nat可以转换内外网ip地址,此时映射出去的IP地址为ip段:端口<br>ifconfig查询网卡信息,ipv6地址可以通过ping6查看是否配置成功,直接ping不通<br>ping -c 4 ipv6地址<br>发送四个包后停止ping</p><p>网卡链路聚合(聚合链路,网卡绑定,网卡桥,聚合连接)<br>防止其中一张网卡因为特殊原因而无法正常工作<br>将两张物理网卡绑到一起成为一张逻辑网卡(team)<br>在客户端眼中是一张网卡<br>链路聚合有两种模式:<br>热备份(activebackup):在骨干网设备连接中,单一链路的连接很容易实现,但一个简单的故障就会造成网络的中断.因此在实际网络组建的过程中,为了保持网络的稳定性,在多台 交换机 组成的网络环境中,通常都使用一些备份连接,以提高网络的健壮性、稳定性. 这里的备份连接也称为备份链路或者冗余链路.备份链路之间的交换机经常互相连接,形成一个环路,通过环路可以在一定程度上实现冗余.<br>轮询式(roundrobin):流量负载均衡,轮流询问主机实际地址</p><p>nmcli connection add type team  con-name team0 ifname team0 config ‘{“runner:{“name”:activebackup}}’</p><p>nmcli c add type team<br>con-name team0 ifname team0<br>config ‘{“runner”:{“name:activebackup”}}’ 配置类型</p><p>更改ipv6后主机名可能消失</p><p>nmcli c add type team<br>con-name team0<br>ifname team0<br>autoconnect yes<br>config ‘{“runner”:{“name”:”activebackup”}}’<br>nmcli c 添加 类型 team<br>配置文件名:config name:team0<br>虚拟网卡接口名:team0<br>设置开机自启<br>链路聚合的工作模式:热备份</p><p>如果打错需要nmcli c delete team0<br>将物理网卡添入team0组<br>nmlic connection add type team-slave con-name team0-1 ifname eth1 master team0<br>接口名称要写实际网卡名</p><p>nmcli c add type team ifname team0 con-name team0 config ‘{“runner”:{“name”:activebackup}}’<br>nmcli 连接 添加 类型 链路聚合 接口名称 team0 连接名称 team0 配置 热备份配置</p><p>nmcli c add type team-slave con-name team0-1 ifname eth1 master team0<br>nmcli 连接 添加 类型 组成员 连接名称 team0-1 接口名 eth1(实际存在的物理网卡接口名) 组名 team0</p><p>为链路聚合的网卡配置ip地址时,输入的不是单张网卡名而是组名<br>nmcli c m team0 ipve.method manual ipv4.addresses 192.168.1.1&#x2F;24 connection.autoconnect yes<br>nmcli c m team0-1<br>设置网卡组成员开机自动连接:<br>nmcli c m team0-1 connection.autoconnect yes<br>nmcli c m team0-w connection.autoconnect yes<br>激活网卡组<br>nmcli connection up team0<br>验证:ifconfig team0<br>teamdctl team0 state<br>每张网卡的link理应为up状态,同时活跃中的网卡会随机选出一张作为主网卡<br>ifdown&#x2F;ifconfig eth1 down<br>此时会将网卡1停止,另一张卡成为主网卡,此时若eth1恢复,那么仍处于备用网卡,主网卡是eth2<br>ifconfig eth2 up<br>teamdctl team0 state</p><p>服务器搭建:<br>邮箱服务:<br>基础邮件服务使用<br>SMTP发邮件协议,默认端口25<br>pop3收邮件协议,默认端口110<br>异域邮件经过dns解析得到IP地址,根据ip地址找到服务器,然后转发给其他邮箱</p><p>构建邮件服务器:<br>server0作为服务端<br>安装yum -y install postfix<br>vim &#x2F;etc&#x2F;postfix&#x2F;main.cf<br>set nu<br>99行#myorigin&#x3D; $mydomain 改为 myorigin&#x3D;server0.example.com<br>此时本域就变成了server0.example.com<br>指定本域域名后,会自动补全邮箱后缀</p><p>116行将inet_interfaces &#x3D; localhost 改为 inet_interfaces all  开放本机所有网络接口供邮件服务使用<br>164 全删,改为mydestination &#x3D; server0.example.com<br>指定本域域名</p><p>重启服务<br>systemctl restart postfix.service<br>systemctl enable postfix.service</p><p>本机验证<br>useradd yg<br>useradd xln</p><p>发送邮件<br>mail发信<br>mail -s ‘标题’ -r 发件人 收件人    这是一个交互式命令,回车后即可输入正文内容<br>正文编辑完成后,另起一行使用单独的句号.才能使用回车结束编辑<br>EOT</p><p>查看邮件:<br>mail -u xln<br>然后输入1即可查看第一条邮件<br>输入q或者quit退出查看</p><p>非交互式发件:<br>echo 邮件正文内容 | mail -s ‘标题’ -r 发件人 收件人</p><p>搭建及管理ftp服务器<br>配置ftp<br>安装软件包vsftpd<br>yum -y install vsftpd<br>重启和开机自启vsftpd服务</p><p>vsftpd默认共享路径:<br>&#x2F;var&#x2F;ftp&#x2F;   默认有一个pub目录,这只是一个子目录,不能共享<br>mkdir &#x2F;var&#x2F;ftp&#x2F;rhel17<br>将光盘内部挂载到ftp默认共享目录<br>vim &#x2F;etc&#x2F;fstab<br>&#x2F;dev&#x2F;cdrom &#x2F;var&#x2F;ftp&#x2F;rhel7 iso9660 defaults 0 0<br>mount -a<br>此时可以用光盘内容配置yum源<br>rm -rf &#x2F;etc&#x2F;yum.repos.d&#x2F;*<br>新建一个yum源<br>[rhel7]<br>name&#x3D;<br>baseurl&#x3D;<a href="ftp://172.25.0.11/rhel7">ftp://172.25.0.11/rhel7</a>    ip写的是server0的地址<br>enable&#x3D;1<br>gpgcheck&#x3D;0<br>下载ftp包<br>登录方式有:<br>浏览器访问IP<br>文件夹左侧Connect to server<br>还有命令行下载ftp包后登录<br>yum -y install ftp<br>ftp ip地址<br>ftp 172.25.0.11<br>Anonymous  匿名登录</p><p>命令行下可以输入get 文件名<br>并不支持输入路径<br>ls<br>cd rhel7<br>ls<br>cd isolinux<br>ls<br>get 文件名  下载路径在终端当前位置</p><p>在ftp中切换终端当前目录时使用<br>lcd 路径<br>quit退出</p><p>vsftpd共享路径默认在&#x2F;var&#x2F;ftp</p><p>开启ftp的上传功能<br>Anonymous登录<br>空密码直接回车即可<br>put 当前目录下的文件即可上传</p><p>上传失败时,可以查看配置文件<br>vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</p><p>其中找到上传配置项和创建文件配置项<br>anon_upload_enable&#x3D;YES<br>anon_mkdir_write_enable&#x3D;YES<br>listen_ipv6&#x3D;NO<br>chmod o+w &#x2F;var&#x2F;ftp&#x2F;pub<br>默认是被注释的,解除后即可上传</p><p>修改任何配置文件后必须重启服务才可生效<br>配置文件中会提示selinux可能会拦截文件上传<br>如果防火墙未关闭,也无法正常上传文件<br>亦或者是文件夹权限不足</p><p>setenforce 0</p><p>逻辑卷(LVM)管理:<br>动态对分区进行扩缩空间大小<br>整合分散的空间</p><p>将众多物理卷PV组成卷组VG,再从卷组中划分逻辑卷LV<br>PE物理扩展:充当物理卷上最小存储块的小块数据<br>PV物理卷:用于注册地基础物理设备,以便在卷组中使用<br>VG卷组:由一个或多个物理卷组成,相当于存储池<br>LV逻辑卷:根据卷组中的空闲物理范围创建,提供应用,用户和操作系统所使用的存储设备</p><p>管理逻辑卷:<br>建立LVM分区</p><p>检查物理设备,创建新分区<br>lsblk<br>fdisk &#x2F;dev&#x2F;sdb<br>m获取帮助,p打印现有分区,n创建,t更改分区类型,w写入更改,q退出</p><p>创建物理卷(非必须)<br>命令格式:pvcreate 闲置分区路径</p><p>创建卷组:vgcreate 卷组名称 限制分区路径<br>查看卷组信息:vgs<br>实际创建出来的卷组空间可能比设定卷组小,因为PE的存在</p><p>SSH全称secure shell protocol,专门为远程登录回话和其他网络安全服务提供的安全性协议<br>客户机发送连接请求给服务器<br>服务器发送公钥给客户机<br>客户机用服务器密码将公钥加密并发送<br>服务器用密钥解密并从而验证身份</p><p>服务器搭建之NFS与SMB<br>NFS共享,Linux&amp;Linux之间的共享<br>Network File System网络文件系统<br>为客户机提供共享使用的文件夹<br>协议:NFS,PRC 都是用TCP&#x2F;UDP协议 前者UDP2049,后者UDP111</p><p>文件系统类型:<br>本地文件系统:ext3&#x2F;4,xfs,swap,ntfs 本地磁盘<br>伪文件系统:&#x2F;proc,&#x2F;sys 内存空间<br>网络文件系统:NFS  网络存储空间</p><p>一台客户端上可以挂载多台不同系统的存储空间<br>但是不能将同一个文件拆分储存<br>分布式存储可以解决该问题<br>分布式存储可以跨地域,一份数据存储到多个空间.通过哈希算法将数据存放在多台服务器中,当一台服务器出错时,其他服务器仍可使用.拆分后的文件存储也更快</p><p>服务端:<br>安装软件包<br>yum -y install nfs-utils 在练习环境下默认已安装</p><p>配置<br>创建共享目录<br>mkdir &#x2F;nfs0<br>修改配置文件<br>vim &#x2F;etc&#x2F;exports<br>&#x2F;nfs0 *(ro)</p><p>重启服务,设置开机自启<br>systemctl restart nfs-server<br>systemctl enable nfs-server</p><p>客户端:<br>mkdir &#x2F;nfs_mount0 创建挂载点<br>vim &#x2F;etc&#x2F;fstab <br>172.25.0.11:&#x2F;nfs0 &#x2F;nfs_mount0 NFS defaults 0 0<br>网络设备的IP地址:&#x2F;网络目录<br>mount -a</p><p>检验:<br>df -h &#x2F;nfs_mount0</p><p>保护NFS文件共享<br>默认情况下,NFS不需要身份验证<br>krb5p可保障文件系统安全<br>krb5p生成密钥对,公钥在服务器端,私钥在客户端,当客户端访问服务端请求文件传输等操作时,通过公私钥的配对即可自动验证,无需用户多次输入<br>公钥和密钥都是随机字符<br>在数据传输时会附加校验码,一般为md5加密,防止数据在传输过程中被篡改</p><p>在server0配置nfs服务<br>以只读方式共享目录&#x2F;public<br>读写方式共享&#x2F;protected<br>访问&#x2F;protected需要通过kerberos安全加密<br>使用指定URL提供的密钥<br>目录?protected包含名为project拥有人为ldapuser0的子目录<br>用户ldapuser0仅能以读写方式访问&#x2F;protected&#x2F;project</p><p>安装软件包 yum -y install nfs-utils<br>mkdir -p &#x2F;public &#x2F;protected&#x2F;project 多级创建需要-p<br>ls -ld &#x2F;protected&#x2F;project&#x2F;<br>chown ldapuser0 &#x2F;protected&#x2F;project</p><p>su ldapuser0<br>exit</p><p>vim &#x2F;etc&#x2F;exports<br>&#x2F;public *(ro)<br>&#x2F;protected *(rw,sec&#x3D;krb5p)<br>下载证书到指定路径并命名<br>wget -O &#x2F;etc&#x2F;krb5.keytab 地址<br>-O用于修改路径与名<br>置开机自启<br>systemctl restart nfs-server nfs-secure-server<br>重启nfs服务与安全服务</p><p>echo $? 查看上一个输出是否报错</p><p>创建挂载点:<br>mkdir &#x2F;mnt&#x2F;nfsmount &#x2F;mnt&#x2F;nfssecure<br>下载证书<br>wget -O &#x2F;etc&#x2F;krb5.keytab 地址</p><p>systemctl restart nfs-secure 在客户端重启管理证书安全的服务,后面不需要server<br>systemctl enable nfs-secure</p><p>查看可访问的NFS服务<br>showmount -e ip</p><p>设置开机自动挂载<br>域名:&#x2F;public &#x2F;mnt&#x2F;nfsmount nfs defaults,_netdev 0 0<br>域名:&#x2F;protected &#x2F;mnt&#x2F;nfssecure nfs defaults,_netdev,sec&#x3D;krb5p 0 0<br>mount -a<br>df -h 路径 查看挂载是否成功</p><p>登录需要ssh ldapuser0@desktop0<br>以ldapuser用户的身份登录desktop0<br>输入密码</p><p>chmod o+w &#x2F;protected&#x2F;</p><p>服务搭建之samba<br>也是一种文件类型</p><p>安装软件包<br>yum -y install samba<br>创建共享目录<br>mkdir &#x2F;smb0<br>创建samba账号<br>useradd -s &#x2F;sbin&#x2F;nologin tom<br>pdbedit -a tom<br>修改配置文件<br>vim &#x2F;etc&#x2F;samba&#x2F;smb.conf</p><p>shift+G或者慢慢转至尾行<br>新增<br>[zhyx] 配置项标志名<br>path &#x3D; &#x2F;smb0 共享目录路径<br>write list &#x3D; tom   为服务添加可写用户列表<br>重启服务并设置开机自启<br>systemctl restart smb<br>systemctl enable smb</p><p>若报错需查看当前登录的用户是否正确<br>安装支持cifs文件系统的软件包<br>yum -y install cifs-utils<br>创建挂载点<br>mkdir &#x2F;smb_mount 0<br>设置开机自动挂载<br>&#x2F;&#x2F;server0.example.com&#x2F;zhyx &#x2F;smb_mount cifs defaults,_netdev,username&#x3D;tom,password&#x3D;123 0 0<br>&#x2F;&#x2F;域名:&#x2F;共享名称 &#x2F;挂载点 文件类型<br>mount -a<br>systemctl stop firewalld<br>echo 123 &gt; &#x2F;sab0&#x2F;101.txt<br>cat &#x2F;smb_mount0&#x2F;101.txt</p><p>修改服务,使samba可写<br>selinux,文件权限,samba可写 需要验证此三样<br>setenforce 0  需要设置宽松或者修改selinux的samba服务的波尔值<br>波尔值是一些权限的开关,一般开关为1&#x2F;0.<br>对于一个配置项,仅有两种情况(开关),此时称作波尔项<br>getsebool -a | grep samba<br>将export相关参数打开(rw)即可<br>setsebool -P samba_export_all_rw on<br>-P使其变为永久更改<br>setfacl -m u:tom:rwx &#x2F;smb0&#x2F;  </p><p>配置多用户的samba服务器<br>针对同一个共享目录使不同的用户拥有不同的访问权限<br>要求共享名为devops<br>共享目录devops可以被浏览<br>用户kenji能以度的方式访问共享<br>用户chihiro能以读写方式访问共享</p><p>useradd -s &#x2F;sbin&#x2F;nologin 用户<br>pdbedit -a 用户名<br>重启服务设置开机自启<br>systemctl restart smb<br>systemctl enable smb<br>设置selinux的波尔值<br>getsebool -a | grep samba<br>setsebool -P samba_export_all_rw on<br>给用户赋予读写执行权限acl<br>setfacl -m u:chihiro:rwx &#x2F;devops</p><p>客户端:<br>创建挂载点:<br>mkdir &#x2F;mnt&#x2F;dev</p><p>安装支持cifs文件系统的软件包<br>yum -y install cifs-utils</p><p>设置开机自动挂载<br>vim &#x2F;etc&#x2F;fstab<br>&#x2F;&#x2F;server0.example.com&#x2F;devops &#x2F;mnt&#x2F;dev cifs defaults,_netdev,username&#x3D;用户名,password&#x3D;密码,multiuser,sec&#x3D;ntlmssp 0 0<br>mount -a<br>cifscred add -u chihiro server0 使一名用户临时拥有权限</p><p>服务器搭建:<br>MariaDB数据库<br>数据库是一些数据的集合,一般是存放关系型数据的表格<br>关系型数据:表格中同一行具有一定关联<br>数据库管理系统DBMS:用于操作和管理数据库的大型软件平台<br>优点:可以快速检索数据</p><p>常见的关系型DBMS:<br>甲骨文:MySQL,Oracle<br>微软:SQL Server<br>IBM:DB2<br>社区开源:MariaDB</p><p>shell<br>cat &#x2F;etc&#x2F;shells 查看系统支持的shell版本<br>echo $SHELL  查看用户的默认shell<br>echo $0 查看当前系统的默认shell<br>通常情况下带有.sh后缀的为脚本文件,没带的也可能是,但不能直观的看出来<br>bash shell脚本的第一行以#!开头,表示文件是可执行的shell脚本.#!后跟命令解释器,告诉操作系统脚本解释器是&#x2F;bin&#x2F;bash.由于bash shell脚本由shell解释,因此开头是#! &#x2F;bin&#x2F;bash<br>执行脚本的方法:<br>当前目录下输入.&#x2F;脚本名<br>或者输入绝对路径</p><p>也可以bash&#x2F;sh&#x2F;source 脚本.sh<br>source等效于.&#x2F;脚本.sh</p><p>脚本:一个可执行的可以实现某种预设功能的文本文件<br>脚本文件命名:自定义.sh<br>可以不加,但是代码无高亮,同时也难以直观的看出这是脚本<br>加上#!&#x2F;bin&#x2F;bash后再进入则会代码高亮,此时系统识别出这是一个脚本<br>声明环境:#! &#x2F;bin&#x2F;bash<br>必要的注释:#注释<br>可执行代码:(逻辑+命令结构)</p><p>shell脚本编码常用工具:<br>|将前方命令的结果交由后方的命令进行二次处理<br>输出重定向:</p><blockquote><p>覆盖,只收集正确输出</p><blockquote><p>追加<br>2&gt;:只收集错误输出<br>&amp;&gt;:收集正确和错误输出<br>黑洞设备:&#x2F;dev&#x2F;null   粉碎输出结果<br>当shell脚本中执行的命令时不想要的输出结果,可以使用重定向将输出结果重定向到黑洞设备<br>整数运算:&amp;[+-*&#x2F;%],仅支持整数运算,&#x2F;向下取整,%取余<br>取消字符的特殊意义(转义)<br>echo $LANG 输出为语言+编码格式<br>echo ‘$LANG’  此时取消了$的特殊含义,输出仅为$LANG<br>或者使用:取消后方一个字符的特殊含义<br>$LANG2 → $LANG2<br>$LANG\2 → 语言,编码格式2<br>将2分离出整体</p></blockquote></blockquote><p>为变量赋值<br>变量名&#x3D;$(命令)<br>echo $变量名 即可输出结果<br>也可以a&#x3D;’内容’进行赋值,什么都不加则将变量值清空</p><p>变量:以不变的名称存放可变的值<br>查看变量值:echo $变量名 或 echo $(),有时无法直接识别,所以需要()<br>例如echo $LANG2,此时就无法正确输出语言格式变量<br>变量名仅能以字母,数字,下滑线组成,严格区分大小写,不能以数字开头(系统自带变量除外)</p><p>四大类变量:<br>自定义变量:用户自主设置,修改及使用<br>环境变量:系统定义并赋值,用户可以直接调用(常见:$USER,$LANG,$PATH,&amp;HOME,$RANDOM)<br>$PATH 表示系统执行命令时的搜索路径<br>$RANDOM 获取随机数<br>如果想要自定义一条命令,可以将自己写的脚本存放至$PATH的搜索路径下<br>位置变量:由系统定义并赋值,用户可以直接调用<br>作用:执行脚本时可以用作参数<br>脚本中写上yum -y install $1<br>脚本 httpd sssd则可以安装httpd,$1表示后跟随的第几个参数,此处仅使用第一个参数httpd.<br>多参数$1,$2,$3…$(10),二位数及以上必须使用()括起来<br>预定义变量:由系统定义并赋值,用户可直接调用<br>$?:程序或脚本退出后的状态值,默认为0,表示正常退出,非0为异常状态<br>$#:表示已加载的位置变量个数<br>$*:列出所有位置变量的值</p><p>exit 数字,即可自定义退出脚本时的返回值.一般报错的情况下才会从exit退出,此时即可通过返回值知晓错误位置</p><p>read:获取一个从键盘上输入的值,将其赋予给一个变量<br>用户创建脚本:<br>#! &#x2F;bin&#x2F;bash<br>echo ‘开始创建新用户’<br>read -p ‘请输入用户名:’ username<br>useradd $username<br>echo ‘用户创建成功,用户名为$username’<br>read -p ‘请输入用户密码:’ userpassword<br>echo $userpassword | passwd –stdin $username<br>最后一句输出完后会提示passwd的输出信息,如果不希望passwd在设置密码后有输出信息,可以将信息重定向到null上,追加 &amp;&gt; &#x2F;dev&#x2F;null</p><p>无交互创建用户脚本:<br>#!<br>echo &lt;创建用户脚本&gt;<br>[$# -ne 2] &amp;&amp; echo ‘error:使用格式:u.sh 用户名 密码’ &amp;&amp;exit 1<br>id $1 &amp;&gt;&#x2F;dev&#x2F;null<br>[$? -ne 0]$$ echo 用户已存在 $$ echo 请重新创建 &amp;&amp; exit 2<br>useradd $1<br>echo $2 | passwd –stdin $1 $&gt; &#x2F;dev&#x2F;null<br>[$? -eq 0] &amp;&amp; echo 用户创建成功</p><p>上述首先判断参数个数是否为2,不是则报错同时返回退出值1<br>然后查询id $1是否存在,存在时则会返回值0,然后进入$?的返回值判断是否为0,不是则报错并输出错误值2<br>然后正式开始创建用户,并修改密码</p><p>条件测试及选择判断<br>[条件测试表达式]<br>每一个部分都要有空格隔开<br>检查文件状态<br>-e 文档存在为真<br>-d 目录存在为真<br>-f 文件存在为真<br>-r 存在文档且有读权限为真<br>-w 存在文档且有写权限为真<br>-x 存在文档且有执行权限为真</p><p>例如:[-x &#x2F;root&#x2F;user.sh] &amp;&amp; echo yes || echo no</p><p>比较整数大小,不可以比较分数(小数),否则报错<br>-eq &#x3D;<br>-ne !&#x3D;<br>-gt &gt;<br>-ge &gt;&#x3D;<br>-lt &lt;<br>-le &lt;&#x3D;</p><p>e或eq 等于<br>no 不<br>than 比<br>g 大<br>l 小</p><p>字符串对比:<br>&#x3D;&#x3D; 相同为真<br>&#x3D;!不同为真</p><p>||:默认输出左边内容,在条件判断中得到的结果为false时输出右边内容<br>在条件判断语句前加!代表对表达式的结果取反</p><p>$RANDOM获取的随机数范围为0<del>99999<br>随机输出一个0</del>99的数为echo $[RANDOM%100]</p><blockquote><p>&amp;2:将echo的输出重定向为一个报错信息,可以通过2&gt;错误输出重定向识别到的报错信息,例如echo ‘error:用户已存在’ &gt;&amp;2</p></blockquote><p>逻辑结构<br>if判断:双分支与多分支<br>双分支:<br>    if[条件测试表达式];then<br>        命令序列1<br>    else<br>        命令序列2<br>    fi<br>当然,也可以嵌套使用,但要注意加fi<br>多分支:<br>    if[];then<br>        命令<br>    elif [];then<br>     命令<br>     else<br>     fi<br>for循环<br>    for 变量名 in 值列表<br>    do<br>    命令序列<br>    done</p><pre><code class="hljs">for username in tom1 tom2 tom3 tom4do    useradd $username    [ $? - eq 0] &amp;&amp; echo &quot;create user&quot;$username&quot;success!&quot;donefor username in &#39;cat ./username.txt&#39;  此时会将文件中每行的输出作为值也可以for username in $(cat ./username.txt)</code></pre><p>造数:{1..10}表示1到10<br>     seq n 表示1到n</p><p>脚本例题:输出9x9乘法表<br>    #!&#x2F;bin&#x2F;bash<br>    for num1 in ‘seq 9’<br>    do<br>        for num2 in ‘seq 9’<br>        do<br>            [ $num1 -le $num2 ] &amp;&amp; echo -e “$num1 x $num2 &#x3D; ‘$(($num1*$num2))’ “<br>        done<br>        echo ‘’<br>    done</p><p>\t 制表符 \n换行符 \b 删除前一个字符  \f 换行但光标仍旧停留在原来的位置   \r 光标移至行首，但不换行 </p><p>猜数游戏</p><p>数字比较</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java学习</title>
    <link href="/2023/03/28/Java/"/>
    <url>/2023/03/28/Java/</url>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><style>    strong{        color: red;    }    #div1 {        display: inline-block;    }    #div1 p{        border-style: solid;border-color: black;background-color: darkorange;text-align: center;color: white;font-size: 8px;    }    a strong{        text-decoration: none;color: white;    }    rt{        color: white;    }</style><h1 id="Java常识类"><a href="#Java常识类" class="headerlink" title="Java常识类"></a>Java常识类</h1><p>长期支持版本(LTS ):JDK8、JDK11、JDK17<br>JavaSE:标准版，用于桌面应用的开发，是其他两个版本的基础.<br>JavaME:Java语言的标准版，用于嵌入式电子设备(电视机,照相机等)或小型移动设备.<br>JavaEE:Java语言的企业版,用于web方向的网页开发.<br>Java能做什么:<br>桌面应用开发工具:各种税务管理软件 IDEA Clion Pycharm.<br>企业级应用开发:微服务 springcloud<br>移动应用开发:鸿蒙 安卓 医疗设备<br>科学计算:matlab<br>大数据开发:Hadoop<br>游戏开发:Minecraft</p><p>高级语言编译:编程→编译→运行  计算机仅认识二进制代码,所以将代码进行编译再运行<br>编译运行方式有:编译型,解释型,混合型<br>Arm平台编译器→手机运行       X86平台编译器:电脑运行<br>编译型语言为整体编译(C)<br>解释型语言为逐行编译(Python)<br>混合型语言为整体编译为一个字节码文件(.class)而后再交给设备逐行翻译.此时代码运行在虚拟机上,而非直接运行与系统中.虚拟机由Java自带模块提供.<br>Java语言的跨平台通过虚拟机运行,针对不同操作系统可安装不同的虚拟机.</p><p>JRE与JDK:<br>JDK(Java开发工具包):JVM 核心类库 开发工具<br>JRE(Java的运行环境):JVM 核心类库 运行工具<br>内存大小:JDK&gt;JRE&gt;JVM</p><p>注释(Java):<br>单行注释 &#x2F;&#x2F;<br>多行注释 &#x2F;&amp;42;  &amp;42;&#x2F;<br>文档注释 &#x2F;&amp;42;&amp;42; &amp;42;&#x2F;<br>文档注释主用于说明文档中,工具可用此将代码文件中的注释自动转换于说明文档之中<br>注释书写请勿嵌套</p><p>main代码:main方法,表示程序主入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>打印内容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br></code></pre></td></tr></table></figure><p>关键字:特殊含义的单词<br>关键字字母全小写,编译期内高亮显示<br>class:用于创建&#x2F;定义一个类,类是Java最基本的储存单元</p><p>字面量:数据在程序中的书写格式<br>整数:不带小数点的数字<br>小数:带小数点<br>字符串:用双引号括起来的内容<br>字符:用单引号括起来,内容只能有一个(A,0,我)<br>布尔:真假(true,false)<br>空:空值,不能直接打印,仅能以字符串方式进行打印<br>\t 制表符,将字符串长度补充至8的整数倍<br>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;name&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;age&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;S&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;20&quot;</span>);<br></code></pre></td></tr></table></figure><p>变量:当某个数据经常发生改变时,用变量进行储存.当数据变化时,仅修改变量里面记录的值.<br>数据类型 变量名 &#x3D; 数据值;<br>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>System.out.println(a);<br>System.out.println(a + b);<br></code></pre></td></tr></table></figure><p>可以仅打印变量名,变量同时仅能赋予一个值,变量名仅可定义一次,一条语句可定义多个变量<br>使用下列进行变量值修改与多定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>,b = <span class="hljs-number">20</span>,c = <span class="hljs-number">40</span>;<br>a = <span class="hljs-number">45</span>;<br></code></pre></td></tr></table></figure><p>定义变量的数据类型后必须进行赋值,赋值操作在使用之前</p><p>变量运算:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">a = a + <span class="hljs-number">10</span>;<br>a = a - <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>计算机储存规则:<br>任意数据均以二进制进行存储<br>文本数据:<br>储存为ASCII码<br>汉字等字符有<br>GB2313 1981.5.1发布的简中汉字编码国家标准<br>BIG5:台湾地区繁体中文标准字符集<br>GBK编码:2000.3.17发布,Windows默认码表 包含GB13000-1中的中日韩汉字和BIG5编码中的汉字<br>Unicode编码:国际标准字符集(万国表),将世界语言的每个字符定义一个唯一的编码,满足跨语言与平台的文本信息转换</p><p>图片数据:<br>黑白图:以0&#x2F;1在代表每一格的属性<br>灰度图:更高级的黑白图,映入了不同的灰度表示每一格<br>彩图:以红绿蓝三种颜色的”灰度”表示一格内的颜色属性,取值范围为0~255</p><p>数据类型<br>整数:byte,short,int(默认),long<br>浮点数:float,double(默认)<br>字符:char<br>布尔:boolean<br>内存占用分别为 1 2 4 8 4 8 2 1<br>每种数据类型都有不同取值范围<br>当定义long类型数据变量时,可以加L在末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">9999999999L</span>;<br></code></pre></td></tr></table></figure><p>布尔类可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>命名方法:<br>对于变量和方法首字母小写,若由多个单词组成,后续单词首字母大写<br>对于类的首字母大写,由多个单词组成时每个单词首字母大写</p><p>Scanner的使用:<br>接收键盘输入的数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-comment">//导入包,必须出现在类的定义之前</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in); <span class="hljs-comment">//sc为变量名,可变,其他不可</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt(); 取变量sc的值作为Int类型为变量i进行赋值<br></code></pre></td></tr></table></figure><p>IDEA中的项目结构:<br>project(项目)<br>    module(模块)<br>        package(包)<br>            class(类)</p><p>运算符:对字面量或者变量进行操作的符号<br>表达式:用运算符把字面量或者变量连接起来,符合Java语法的式子就可以称为表达式,不同运算符连接的表达式体现的是不同类型的表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> b + c;<span class="hljs-comment">//算术表达式</span><br></code></pre></td></tr></table></figure><p>算数运算符<br>加减乘除:+ - * &#x2F;<br>取余&#x2F;模:%<br>数值拆分例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;输入三位数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> number % <span class="hljs-number">10</span>;  <span class="hljs-comment">//将数据不断除十,余下值赋予变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> number /<span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<span class="hljs-comment">//数据先除十,余下同上</span><br><span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> number / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>;<br>System.out.println(ge);<br>System.out.println(shi);<br>System.out.println(bai);<br></code></pre></td></tr></table></figure><p>当输入数值为408时<br>408 % 10得40余8,余值赋予给变量<br>408 &#x2F; 10 % 10 &#x3D; 40.8 % 10 &#x3D; 0 ,此时0.8为浮点数无法正常输出,所以输出值为0<br>408 &#x2F; 100 % 10 &#x3D; 4.08 % 10 &#x3D; 0余4 输出为4</p><p>当数字进行运算时,数字类型需要转换成相同类型再进行运算<br>隐式转换(自动类型提升):取值范围小的数值提升为取值范围大的,由程序自动完成,byte short char三种数据类型都会直接先提升为int类型再进行运算<br>强制转换:大变小</p><p>取值范围从小到大:byte &amp;lt short &lt; int &amp;lt long &lt; float &lt; double</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a;  <span class="hljs-comment">//此时a输出结果为10.0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)a; <span class="hljs-comment">//强制转换后丢失精度,12.3→12</span><br></code></pre></td></tr></table></figure><h2 id="强制转换为字符串"><a href="#强制转换为字符串" class="headerlink" title="强制转换为字符串"></a>强制转换为字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (String)num;<span class="hljs-comment">//或者</span><br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>+num;<span class="hljs-comment">//亦可</span><br><span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> String.valueOf(num);<br></code></pre></td></tr></table></figure><p>+:<br>当加号运算中出现字符串时,”+”为字符串连接符,而不是算术运算符,前后数据拼接后产生新的字符串.”123”+123 → 123123.连续进行”+”操作时,从左到右逐个执行.123+123+”123” → 246123.带上双引号变为字符串.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>System.out.println(<span class="hljs-string">&quot;我的年龄&quot;</span> + age + <span class="hljs-string">&quot;岁&quot;</span>);   <span class="hljs-comment">//我的年龄18岁</span><br>System.out.println(<span class="hljs-string">&quot;我的年龄&quot;</span> + <span class="hljs-string">&quot;age&quot;</span> + <span class="hljs-string">&quot;岁&quot;</span>);  <span class="hljs-comment">//我的年龄age岁</span><br>System.out.println(<span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">2</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">//当运算至3abc时,整体变为字符串值,之后实为字符串连接操作,使得输出结果变为3abc21</span><br></code></pre></td></tr></table></figure><p>字符 + 字符&#x2F;数字 时,会把字符通过ASCII码表查询到对应的数字再进行计算<br>重要数值65:A 97:a</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">1</span> + <span class="hljs-string">&#x27;a&#x27;</span>);  <span class="hljs-comment">//98</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-string">&quot;bc&quot;</span>); <span class="hljs-comment">//abc,因为出现&quot;bc&quot;,所以变为连接符</span><br></code></pre></td></tr></table></figure><p>自增&#x2F;减运算:<br>变量值加&#x2F;减1: ++&#x2F;–a; 符号放在变量前后皆可,亦可以参与至运算之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>a++;<br>a--:<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a++;<span class="hljs-comment">//此时为先加后用</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ++a;<span class="hljs-comment">//此时为先用后加</span><br>System.out.println(a); <span class="hljs-comment">//12,变量a已经自增两次</span><br>System.out.println(b); <span class="hljs-comment">//10,赋值时a还未自增</span><br>System.out.println(c); <span class="hljs-comment">//12,赋值时为自增两次的a</span><br></code></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符:"></a>赋值运算符:</h2><p>+&#x3D; -&#x3D; &amp;42;&#x3D; &#x2F;&#x3D; %&#x3D; 先运算再赋值,符号带有强制类型转换的性质</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>a += b; <span class="hljs-comment">//a+b后将结果赋值给b,等同于a = (int)(a + b);</span><br>System.out.println(a);<br>System.out.println(b);<br></code></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符:"></a>关系运算符:</h2><p>用于判断是否成立,成立则输出true,反之为false.html中不好显示,所以采用代码形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">== 相等<br>!= 不等<br>&gt;= 大于等于<br>&lt;= 小于等于<br>&lt;  小于<br>&gt;  大于<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a;<br>System.out.println(a == b);<span class="hljs-comment">//输出结果为true</span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符:"></a>逻辑运算符:</h2><p>Java中表示5&lt;10&lt;15需要拆分运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&amp; 与(二者同真为真)<br>| 或(有一边真则真)<br>^ 异(不同为<span class="hljs-literal">true</span>)<br>! 非(取反)<br></code></pre></td></tr></table></figure><h2 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符:"></a>短路逻辑运算符:</h2><p>&amp;&amp;  有一个假则为假&#x2F;同真为真<br>||  有一个真则为真&#x2F;同假为假<br>当运算符左边能确定为最终结果,则不会再进行运算,提高了效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> ++a &lt; <span class="hljs-number">5</span> &amp;&amp; ++b &lt; <span class="hljs-number">5</span>; <span class="hljs-comment">//a为false后,&amp;&amp;后面的代码不生效</span><br>System.out.println(a);  <span class="hljs-comment">//11</span><br>System.out.println(b);  <span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure><p>最为常用的逻辑运算符:<br>&amp;&amp; || !</p><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符:"></a>三元运算符:</h2><p>可以用于判断,根据判断结果不同而得到不同内容<br>格式:关系表达式?表达式1:表达式2;<br>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> number1 &gt; number2 ? number1 : number2;  <span class="hljs-comment">//若number&gt;number2为true,则表达式1赋值给max</span><br><span class="hljs-comment">//三元表达式的结果一定要被使用,否则报错</span><br>System.out.println(max);  <span class="hljs-comment">//或者将表达式直接写在括号内</span><br></code></pre></td></tr></table></figure><p>比大小案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请分别键入体重&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">w1</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">w2</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> w1 &gt; w2 ? <span class="hljs-string">&quot;第一只&quot;</span> : <span class="hljs-string">&quot;第二只&quot;</span>;<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级:"></a>运算符优先级:</h3><p>内容过多,所以仅需要记住→ () ←为最高优先级</p><p>原码 反码 补码:<br>原码:十进制的二进制表现形式,最左边为符号位,0正1负<br>反码:正数的反码是自己,负数的反码符号位不变,其余取反<br>补码:正数为其本身,负数为补码的基础上+1<br>01111111:+127<br>11111111:-127<br>00000000:1<br>使用原码进行运算则很容易出现问题,负数的运算结果和预期是相反的<br>10000000 + 1 &#x3D; 10000001 &#x3D; -1<br>反码此时作为解决原码不能计算负数的方法出现<br>当反码运算跨0时,则易出现问题,反码运算跨0时有一个单位的误差,需要再加&#x2F;减1.反码中0有<u>00000000</u>和<u>11111111</u>两种表达方式<br>11111010 + 00000110 &#x3D; -5 + 6 &#x3D; 00000000 &#x3D; 0<br>在补码中,0的表达方式仅有00000000.<br>数字的存储和运算都以补码的形式进行,所以<strong>补码为最终解法</strong>.补码的最小值为-128(10000000),没有原码和反码的数值可对应</p><p>一个字节为8个比特位,所以byte为8比特位数据类型(0000 0000);short为16比特位(0000 0000 0000 0000),以此类推(字节&amp;42;8)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>; <span class="hljs-comment">//0000 0000 0000 0000 0000 0001 0010 1100</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>); <span class="hljs-comment">// 0010 1100 强制转换后仅获取了后八个比特位</span><br>System.out.println(b); <span class="hljs-comment">//此时输出为44</span><br></code></pre></td></tr></table></figure><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符:"></a>其他运算符:</h3><table><thead><tr><th align="center">运算符</th><th align="center">含义</th><th align="center">运算规则</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">逻辑与</td><td align="center">0 false 1 true</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">逻辑或</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左移</td><td align="center">向左移动,低位补0</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移</td><td align="center">向右移动,高位补0或1</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">无符号右移</td><td align="center">向右移动,高位补0</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<span class="hljs-comment">//二进制后八位1100 1000</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//二进制后八位0000 1010</span><br>System.out.println(a &amp; b); <span class="hljs-comment">//输出8  ↑此处相等,仅继承此位,结果为0000 1000</span><br>System.out.println(a | b); <span class="hljs-comment">//输出202,有1则1,无需相等,结果为1100 1010</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">short</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>; <span class="hljs-comment">//二进制为0000 0000 1100 1000</span><br>System.out.println(a &lt;&lt; <span class="hljs-number">2</span>);<span class="hljs-comment">//左移2位变成0000 0011 0010 0000</span><br> <span class="hljs-comment">//补上的0↑↑</span><br>System.out.println(a &gt;&gt; <span class="hljs-number">2</span>);<span class="hljs-comment">//0000 0000 0011 0010</span><br><span class="hljs-comment">//↑符号位继承,其他位补0</span><br></code></pre></td></tr></table></figure><p>无符号右移仅补0,不管符号位</p><p>作用域(生命周期):<br>Java中的每一对{}为一个代码块,代码块之间分级嵌套.变量等数据可由高向低继承,不可逆.不可在低级代码块中定义与外部(高级)代码块同名的变量.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>x++;<br>y++;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; <span class="hljs-comment">//error</span><br>&#125;<br>x--;<br>y--;  <span class="hljs-comment">//超出变量y作用域,报错</span><br>&#125;<br></code></pre></td></tr></table></figure><p>流程控制语句:<br>顺序结构:代码由上到下逐行执行<br>分支结构:<br>if语句(语句体内可嵌套if语句)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;键入一个数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//关系表达式输出一个布尔类型值,true则继续运行,false跳过</span><br>System.out.println(<span class="hljs-string">&quot;正数&quot;</span>);<br>&#125;<br><span class="hljs-comment">//boolean flag = true;</span><br><span class="hljs-comment">//if(flag) ←当布尔值为true时则可直接进行下一步</span><br></code></pre></td></tr></table></figure><h2 id="if分支语句"><a href="#if分支语句" class="headerlink" title="if分支语句"></a>if分支语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//变量</span><br><span class="hljs-comment">//变量</span><br><span class="hljs-comment">//变量</span><br><span class="hljs-comment">//if (关系表达式)&#123;</span><br><span class="hljs-comment">//语句体;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//if (关系表达式)&#123;</span><br><span class="hljs-comment">//语句体;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//if (关系表达式)&#123;</span><br><span class="hljs-comment">//语句体;</span><br><span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure><p>因为if语句的分支过于繁杂,所以大部分情况下将使用switch语句进行代替</p><h3 id="if的else语句"><a href="#if的else语句" class="headerlink" title="if的else语句:"></a>if的else语句:</h3><p>当if中的关系表达式输出结果为false时,则输出else的语句体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入身上钱数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-keyword">if</span> (money &gt; <span class="hljs-number">15</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;在食堂吔饭&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;恰泡面吧&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if的嵌套与else-if"><a href="#if的嵌套与else-if" class="headerlink" title="if的嵌套与else if"></a>if的嵌套与else if</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个大于0小于10的值&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">10</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;?再看看要求?&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;?再看看要求?&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;确实是按要求输入了&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;键入的值为&quot;</span>+a);<br>&#125;<br><span class="hljs-comment">// 也可以if(a &gt; 0 &amp;&amp; a &lt; 10)</span><br></code></pre></td></tr></table></figure><p>流程控制(跳转):<br>顺序,循环,选择<br>循环控制break(打破),continue(继续),return(返回值)</p><h2 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br><span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>语句体;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>:<br>语句体;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>语句体n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不加break跳出,在执行值1后会继续对值2的结果继续执行,直到将所有分支执行完毕<br>默认取值为byte short int char,JDK5后加入枚举常量,JDK7后可以是String(字符串)<br>case给出的值只能是字面量,不能是变量<br>default可以不加,但是加入会让语句更加严禁,对均不符合的值进行默认处理.default可以写在语句中的任何位置,不一定要写在最后.</p><p>高版本扩展:<br>使123分别输出一二三</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; &#123;<br>System.out.println(<span class="hljs-string">&quot;一&quot;</span>);<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; &#123;<br>System.out.println(<span class="hljs-string">&quot;二&quot;</span>);<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span> -&gt;&#123;<br>System.out.println(<span class="hljs-string">&quot;三&quot;</span>);<br>&#125;<br><span class="hljs-keyword">default</span> -&gt;&#123;<br>System.out.println(<span class="hljs-string">&quot;不是有效值&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 如果语句仅有一句,可省略为case 1 -&gt; System.out.println(&quot;一&quot;)</span><br><span class="hljs-comment">//case 2 -&gt; System.out.println(&quot;二&quot;)</span><br><span class="hljs-comment">//default -&gt; System.out.println(&quot;不是有效值&quot;)</span><br></code></pre></td></tr></table></figure><p>jdk12的扩展输入方式自带break效果</p><p>根据成绩给学生评等级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入成绩&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        <span class="hljs-keyword">switch</span> ((<span class="hljs-type">int</span>)grade/<span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>,<span class="hljs-number">9</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;中等&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">default</span> -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化语句;判断语句;循环控制语句)&#123;<br>循环体语句;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印十次hello world</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123; <span class="hljs-comment">//使用int i = 1在此直接对i进行初始化赋值也行</span><br>System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在对循环内的变量进行初始化赋值时,此为一个临时变量,在循环体结束后便会被摧毁,所以可以在不同循环中出现同一个int i &#x3D; 1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;c&lt;=<span class="hljs-number">5</span>;c++) &#123;<br>System.out.println(<span class="hljs-string">&quot;正在重连&quot;</span>+c+<span class="hljs-string">&quot;/5&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="累加"><a href="#累加" class="headerlink" title="累加"></a>累加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>sum += i;<br>System.out.println(sum);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-100求偶数和"><a href="#1-100求偶数和" class="headerlink" title="1-100求偶数和"></a>1-100求偶数和</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br><span class="hljs-keyword">if</span> (i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>sum += i;<br><span class="hljs-keyword">if</span> (i==<span class="hljs-number">100</span>)&#123;<br>System.out.println(sum);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="键盘录入两个表示范围的数字-统计此范围中能被3和5整除的数字有几个"><a href="#键盘录入两个表示范围的数字-统计此范围中能被3和5整除的数字有几个" class="headerlink" title="键盘录入两个表示范围的数字,统计此范围中能被3和5整除的数字有几个"></a>键盘录入两个表示范围的数字,统计此范围中能被3和5整除的数字有几个</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java">System.out.println(<span class="hljs-string">&quot;请输入数值&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> num.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;请再次输入数值&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num.nextInt();<br>        <span class="hljs-type">int</span> c; <span class="hljs-comment">//当用户输入从大到小时,将数值对调使数据重新变为从小到大</span><br>        <span class="hljs-keyword">if</span> (num1 &gt; num2)&#123;<br>            c = num1;<br>            num1 = num2;<br>            num2 = c;<br>        &#125;<br>        c = <span class="hljs-number">0</span>;  <span class="hljs-comment">//为之后重复使用准备</span><br>        <span class="hljs-keyword">for</span> (num1=num1;num1&lt;=num2;num1++)&#123;<br>            <span class="hljs-keyword">if</span>(num1%<span class="hljs-number">3</span> == <span class="hljs-number">0</span> &amp;&amp; num1%<span class="hljs-number">5</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(num1);<br>                c++;  <span class="hljs-comment">//重新利用变量c进行统计</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(num1 == num2) &#123;<br>                System.out.println(<span class="hljs-string">&quot;所以一共有&quot;</span> + c + <span class="hljs-string">&quot;个数字&quot;</span>);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="求验证质数或合数"><a href="#求验证质数或合数" class="headerlink" title="求验证质数或合数"></a>求验证质数或合数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> num.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;a/<span class="hljs-number">2</span>;i++)&#123;  <span class="hljs-comment">//亦可求取小于根号</span><br>            <span class="hljs-keyword">if</span>(a % i == <span class="hljs-number">0</span>) &#123;<br>                b++;<br>            &#125;<br>        &#125;<span class="hljs-keyword">if</span>(b != <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;是合数&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;是质数&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>for与while的运行规则是一样的<br>for循环中控制循环的变量在for循环结束后便无法再次访问<br>while循环中控制循环的变量不属于while语法结构,在while循环结束后仍可继续使用<br>条件为false时跳出循环</p><p>for循环知道循环次数或者范围,而while循环仅知道结束条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">初始化语句;<br><span class="hljs-keyword">while</span>(条件判断语句)&#123;<br>循环体语句;<br>条件控制语句;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>&lt;<span class="hljs-number">4</span>)&#123;<br>i++;<br>&#125;<br>System.out.println(i);<br></code></pre></td></tr></table></figure><p>折纸与珠穆朗玛峰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">double</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">8844430</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">paper</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(paper &lt; height)&#123;<br>paper = paper*<span class="hljs-number">2</span>;<br>count++;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;折纸&quot;</span>+count+<span class="hljs-string">&quot;次后可达到珠穆朗玛峰高度&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><p>不常用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>i++;<br>System.out.println(<span class="hljs-string">&quot;学习&quot;</span>);<br>&#125;<span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">5</span>); <span class="hljs-comment">//当满足条件时,输出为true,则再进行一次循环,此处可放true进行无限循环</span><br></code></pre></td></tr></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><p>break打破循环<br>continue结束本次循环</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">replaceAll(<span class="hljs-string">&quot;查找的字符串&quot;</span>,<span class="hljs-string">&quot;替换的字符串&quot;</span>);<br>replaceFirst(<span class="hljs-string">&quot;查找的字符串&quot;</span>,<span class="hljs-string">&quot;替换的字符串&quot;</span>);<span class="hljs-comment">//仅替换首个被查找的</span><br></code></pre></td></tr></table></figure><h2 id="字符串的拆分"><a href="#字符串的拆分" class="headerlink" title="字符串的拆分"></a>字符串的拆分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">数组名.split(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//以逗号为间隔拆分两次,全拆可以输入(&quot;,&quot;)</span><br><span class="hljs-comment">//(&quot;\\.&quot;);此种用于拆分不了的情况下转义拆分</span><br></code></pre></td></tr></table></figure><h2 id="字符串与字符数组的转换"><a href="#字符串与字符数组的转换" class="headerlink" title="字符串与字符数组的转换"></a>字符串与字符数组的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloword&quot;</span>;<br> <br><span class="hljs-type">char</span> [] result= str.toCharArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;x &lt; result.length;x++)&#123;<br>    <span class="hljs-comment">//编码减少32，将小写转换成大写字符</span><br>    result[x] -= <span class="hljs-number">32</span>;<br>&#125;<br><span class="hljs-comment">//将处理后的字符数组交给String变为字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">newStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(result);<br>System.out.println(newStr);<br><span class="hljs-comment">//若要取部分字符串,取从0开始到5结束的字符</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(result,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h2 id="大小比较"><a href="#大小比较" class="headerlink" title="大小比较"></a>大小比较</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> Test;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <br><span class="hljs-comment">//字符串比较</span><br>        <span class="hljs-comment">//1、public boolean euqals(String anObject)：区分大小写的相等比较</span><br>        <span class="hljs-comment">//进行字符串区分大小写等值比较</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABC&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strB</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>        System.out.println(strA.equals(strB));<span class="hljs-comment">//结果为false</span><br> <br>        <span class="hljs-comment">//2、public boolean equalsIgnoreCase(String anotherString):不区分大小的比较</span><br>        <span class="hljs-comment">//进行字符串不区分大小写等值比较</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABC&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>        System.out.println(strA.equalsIgnoreCase(strD));<span class="hljs-comment">//结果为true</span><br> <br>        <span class="hljs-comment">//3、public int compareTo(String anotherString):进行字符串大小比较，该方法返回一个int型数据，该数据有三种取值：大于（&gt;0)、小于（&lt;0）、等于（=0）</span><br>        <span class="hljs-comment">//进行字符串区分大小比较</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mmh&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strF</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mmH&quot;</span>;<br>        System.out.println(strE.compareTo(strF));<span class="hljs-comment">//结果为32  说明：strE &gt; strF</span><br>        System.out.println(strF.compareTo(strE));<span class="hljs-comment">//结果为-32  说明：strF &gt; strE</span><br>        System.out.println(<span class="hljs-string">&quot;HELLO&quot;</span>.compareTo(<span class="hljs-string">&quot;HELLO&quot;</span>));<span class="hljs-comment">//结果为0    说明：&quot;HELLO&quot; = &quot;HELLO&quot;</span><br> <br>        <span class="hljs-comment">//4、public int compareToIgnoreCase(String str):不区分大小写进行字符串比较</span><br>        <span class="hljs-comment">//进行字符串不区分大小比较</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MMh&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mmH&quot;</span>;<br>        System.out.println(strE.compareToIgnoreCase(strH));<span class="hljs-comment">//结果为0  说明：strH = strG  </span><br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串是否相等"><a href="#字符串是否相等" class="headerlink" title="字符串是否相等"></a>字符串是否相等</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">Objects.equals(字符串<span class="hljs-number">1</span>,字符串<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="字符串的连接"><a href="#字符串的连接" class="headerlink" title="字符串的连接"></a>字符串的连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">原字符串 = 原字符串.concat(<span class="hljs-string">&quot;新内容&quot;</span>);<br><span class="hljs-comment">//或者 字符串1.append(字符串2);</span><br></code></pre></td></tr></table></figure><h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">原字符串.substring(起始值,终止值);<br></code></pre></td></tr></table></figure><h2 id="字符串的删除"><a href="#字符串的删除" class="headerlink" title="字符串的删除"></a>字符串的删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">原字符串名.delete(起始值下标,终点值);<span class="hljs-comment">//后面那个不是下标,只是终点值而已</span><br></code></pre></td></tr></table></figure><h2 id="字符串查询"><a href="#字符串查询" class="headerlink" title="字符串查询"></a>字符串查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;百度:www.baidu.com&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">SubStr1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;baidu&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">SubStr2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;com&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;查找字符 o 最后出现的位置 :&quot;</span> );<br>        System.out.println(Str.lastIndexOf( <span class="hljs-string">&#x27;o&#x27;</span> ));<br>        System.out.print(<span class="hljs-string">&quot;从第14个位置查找字符 o 最后出现的位置 :&quot;</span> );<br>        System.out.println(Str.lastIndexOf( <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-number">14</span> ));<br>        System.out.print(<span class="hljs-string">&quot;子字符串 SubStr1 最后出现的位置:&quot;</span> );<br>        System.out.println( Str.lastIndexOf( SubStr1 ));<br>        System.out.print(<span class="hljs-string">&quot;从第十五个位置开始搜索子字符串 SubStr1最后出现的位置 :&quot;</span> );<br>        System.out.println( Str.lastIndexOf( SubStr1, <span class="hljs-number">15</span> ));<br>        System.out.print(<span class="hljs-string">&quot;子字符串 SubStr2 最后出现的位置 :&quot;</span> );<br>        System.out.println(Str.lastIndexOf( SubStr2 ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h2><p>words.charAt(0) &#x2F;&#x2F;输出下标为0处的字符<br>去除字符串首尾空格<br>String trim()<br>类型转换</p><h1 id="Math的使用"><a href="#Math的使用" class="headerlink" title="Math的使用"></a>Math的使用</h1><p>Math.用法(数值1,数值2);</p><p>求取一个数的次方根,保留整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">float</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> num.nextInt();<br>        <span class="hljs-keyword">if</span> (a&gt;=<span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) Math.pow(a, <span class="hljs-number">0.5</span>);<br>            System.out.println(b);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入的不是有效值&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">方法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">abs</td><td align="center">取绝对值</td></tr><tr><td align="center">max(a,b)</td><td align="center">取最大值</td></tr><tr><td align="center">min(a,b)</td><td align="center">取最小值</td></tr><tr><td align="center">pow(a,b)</td><td align="center">取a的b次方</td></tr><tr><td align="center">sqrt</td><td align="center">取平方根</td></tr><tr><td align="center">cbrt</td><td align="center">取立方根</td></tr></tbody></table><h1 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random; <span class="hljs-comment">//用此导入dandom包</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(); <span class="hljs-comment">//此处r为变量名</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(随机数的范围);<br><span class="hljs-comment">//int number = r.nextInt(100)+10; 此时输出为10~109,起始点为0</span><br></code></pre></td></tr></table></figure><p>1~100,猜数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (a != number) &#123;<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            a = input.nextInt();<br>            <span class="hljs-keyword">if</span> (a &gt; number)&#123;<br>                System.out.println(<span class="hljs-string">&quot;大了&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; number) &#123;<br>                System.out.println(<span class="hljs-string">&quot;小了&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数组-array"><a href="#数组-array" class="headerlink" title="数组(array)"></a>数组(array)</h1><p>数组可以存储同种数据的多个值,存储时需考虑隐式转换<br>布尔类型值不能存储,int类型值只能存储byte short int,以此类推</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//数组的两种声明格式</span><br><span class="hljs-type">int</span>[] arr1 =&#123;&#125;;<br><span class="hljs-type">int</span> arr2[] =&#123;&#125;;<br></code></pre></td></tr></table></figure><p>定义的数据为字符串时,需要用到String<br>当你需要将字符串转换为其他类型的值时,使用静态方法Integer,其中parseInt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">String[] arr = &#123;<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;wangwu&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组的静态初始化"><a href="#数组的静态初始化" class="headerlink" title="数组的静态初始化"></a>数组的静态初始化</h2><p>其实就是完整版的格式,一般也不用在等号后面加new 数组类型[]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;;<br></code></pre></td></tr></table></figure><h2 id="地址值"><a href="#地址值" class="headerlink" title="地址值"></a>地址值</h2><p>直接用输出数组(arr)的时候输出为地址值,表示在内存中的位置<br>地址格式[I@7ef20235<br>其中 [ 表示这是一个数组<br>其中 I 表示这是int类型<br>其中 @ 表示这是间隔符号<br>7ef20235为地址(16进制)</p><h2 id="数组索引-下标"><a href="#数组索引-下标" class="headerlink" title="数组索引(下标)"></a>数组索引(下标)</h2><p>数组下标从0开始,可以通过向方括号内输入数字代表取用第几个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>System.out.println(arr[<span class="hljs-number">1</span>]); <span class="hljs-comment">//此处输出为2</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">2</span>];<br>System.out.println(number1); <span class="hljs-comment">//此处输出为3</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">15</span>;<br>System.out.println(arr[<span class="hljs-number">0</span>]);  <span class="hljs-comment">//输出为15</span><br></code></pre></td></tr></table></figure><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><p>将数组中的所有内容取出来,取出来后可以(打印,判断,求和),<strong>遍历是指取出元素的过程</strong><br>当取出的下标超出数组长度时,则会报错(数组下标引用出错)<br>当想要获取数组的长度时,可以使用<strong>length</strong>以获取,然后再使用循环进行遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> arr[] =&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>System.out.println(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>在idea中,提供了一键遍历数组代码补全,输入<strong>数组名.fori</strong>即可自动生成代码.<br>遍历数组并求和:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] arr1=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; arr1.length;i++)&#123;<br>            System.out.println(arr1[i]);<br>            sum += arr1[i];<br>            System.out.println(sum);<br></code></pre></td></tr></table></figure><p>定义一个数组,并求出有多少个数能被3整除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] arr1=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; arr1.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr1[i]%<span class="hljs-number">3</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(arr[i]+<span class="hljs-string">&quot;能被3整除&quot;</span>);<br>                sum++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;统计完毕,有&quot;</span>+sum+<span class="hljs-string">&quot;个数字&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="数组的按序输出"><a href="#数组的按序输出" class="headerlink" title="数组的按序输出"></a>数组的按序输出</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>最简单的排序方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> []arr1= &#123;<span class="hljs-number">45</span>,<span class="hljs-number">34</span>,<span class="hljs-number">59</span>,<span class="hljs-number">55</span>&#125;;<br>Arrays.sort(arr1);<span class="hljs-comment">//调用方法排序即可</span><br></code></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>按序将元素与数组中其他元素比较并交换</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>先找到最小元素所在位置的索引,然后与第一位元素交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> arr3[]= &#123;<span class="hljs-number">23</span>,<span class="hljs-number">12</span>,<span class="hljs-number">48</span>,<span class="hljs-number">56</span>,<span class="hljs-number">45</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr3.length;i++) &#123;<br>        <span class="hljs-type">int</span> tem=i;<br>                <span class="hljs-comment">//将数组中从i开始的最小的元素所在位置的索引赋值给tem</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;arr3.length;j++) &#123;<br>            <span class="hljs-keyword">if</span>(arr3[j]&lt;arr3[tem]) &#123;<br>                tem=j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//上面获取了数组中从i开始的最小值的位置索引为tem，利用该索引将第i位上的元素与其进行交换</span><br>        <span class="hljs-type">int</span> temp1=arr3[i];<br>        arr3[i]=arr3[tem];<br>        arr3[tem]=temp1;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a>反转排序</h3><p>没什么好说的</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> []arr5=&#123;<span class="hljs-number">23</span>,<span class="hljs-number">12</span>,<span class="hljs-number">48</span>,<span class="hljs-number">56</span>,<span class="hljs-number">45</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr5.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i; j &gt; <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-keyword">if</span> (arr5[j - <span class="hljs-number">1</span>] &gt; arr5[j]) &#123;<span class="hljs-comment">//大的放后面</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> arr5[j - <span class="hljs-number">1</span>];<br>                arr5[j - <span class="hljs-number">1</span>] = arr5[j];<br>                arr5[j] = tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="数组的动态初始化"><a href="#数组的动态初始化" class="headerlink" title="数组的动态初始化"></a>数组的动态初始化</h2><p>动态:初始化时仅指定数组长度,由系统分配初始值<br>静态:初始化时按元素个数分配长度,没有初始值<br>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//数组类型[] 数组名 = new 数据类型[数组长度];</span><br>String[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;shiling&quot;</span> <span class="hljs-comment">//对下标为0位置进行赋值</span><br></code></pre></td></tr></table></figure><p>大部分类型的默认初始化值为0(long类型为0L)<br>浮点类型的默认初始化值为0.0f&#x2F;D<br>字符类型的默认初始化值为’&#x2F;u0000’ → 空格(在调试台显示为极小的NULL)<br>布尔类型的默认初始化值为false<br>引用数据类型的默认初始化值为null</p><h2 id="数组的快速操作"><a href="#数组的快速操作" class="headerlink" title="数组的快速操作"></a>数组的快速操作</h2><h3 id="检查存在"><a href="#检查存在" class="headerlink" title="检查存在"></a>检查存在</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">String[] stringArray = &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span> &#125;;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Arrays.asList(stringArray).contains(<span class="hljs-string">&quot;a&quot;</span>);<br>System.out.println(b);<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>可以用动态链表的contains函数来判断元素是否包含在链表中。</p><h3 id="连接两个数组"><a href="#连接两个数组" class="headerlink" title="连接两个数组"></a>连接两个数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] intArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br><span class="hljs-type">int</span>[] intArray2 = &#123; <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span> &#125;;<br><span class="hljs-comment">// Apache Commons Lang library</span><br><span class="hljs-type">int</span>[] combinedIntArray = ArrayUtils.addAll(intArray, intArray2);<br></code></pre></td></tr></table></figure><p>ArrayUtils是Apache提供的数组处理类库，其addAll方法可以很方便地将两个数组连接成一个数组。</p><h3 id="将数组中的元素以字符串的形式输出"><a href="#将数组中的元素以字符串的形式输出" class="headerlink" title="将数组中的元素以字符串的形式输出"></a>将数组中的元素以字符串的形式输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// containing the provided list of elements</span><br><span class="hljs-comment">// Apache common lang</span><br><span class="hljs-type">String</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> StringUtils.join(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> &#125;, <span class="hljs-string">&quot;, &quot;</span>);<br>System.out.println(j);<br><span class="hljs-comment">// a, b, c</span><br></code></pre></td></tr></table></figure><p>同样利用StringUtils中的join方法，可以将数组中的元素以一个字符串的形式输出。</p><h3 id="数组翻转"><a href="#数组翻转" class="headerlink" title="数组翻转"></a>数组翻转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] intArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br>ArrayUtils.reverse(intArray);<br>System.out.println(Arrays.toString(intArray));<br><span class="hljs-comment">//[5, 4, 3, 2, 1]</span><br></code></pre></td></tr></table></figure><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">数组名.toString;<br>String.valueOf(数组名);<br><span class="hljs-type">String</span> <span class="hljs-variable">new</span> <span class="hljs-operator">=</span> (String)数组名<br></code></pre></td></tr></table></figure><h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><p>使用 CopyOfRange() 方法对数组进行复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.copyOfRange(dataType[] 原数组名,<span class="hljs-type">int</span> 起始下标,新,<span class="hljs-type">int</span> 终止下标);<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;; <span class="hljs-comment">//被复制后多两个0作为默认空值</span><br><span class="hljs-type">int</span>[] newArr=Arrays.copyOfRange(n, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>使用System.arraycopy()方法进行复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">System.arraycopy(原数组,起始下标,新数组,新的起始位置,复制长度);<br></code></pre></td></tr></table></figure><h3 id="数组是否相等equals"><a href="#数组是否相等equals" class="headerlink" title="数组是否相等equals()"></a>数组是否相等equals()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Arrays.fill(array, 100) 输出一个布尔值</span><br><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span>[] score1 = &#123; <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">98.5</span>, <span class="hljs-number">96.5</span>, <span class="hljs-number">72</span> &#125;;<br>        <span class="hljs-type">double</span>[] score2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">5</span>];<br>        score2[<span class="hljs-number">0</span>] = <span class="hljs-number">99</span>;<br>        score2[<span class="hljs-number">1</span>] = <span class="hljs-number">100</span>;<br>        score2[<span class="hljs-number">2</span>] = <span class="hljs-number">98.5</span>;<br>        score2[<span class="hljs-number">3</span>] = <span class="hljs-number">96.5</span>;<br>        score2[<span class="hljs-number">4</span>] = <span class="hljs-number">72</span>;<br>        <span class="hljs-keyword">if</span> (Arrays.equals(score1, score2)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;score1 数组和 score2 数组相等&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;score1 数组和 score2 数组不等&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a=<span class="hljs-number">5</span>;<br>        <span class="hljs-type">char</span> ch=<span class="hljs-string">&#x27;a&#x27;</span>;<br>        /ar ch2=<span class="hljs-string">&quot;abc&quot;</span>;<br>        String s1=<span class="hljs-string">&quot;abchef&quot;</span>;<br>        <span class="hljs-comment">//         abcef   abcdefgh</span><br>        String s2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abceF&quot;</span>);<br>        <span class="hljs-comment">//System.out.println(s1.length());</span><br>        System.out.println(s1.equals(s2));<br>        System.out.println(s1.equalsIgnoreCase(s2));<br>        System.out.println(s1.compareTo(s2));<span class="hljs-comment">//1-2</span><br></code></pre></td></tr></table></figure><h3 id="填充数组"><a href="#填充数组" class="headerlink" title="填充数组"></a>填充数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Arrays.fill(数组名,值)</span><br><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        Arrays.fill(arr,<span class="hljs-number">12</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>一般用于数据分组管理<br>其实也没啥说的,二维数组在堆内存中的表现形式为在堆内存中的下标处放置一个一维数组的地址值,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-number">0</span> <span class="hljs-number">0x0011</span><br><span class="hljs-number">1</span> <span class="hljs-number">0x0022</span><br></code></pre></td></tr></table></figure><p>高维数组的一维数组长度动态初始化时可以不受长度限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> arr[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][];<br><span class="hljs-type">int</span> arr1[] = &#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>&#125;;<br><span class="hljs-type">int</span> arr2[] = &#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;;<br>arr[<span class="hljs-number">0</span>] = arr1;<br>arr[<span class="hljs-number">1</span>] = arr2;<br></code></pre></td></tr></table></figure><p>这两个地址值分别指向另外两个一维数组,通过这种引用方式表达高维数组<br>二维数组的遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> arr[][] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;  <span class="hljs-comment">//i小于数组的行数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;f&lt; arr[i].length;f++)&#123;   <span class="hljs-comment">//f小于数组i行的长度</span><br>                System.out.print(arr[i][f]);<br>                <span class="hljs-keyword">if</span> (arr[i][f]==<span class="hljs-number">3</span>)&#123;<br>                    System.out.println();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="索引越界"><a href="#索引越界" class="headerlink" title="索引越界"></a>索引越界</h3><p>数组下标的引用超出了数组下标的范围,比如长4引5,数组的<strong>长度为元素个数-1</strong><br>Index 引用的下标 out of  bounds for length 数组长度</p><h2 id="求最大值案例"><a href="#求最大值案例" class="headerlink" title="求最大值案例"></a>求最大值案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123; <span class="hljs-comment">//i=0时,第一次循环为自己与自己比较,改成1可以省一次循环</span><br><span class="hljs-keyword">if</span>(arr1[i]&gt;max)&#123;<br>max = arr[i];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成n个1-100内的随机数并求取其中小于平均数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        System.out.println(<span class="hljs-string">&quot;请输入生成几个随机数&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i];<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;num&lt;i;num++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>            arr[num] = number;<br>            System.out.print(arr[num]+<span class="hljs-string">&quot; &quot;</span>);<br>            sum += arr[num];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;b &lt; arr.length;b++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[b]&lt;sum/i)&#123;<br>                a += <span class="hljs-string">&quot; &quot;</span>+arr[b];<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;小于平均数的有&quot;</span>+a);<br></code></pre></td></tr></table></figure><p>生成数个随机数存入数组并交换位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入一个值用以确认每组随机数的个数&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i];<br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;b&lt;i;b++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>            arr1[b] = c;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> a.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>            arr2[b] = f;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;b&lt;i;b++)&#123;<br>            System.out.print(arr1[b]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;b&lt;i;b++)&#123;<br>            System.out.print(arr2[b]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;b&lt;i;b++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> arr1[b];<br>            arr1[b] = arr2[b];<br>            arr2[b] = l;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;b&lt; arr1.length;b++)&#123;<br>            System.out.print(arr1[b]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;b&lt; arr2.length;b++)&#123;<br>            System.out.print(arr2[b]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h2 id="Java内存分配"><a href="#Java内存分配" class="headerlink" title="Java内存分配"></a>Java内存分配</h2><p>1.栈 方法运行时所使用的内存,比如main方法允许,进入方法栈中进行<br>2.堆  储存对象或者数组,new创建的,都储存在堆内存<br>3.方法区  储存可以运行的class文件<br>4.本地方法栈 JVM在使用操作系统空间的时候使用,与开发无关<br>5.寄存器 给CPU使用,与开发无关<br>在jdk7之前,<strong>方法区与堆空间是连接在一起的</strong>,在真实的空间中也是如此.在jdk8之后取消了方法区,新增元空间,功能拆分给了元空间与方法区</p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>方法运行时所使用的内存,比如main方法运行,进入方法栈中执行<br>程序的主入口(main)开始执行时进栈,完毕后出栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-comment">//进入内存栈</span><br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;  <span class="hljs-comment">//向内存中申请一块区域用于存放int类型的值a</span><br><span class="hljs-type">int</span> b=<span class="hljs-number">5</span>;  <span class="hljs-comment">//同上,先声明这个值的类型,再将数据进行储存</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a+b;  <span class="hljs-comment">//先计算a+b的值,再将结果放入int类的内存地址</span><br>sout(c);  <span class="hljs-comment">//快速打印变量c地址中的数据</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>new创建的内容,都储存在堆内存<br>每一个储存在堆内存中的数据都有其独特的地址值,互不干扰<br>数组在栈内存中的表现形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr 地址值<br></code></pre></td></tr></table></figure><p>栈内存中数组的地址值指向堆内存中用于存放数组数据的地址,堆内存表示数组先声明数组类型,再声明数组长度,之后开始记录下标与数据<br>有时会出现两个数组指向同一个空间的情况,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = arr1;<br></code></pre></td></tr></table></figure><p>此时arr2直接指向了arr1的地址,此时若修改arr2中的值,实际等同于修改arr1中的值,当打印同一个下标下的数据时,输出是相同的</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>程序中最小的执行单元,可以出现多个方法,但是main方法仅能有一个<br>将方法进行打包,之后再需要使用时可以直接调用,提高了代码的复用性与可维护性<br>将代码打包在一起的过程中称为方法的定义,定义格式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> 返回值类型 方法名 (参数)&#123;<br>方法体;<br><span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述为标准格式,如果想要调用方法可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">方法名();<br></code></pre></td></tr></table></figure><p>执行顺序为先从主入口进入,当需要调用方法时,开始寻找方法,执行完毕后回到调用处继续向下执行<br>当参数为变量时,需要为其准备赋值,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 方法名 (<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)&#123;... ...&#125;<br></code></pre></td></tr></table></figure><p>此时若直接调用此方法便会因为未给变量赋值而出错,使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">方法名(数值,数值);<br></code></pre></td></tr></table></figure><p>进行赋值,须保证类型一致</p><p>输入两个整数求和,调用求和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        mSum(a,b);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mSum</span><span class="hljs-params">(<span class="hljs-type">int</span> c,<span class="hljs-type">int</span> d)</span>&#123;<br>        System.out.println(c+d);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个方法,求长方形周长与面积</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;分二次键入长方形的长和宽&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        M(a,b);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">M</span><span class="hljs-params">(Double length,Double width)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;面积:&quot;</span>+length*width);<br>        System.out.println(<span class="hljs-string">&quot;周长:&quot;</span>+(<span class="hljs-number">2</span>*(length+width)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="全局变量-成员变量"><a href="#全局变量-成员变量" class="headerlink" title="全局变量(成员变量)"></a>全局变量(成员变量)</h4><p>想要使用一个未在方法内的变量时,除了使用形参进行传递之外,还可以设置一个静态变量达到效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h4 id="方法的第三种定义格式"><a href="#方法的第三种定义格式" class="headerlink" title="方法的第三种定义格式"></a>方法的第三种定义格式</h4><p>其实就是带返回值的方法.返回值为方法的最终结果,如果只是打印在屏幕上,那么<strong>调用方法后无法将结果再次使用</strong>,例如:<br>定义一个方法求取季度营业额,再求取全年营业额</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">all</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入第&quot;</span>+i+<span class="hljs-string">&quot;季度的销售额,用逗号隔开&quot;</span>);<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> test.next();<br>            String arr[] = t.split(<span class="hljs-string">&quot;,&quot;</span>); <span class="hljs-comment">//获取输入的值,定义为字符串数组,值与值之间的间隔是逗号</span><br>            <span class="hljs-type">int</span> a=Integer.parseInt(arr[<span class="hljs-number">0</span>]),b=Integer.parseInt(arr[<span class="hljs-number">1</span>]),c=Integer.parseInt(arr[<span class="hljs-number">2</span>]);<br>            <span class="hljs-comment">//上为获取数组中的字符串,并强制转换为int类型值,分别存储于a,b,c中</span><br>            System.out.println(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;季度的营业额为:&quot;</span>+Gsum(a,b,c));<br>            all += Gsum(a,b,c);<span class="hljs-comment">//在此处使用返回值</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;全年的营业额为:&quot;</span>+all);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Gsum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">Sum</span> <span class="hljs-operator">=</span> a+b+c;<br>    <span class="hljs-keyword">return</span> Sum; <span class="hljs-comment">//返回a+b+c的结果作为返回值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回值的调用分为<strong>直接调用,赋值调用,输出调用</strong>三种<br>return在方法中收尾,视为结束代码.当方法的返回值类型为void时,没有返回值的return可以作为结束语句出现,不返回任何值,否则报错.</p><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>Java中可以定义多个同名方法,这些方法的类型,数值,元素个数可以各不相同,Java虚拟机会通过参数的不同来区分同名的方法,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span>&#123;<br><span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重载条件:<strong>方法名一样,在同一个类当中,形参不一样</strong>.所以下列不构成重载(方法名没变,和返回值类型无关)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fn</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法重载,比较两个整数是否相同(需兼容全整数类型byte,short,int,long)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输入两个数以进行随机类型转换比较&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> s.nextInt(<span class="hljs-number">3</span>)+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">byte</span> a= (<span class="hljs-type">byte</span>)sc.nextInt(),b = (<span class="hljs-type">byte</span>)sc.nextInt();<br>            compare(a,b);<br>        &#125;<span class="hljs-keyword">if</span> (r == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-type">short</span> a= (<span class="hljs-type">short</span>) sc.nextInt(),b = (<span class="hljs-type">short</span>) sc.nextInt();<br>            compare(a,b);<br>        &#125;<span class="hljs-keyword">if</span> (r == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-type">int</span> a= sc.nextInt(),b = sc.nextInt();<br>            compare(a,b);<br>        &#125;<span class="hljs-keyword">if</span> (r == <span class="hljs-number">4</span>)&#123;<br>            <span class="hljs-type">long</span> a= (<span class="hljs-type">long</span>)sc.nextInt(),b = (<span class="hljs-type">long</span>)sc.nextInt();<br>            compare(a,b);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">byte</span> b1,<span class="hljs-type">byte</span> b2)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用byte&quot;</span>);<br>        System.out.println(b1 == b2);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">short</span> b1,<span class="hljs-type">short</span> b2)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用short&quot;</span>);<br>        System.out.println(b1 == b2);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> b1,<span class="hljs-type">int</span> b2)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用int&quot;</span>);<br>        System.out.println(b1 == b2);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">long</span> b1,<span class="hljs-type">long</span> b2)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用long&quot;</span>);<br>        System.out.println(b1 == b2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个方法用以遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>,<span class="hljs-number">45</span>,<span class="hljs-number">56</span>&#125;;<br>        listArr(arr);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设计一个方法将数组中的数据从大到小排序,返回最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>,<span class="hljs-number">45</span>,<span class="hljs-number">56</span>&#125;;<br>        maxArr(arr);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">maxArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>;s&lt; arr.length;s++)&#123;<br>                <span class="hljs-keyword">if</span> (arr[s]&gt;arr[i])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> arr[i];<br>                    arr[i] = arr[s];<br>                    arr[s] = a;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(arr[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设计一个方法求存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输入一个值获取1-10以内随机数的个数&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sc.nextInt()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            arr[i] = a.nextInt(<span class="hljs-number">9</span>)+<span class="hljs-number">1</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;键入需要查询的值&quot;</span>);<br>        <span class="hljs-keyword">if</span> (contains(arr,sc.nextInt())==<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;不存在&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> number)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i] == number)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设计一个方法将数组arr中从下标from(包含from)开始到下标to(包含to)结束的所有元素<strong>复制到新数组中,将新数组返回</strong>或<strong>打印此间所有元素</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输入一个值获取1-100以内随机数的个数&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sc.nextInt()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            arr[i] = a.nextInt(<span class="hljs-number">99</span>)+<span class="hljs-number">1</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;输入两个值,获取一段数组下标所对应的数据&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> sc.nextInt(),t = sc.nextInt();<br>        <span class="hljs-keyword">if</span> (f&gt;t)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">change</span> <span class="hljs-operator">=</span> f;<br>            f = t;<br>            t = change;<br>            System.out.println(<span class="hljs-string">&quot;大小颠倒,已自动交换&quot;</span>);<br>        &#125;<br>        getArr(arr,f,t);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> from,<span class="hljs-type">int</span> to)</span>&#123;<br>        <span class="hljs-keyword">if</span> (from&lt;<span class="hljs-number">0</span> || to&gt; arr.length-<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;输入的不是有效范围&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (;from&lt;=to-<span class="hljs-number">1</span>;from++)&#123;<br>            System.out.print(arr[from]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println(arr[from]+<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法的内存"><a href="#方法的内存" class="headerlink" title="方法的内存"></a>方法的内存</h4><h5 id="方法调用的基本内存原理"><a href="#方法调用的基本内存原理" class="headerlink" title="方法调用的基本内存原理"></a>方法调用的基本内存原理</h5><p>方法被调用后会进栈运行,没有new则与堆无关.在main方法中所声明的变量会在main方法占用的栈内存中申请一块区域用于存放自身,可简化为<strong>将变量储存在main占用的内存中</strong>,当main方法代码结束(出栈)后,变量立即被摧毁.进栈与出栈有顺序之分,可视为<strong>后来居上</strong>,被调用的方法按序从上往下出栈,main方法最后出栈.</p><h5 id="方法传递基本数据类型的内存原理"><a href="#方法传递基本数据类型的内存原理" class="headerlink" title="方法传递基本数据类型的内存原理"></a>方法传递基本数据类型的内存原理</h5><p>基本数据类型:变量中存储的真实数据,而并非指向另一个数据(int a &#x3D; b;)<br>引用数据类型:目前学习到的仅有数组为引用数据类型,因为完整格式中带有new关键字,此时在堆内存中申请内存存放数据.此时在栈内存中存放的为堆内存中真实变量的地址值.所以,引用变量可以简化为<strong>引用了其他空间的地址值,并没有直接存放真实数据</strong>,此时若进行引用赋值,实际为将自身地址赋值给其他变量.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArgsDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>sout(<span class="hljs-string">&quot;调用change方法前:&quot;</span>+number);<br>change(number);<br>sout(<span class="hljs-string">&quot;调用后:&quot;</span>+number); <span class="hljs-comment">//输出为100</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span>&#123;<br>number = <span class="hljs-number">200</span>;  <span class="hljs-comment">//实际变化的为↑↑这个number</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述语句实际是对change方法中被赋值的int number进行再次赋值,并没有对main方法中的number产生影响,代码块之间层级分明.变量仅能在所属的方法内有效.形参的改变不会影响真实参数的值(实际等同于在栈内存中再次申请区域存放形参number的值,出栈时形参即被摧毁).<br>若想改变真实参数,则需改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">number = change(number);<br><span class="hljs-comment">//同时在change方法中需要加入:</span><br><span class="hljs-keyword">return</span> number; <span class="hljs-comment">//返回一个值作为真实参数</span><br><span class="hljs-comment">//还需将change方法返回的变量类型改为int</span><br></code></pre></td></tr></table></figure><p>当方法传递引用的数据类型为带有new的引用数据类型时,形参的变化会影响真实参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArgsDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br>sout(<span class="hljs-string">&quot;调用change方法前:&quot;</span>+arr[<span class="hljs-number">1</span>]);<br>change(arr);<br>sout(<span class="hljs-string">&quot;调用后:&quot;</span>+arr[<span class="hljs-number">2</span>]); <span class="hljs-comment">//输出为200</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-number">200</span>;  <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时形参的变量值为数组arr在堆内存中的地址,所以change方法的赋值语句将直接对堆内存中的真实数据进行赋值,直接影响了真实参数.<br>所以,简而言之基本数据类型传递的是真实的数据,引用数据类型传递的是地址值</p><h1 id="综合案例测试"><a href="#综合案例测试" class="headerlink" title="综合案例测试"></a>综合案例测试</h1><h2 id="机票"><a href="#机票" class="headerlink" title="机票"></a>机票</h2><p>需求:机票价格受到淡季,旺季,头等舱和经济舱影响.机票原价500,旺季(5~10月)头等舱九折,经济舱8.5折,淡季(11月到来年4月)头等舱7折,经济舱6.5折</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入月份与头等舱/经济舱,使用逗号隔开&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sc.next();<br>        String arr[] = input.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.parseInt(arr[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">switch</span> (a)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>:<br>                <span class="hljs-keyword">if</span> (Objects.equals(arr[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;头等舱&quot;</span>))&#123;<br>                    System.out.println(<span class="hljs-string">&quot;机票价格为:&quot;</span>+(<span class="hljs-number">500</span>*<span class="hljs-number">0.9</span>));<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Objects.equals(arr[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;经济舱&quot;</span>)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;机票价格为:&quot;</span>+(<span class="hljs-number">500</span>*<span class="hljs-number">0.85</span>));<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;请确认所在舱室&quot;</span>);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>:<br>                <span class="hljs-keyword">if</span> (Objects.equals(arr[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;头等舱&quot;</span>))&#123;<br>                    System.out.println(<span class="hljs-string">&quot;机票价格为:&quot;</span>+(<span class="hljs-number">500</span>*<span class="hljs-number">0.7</span>));<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Objects.equals(arr[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;经济舱&quot;</span>)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;机票价格为:&quot;</span>+(<span class="hljs-number">500</span>*<span class="hljs-number">0.65</span>));<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;请确认所在舱室&quot;</span>);<br>                &#125;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;请输入一个有效的月份&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>首位大写,前四位字母,最后一位为数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">char</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">52</span>];<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> arr.length/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;arr.length/<span class="hljs-number">2</span>;i++)&#123;<br>            arr[i]= (<span class="hljs-type">char</span>) (<span class="hljs-number">65</span>+i);<br>            arr[m+i] = (<span class="hljs-type">char</span>)(<span class="hljs-number">97</span>+i);<br>        &#125;<br>        System.out.print(arr[a.nextInt(<span class="hljs-number">25</span>)]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>            System.out.print(arr[a.nextInt(<span class="hljs-number">51</span>)]);<br>        &#125;<br>        System.out.print(a.nextInt(<span class="hljs-number">9</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>对各位数+5并%10,输出得数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输入一串数字&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">ori</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> ori.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> num*<span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>            num /= <span class="hljs-number">10</span>;<br>            l++;<br>        &#125;<br>        <span class="hljs-type">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[l];<br>        <span class="hljs-keyword">for</span> (;l&gt;<span class="hljs-number">0</span>;l--)&#123;<br>            number = (number/<span class="hljs-number">10</span>);<br>            arr[arr.length-l] = (number+<span class="hljs-number">5</span>)%<span class="hljs-number">10</span>;<br>            System.out.print(arr[arr.length-l]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽奖"><a href="#抽奖" class="headerlink" title="抽奖"></a>抽奖</h2><p>随机存入奖项于数组,然后抽奖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">gRand</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> num)</span>&#123;  <span class="hljs-comment">//获取num个随机数存入数组</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>            arr[i] = a.nextInt(<span class="hljs-number">99</span>)+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">evi</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;  <span class="hljs-comment">//验证数组中随机数是否不同</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>;f&lt; arr.length;f++)&#123;<br>                <span class="hljs-keyword">if</span> (arr[i]==arr[f])&#123;<br>                    <span class="hljs-type">Random</span> <span class="hljs-variable">newOne</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                    arr[f] = newOne.nextInt(<span class="hljs-number">99</span>)+<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> arr1[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span> arr2[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>        gRand(arr2,<span class="hljs-number">3</span>); <span class="hljs-comment">//生成三个随机数存入</span><br>        <span class="hljs-keyword">while</span>(evi(arr2)==<span class="hljs-literal">false</span>)&#123; <span class="hljs-comment">//验证三个数是否有不同</span><br>        evi(arr2);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; arr2.length;i++)&#123;<br>            arr1[arr2[i]] = i+<span class="hljs-number">1</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;输入一个一到一百的数来获取奖励&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">guess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> guess.nextInt();<br>        <span class="hljs-keyword">if</span> (arr1[result]==<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;未中奖&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;中了&quot;</span>+arr1[result]+<span class="hljs-string">&quot;等奖&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>主要为学习获取已有对象并使用,当没有合适的对象可供使用时,则自己设计一个对象并使用</p><h2 id="设计对象并使用"><a href="#设计对象并使用" class="headerlink" title="设计对象并使用"></a>设计对象并使用</h2><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>类:是对象共同特征的描述<br>对象:是真实存在的具体东西<br>Java中必须先有类再创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> class 类名&#123;<br>成员变量<br>&#125;<br>成员方法&#123;&#125;<br></code></pre></td></tr></table></figure><p>若想得到类的对象,需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">类名 对象名 = <span class="hljs-keyword">new</span> 类名();<br><span class="hljs-type">Main</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Main</span>();<br></code></pre></td></tr></table></figure><p>成员变量一般不赋值,若想使用对象<br>访问属性:对象名.成员变量<br>访问行为:对象名.方法名();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        p.brand = <span class="hljs-string">&quot;RedMi 10X&quot;</span>;<br>        p.price = <span class="hljs-number">1998</span>;<br>        System.out.println(p.brand);<br>        System.out.println(p.price);<br>        p.call();<br>        p.download();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    String brand;<br>    <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;通话中&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始下载&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>倘若不想将类Phone放在类Main下方,可以新建立一个类,并将Phone定义为一个公共类供调遣<br>一个类可以拥有多个对象,类所定义的变量可以用于不同对象的输出<br>若未重新定义变量,则按成员变量的默认值进行输出</p><h4 id="定义类的规则"><a href="#定义类的规则" class="headerlink" title="定义类的规则"></a>定义类的规则</h4><p>类名首字母大写,英文,有意义,满足驼峰格式,不能用关键字,满足标志符规定<br>一个代码中可以定义多个类,但是公共类只能有一个,公共类修饰的必须是Java代码的文件名称</p><h4 id="成员变量的格式"><a href="#成员变量的格式" class="headerlink" title="成员变量的格式"></a>成员变量的格式</h4><p>完整格式应为:修饰符 数据类型 变量名称 &#x3D; 初始化值;<br>一般无需指定初始化值</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>需求:定义一个类描述人<br>属性:姓名,年龄<br>行为:食饭,睡觉<br>对象代表什么,就得封装对应的数据,并提供数据对应的行为<br>例如人画圆,画圆这个方法应该放在类圆中.圆属于圆,椭圆也属于圆,圆的具体属性归于类圆.<br>人提供值给类圆,类圆根据值来改变圆的状态并将圆返回给人<br>之前所使用的全部函数,其实都是sun公司为用户提供的私人类(方法)</p><p>封装的好处:对象代表什么,就封装对应的数据,并提供数据对应的行为<br>降低学习成本,可以少记,少学.无需记忆对象有哪些方法,有需要的时候去找即可</p><h4 id="Private关键字"><a href="#Private关键字" class="headerlink" title="Private关键字"></a>Private关键字</h4><p>是一个权限修饰符<br>可以修饰成员(成员变量和成员方法)<br>被private修饰的成员只能在<strong>本类</strong>中访问,具有安全性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">gf1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GirlFriend</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入姓名&quot;</span>);<br>        gf1.setName(sc.next());<br>        System.out.println(<span class="hljs-string">&quot;输入年龄&quot;</span>);<br>        gf1.setAge(sc.nextInt());<br>        System.out.println(<span class="hljs-string">&quot;输入性别?&quot;</span>);<br>        gf1.setGender(sc.next());<br>        System.out.println(gf1.getName()+gf1.getGender()+gf1.getAge()+<span class="hljs-string">&quot;岁&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlFriend</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        <span class="hljs-keyword">if</span> (a&gt;=<span class="hljs-number">18</span> &amp;&amp; a&lt;=<span class="hljs-number">30</span>) &#123;<br>            age = a;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;数据非法&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String g)</span>&#123;<br>        <span class="hljs-keyword">if</span> (Objects.equals(g,<span class="hljs-string">&quot;女&quot;</span>))&#123;<br>            gender = g;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;啊?我大受震撼&quot;</span>);<br>            gender = g;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span>&#123;<br>        name = n;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由上可见,被private修饰的变量仅能通过调用类中的方法进行使用,否则报错</p><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><p>若形参的名字和成员变量相同,例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>    age = age;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么则会无法输出正确值,但是如果形参和成员变量名相同,则会更容易理解.处理这种问题时则需要用到this关键字<br>this特指成员变量,所以上述可以改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-built_in">this</span>.age = age;<br></code></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>&#123;<br>    修饰符 类名(参数)&#123;<br>        方法体;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>特点:<br>1.方法名和类名相同,大小写也一致<br>2.没有具体的返回值类型,甚至连void也没有<br>3.没有具体的返回值,不能由return带回结果数据</p><p>创建对象时由虚拟机调用,不能手动调用构造方法<br>每创建一次对象,就会调用一次构造方法</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">19</span>); <span class="hljs-comment">//创建对象的同时为成员变量赋值</span><br>System.out.println(s.getName()+s.getAge);<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>    方法体;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果没有写任何的构造方法,那么虚拟机会加一个空参构造方法,此时必须使用方法对成员变量进行赋值(setName();)<br>两种构造方法分别对应不同情况.有参构造主要用于明确参数类型与数量的情况,无参构造用于属性值不明的时候,未输入的值则变为默认参数<br>如果定义了构造方法,则系统不会再提供默认的构造方法<br>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-type">Student</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">17</span>);<br><br><span class="hljs-comment">//类中方法:</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>此时变量s的构造报错,因为方法中已经定义了一个有参的方法,则系统不再提供默认的空参方法. </p><h3 id="构造方法的重载"><a href="#构造方法的重载" class="headerlink" title="构造方法的重载"></a>构造方法的重载</h3><p>带参&#x2F;无参两者方法名相同,但是参数不同,就是构造方法的重载<br>无论是否使用,都建议手动写无参方法<br>任何类定义默认自带无参数构造方法,写不写都有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">方法名(参数)&#123;方法体&#125;<br></code></pre></td></tr></table></figure><h2 id="标准javaBean类"><a href="#标准javaBean类" class="headerlink" title="标准javaBean类"></a>标准javaBean类</h2><p>Java Bean 是一种类，而且是特殊的、可重用的类。<br>Java language 是一种面向对象的编程语言，类是面向对象的编程语言的基础；可重用又是面向对象编程思想存在的意义之一，所以起名 Bean 很是形象。<br>类名需要见名知意<br>成员变量使用private修饰<br>提供至少两个构造方法<br> 1.无参<br> 2.有参<br>成员方法要提供 每一个成员变量所对应的set&#x2F;get,如果还有其他行为也需要加上</p><h2 id="Java内存分配介绍-算是复习"><a href="#Java内存分配介绍-算是复习" class="headerlink" title="Java内存分配介绍(算是复习?)"></a>Java内存分配介绍(算是复习?)</h2><p>jvm把内存分为五块区域:栈 堆 方法区 本地方法栈 寄存器<br>当运行一个类时,这个类的字节码会加载在方法区中临时存储,在jdk7之前堆和方法区连在一起,实际上也确实连在一起.而后取消方法区,新增元空间,将方法区的功能拆分给堆与元空间.<br>方法被调用时进栈<br>new出的数据都会放在堆空间</p><h3 id="一个对象的内存图"><a href="#一个对象的内存图" class="headerlink" title="一个对象的内存图"></a>一个对象的内存图</h3><p>Student s &#x3D; new Student();<br>1.加载class文件进方法区<br>2.声明局部变量s<br>3.在堆空间中开辟空间存放变量<br>4.默认初始化 (int &#x3D; 0)<br>5.显示初始化 (初始化为成员变量的定义值)<br>6.构造方法初始化<br>7.将地址值赋予左边的局部变量</p><h3 id="两个对象的内存图"><a href="#两个对象的内存图" class="headerlink" title="两个对象的内存图"></a>两个对象的内存图</h3><p>再次创建对象时,.class不需要重复加载,重复使用即可(main方法尚未执行完毕)<br>当两个变量指向同一个空间时(Student stu2 &#x3D; stu1;),任何对两个变量的修改都会影响同一内存地址中的值.<br>其余和单个差不多</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>基本数据类型数据值都储存在自己的空间中<br>new出的数据都是引用数据类型，在栈内存中存放了一个指向堆内存中的地址值，实际值储存在堆内存中</p><h3 id="this的内存原理"><a href="#this的内存原理" class="headerlink" title="this的内存原理"></a>this的内存原理</h3><p>this实际指向所在方法调用者的地址<br>对象创建时，对象中会默认初始化&#x2F;显示初始化。然后例如 s.set***()时，方法内的this实际指向了对象s的地址，而非形参</p><h3 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h3><table>    <tr style="background-color: darkred;">        <th>区别</th>        <th>成员变量</th>        <th>局部变量</th>    </tr>    <tr>        <td>类中位置不同</td>        <td>类中，方法外</td>        <td>方法内、方法声明上</td>    </tr>    <tr>        <td>初始化值不同</td>        <td>有默认初始化值</td>        <td>没有，使用之前需要完成赋值</td>    </tr>    <tr>        <td>内存位置不同</td>        <td>堆内存</td>        <td>栈内存</td>    </tr>    <tr>        <td>生命周期不同</td>        <td>随着对象的创建而存在<br>随着对象的消失而消失</td>        <td>随着方法的调用而存在<br>随着方法的运行结束而消失</td>    </tr>    <tr>        <td>作用域</td>        <td>整个类中有效</td>        <td>当前方法中有效</td>    </tr></table><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态成员方法仅能访问静态成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">New</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Student2</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student2</span>();<br>        <span class="hljs-type">Student2</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student2</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;分别输入对象1的姓名 性别 年龄，使用逗号隔开&quot;</span>);<br>        s1.setInfo(sc.next());<br>        System.out.println(<span class="hljs-string">&quot;分别输入对象2的姓名 性别 年龄，逗号隔开&quot;</span>);<br>        s2.setInfo(sc.next());<br>        s1.title();<br>        s1.show();<br>        s2.show();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;法外狂徒：&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(String Info)</span>&#123;<br>        String arr[] = Info.split(<span class="hljs-string">&quot;，&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-built_in">this</span>.age = Integer.parseInt(arr[<span class="hljs-number">2</span>]);<br>        <span class="hljs-built_in">this</span>.gender = arr[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;性&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name+gender+age+<span class="hljs-string">&quot;岁&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">title</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(title);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">New</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Goods[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>[<span class="hljs-number">3</span>];  <span class="hljs-comment">//创建数组以存放对象</span><br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;001&quot;</span>,<span class="hljs-string">&quot;t1&quot;</span>,<span class="hljs-number">2999.0</span>,<span class="hljs-number">3</span>);<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;002&quot;</span>,<span class="hljs-string">&quot;t2&quot;</span>,<span class="hljs-number">2999.0</span>,<span class="hljs-number">3</span>);<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;003&quot;</span>,<span class="hljs-string">&quot;t3&quot;</span>,<span class="hljs-number">2999.0</span>,<span class="hljs-number">3</span>);<br>        arr[<span class="hljs-number">0</span>] = g1;  <span class="hljs-comment">//存放对象进入数组</span><br>        arr[<span class="hljs-number">1</span>] = g2;<br>        arr[<span class="hljs-number">2</span>] = g3;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; arr.length;i++)&#123;<br>            arr[i].ShowInfo();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Goods</span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Goods</span><span class="hljs-params">(String id,String name,<span class="hljs-type">double</span> price,<span class="hljs-type">int</span> count)</span>&#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ShowInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;商品id：&quot;</span>+id+<span class="hljs-string">&quot;  商品名称：&quot;</span>+name+<span class="hljs-string">&quot;  商品价格：&quot;</span>+price+<span class="hljs-string">&quot;商品数量：&quot;</span>+count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">New</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">New</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">New</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-built_in">this</span>();  <span class="hljs-comment">//在无形参的情况下执行一次本方法，输出一次无参方法</span><br>        System.out.println(<span class="hljs-string">&quot;有&quot;</span>+s);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">New</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">New</span>(<span class="hljs-string">&quot;Tom&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求圆与三角的面积和周长"><a href="#求圆与三角的面积和周长" class="headerlink" title="求圆与三角的面积和周长"></a>求圆与三角的面积和周长</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">New</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">GS</span> <span class="hljs-variable">cir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GS</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-type">GS</span> <span class="hljs-variable">tri</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GS</span>(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>);<br>        System.out.println(<span class="hljs-string">&quot;圆周长：&quot;</span>+cir.GetC()+<span class="hljs-string">&quot;    面积：&quot;</span>+cir.GetS());<br>        System.out.println(<span class="hljs-string">&quot;三角周长：&quot;</span>+tri.GetC()+<span class="hljs-string">&quot;    面积：&quot;</span>+tri.GetS());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GS</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> C;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> S;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GS</span><span class="hljs-params">(<span class="hljs-type">int</span> r)</span>&#123;<br>        <span class="hljs-keyword">if</span> (r&lt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;数据非法&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            S = <span class="hljs-number">3.14</span>*r*r;<br>            C = <span class="hljs-number">3.14</span>*<span class="hljs-number">2</span>*r;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GS</span><span class="hljs-params">(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b,<span class="hljs-type">double</span> c)</span>&#123;<br>        <span class="hljs-keyword">if</span> (a+b&gt;c)&#123;<br>        C = a+b+c;<br>        S = Math.sqrt(C*(C-a)*(C-b)*(C-c));<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;数据不合理&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">GetS</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> S;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">GetC</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> C;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h1><p>通常以双引号括起即为字符串,当任何类型与字符串相加时,+变为连接符<br>String是java定义好的一个类,定义在Java.lang包中,所以使用时不需要导包<br>字符串创建后不可更改</p><h2 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h2><p>创建String对象有两种方式:赋值与new<br>使用new的方法构造字符串时,可以进行空参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;芜湖&quot;</span>);<br></code></pre></td></tr></table></figure><p>根据字符数组的内容再创建一个新的字符串:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chs);<br></code></pre></td></tr></table></figure><p>传递一个字节数组,根据字节数组的内容再创建一个新的字符串对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">97</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<br></code></pre></td></tr></table></figure><p>此时结果为abcd,因为计算机会查找字节码对应的ASCII码表<br>此处引入一个新概念,串池(StringTable)<br>在jdk7之前存在于方法区中,jdk7开始移到了堆内存之中<br>通过直接赋值的方法创建的字符串都会被存储于串池,可以简单理解为字符串常量池,使用双引号创建新字符串时,会先检查串池内是否存在相同值,有则复用,无则创建</p><h2 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h2><p>基本数据类型比较的是数据值<br>引用数据类型比较的是地址值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>System.out.println(s1==s2);  <span class="hljs-comment">//输出false</span><br></code></pre></td></tr></table></figure><p>s1在堆内存中,s2在串池之中,地址值并不相同,所以输出为false<br>字符串的比较可以使用两种方法:</p><ol><li>boolean equals方法(要比较的字符串)               完全一样是true,否则为false</li><li>boolean equalsIgnoreCase(要比较的字符串)         忽略大小写的比较</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ABC&quot;</span><br>System.out.println(s1.equals(s2));<br>System.out.println(s1.equalsIgnoreCase(s3));<br></code></pre></td></tr></table></figure><p>选中代码后通过ctrl+b可以进行代码溯源<br>通过键盘键入的值实际上是new出的一个字符串,和直接赋值的并不相同</p><h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">passWord</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入用户名&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> sc.next();<br>            System.out.println(<span class="hljs-string">&quot;请输入密码&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-keyword">if</span> (input.equals(passWord) &amp;&amp; userName != <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (i==<span class="hljs-number">3</span>)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;登录已被禁用,请关闭后重新尝试&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>+<span class="hljs-string">&quot;,您还剩余&quot;</span>+(<span class="hljs-number">3</span>-i)+<span class="hljs-string">&quot;次机会,请重新输入:&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处未做用户名验证,需要可以自行添加</p><h3 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h3><p>一般情况下都是先通过.length()获取字符串长度,然后通过循环得到其中每一个字符<br>在访问数组下标值时,可以通过input.charAt(数组下标) 来进行访问<br>遍历并获取字符串中大小写字符,数字字符分别出现的次数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入字符串&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bigCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">smallCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numberCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;input.length();i++)&#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> input.charAt(i);<br>            <span class="hljs-keyword">if</span>(c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span> &amp;&amp; c &gt;= <span class="hljs-string">&#x27;A&#x27;</span>)&#123;<br>                bigCount++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>                smallCount++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                numberCount++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;大写字符有:&quot;</span>+bigCount+<span class="hljs-string">&quot;个&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;小写字符有:&quot;</span>+smallCount+<span class="hljs-string">&quot;个&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;数字字符有:&quot;</span>+numberCount+<span class="hljs-string">&quot;个&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入字符串&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">put</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; input.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> input.charAt(i);<br>            <span class="hljs-keyword">if</span> (i==input.length()-<span class="hljs-number">1</span>)&#123;<br>                put += c+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            put += c+<span class="hljs-string">&quot;,&quot;</span>;<br>        &#125;<br>        System.out.println(put);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符串反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入字符串&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sc.next();<br>        System.out.println(reverser(input));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">reverser</span><span class="hljs-params">(String a)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">re</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> a.charAt(a.length()-i-<span class="hljs-number">1</span>);<br>            re += r;<br>        &#125;<br>        <span class="hljs-keyword">return</span> re;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h2><p>和StringBuilder一样,也可以看做一个容器,创建之后内容是可变的<br>StringJoiner的构造方法:</p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public StringJoiner(间隔符号)</td><td align="center">创建一个StringJoiner对象,指定拼接时的间隔符号</td></tr><tr><td align="center">public StringJoiner(间隔符号,开始符号,结束符号)</td><td align="center">创建一个StringJoiner对象,指定拼接时的间隔符号,开始符号,结束符号</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;---&quot;</span>);<br><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="StringJoiner的成员方法"><a href="#StringJoiner的成员方法" class="headerlink" title="StringJoiner的成员方法"></a>StringJoiner的成员方法</h3><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public StringJoiner add (添加的内容)</td><td align="center">添加数据,并返回对象本身</td></tr><tr><td align="center">public int length()</td><td align="center">返回长度(字符出现的个数)</td></tr><tr><td align="center">public String toString</td><td align="center">返回一个字符串(该字符串就是拼接之后的结果)</td></tr></tbody></table><h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;---&quot;</span>);<br>       <span class="hljs-comment">//创建一个对象,并指定中间的间隔符号</span><br>       sj.add(<span class="hljs-string">&quot;aaa&quot;</span>).add(<span class="hljs-string">&quot;bbb&quot;</span>).add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>       System.out.println(sj); <span class="hljs-comment">//输出为aaa---bbb---ccc</span><br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-comment">//StringJoiner(&quot;间隔符号&quot;,&quot;起始符号&quot;,&quot;结束符号&quot;);</span><br>        sj.add(<span class="hljs-string">&quot;aaa&quot;</span>).add(<span class="hljs-string">&quot;bbb&quot;</span>).add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        System.out.println(sj); <span class="hljs-comment">//输出为[aaa,bbb,ccc]</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>集合可以简单认为是自动扩容的数组,但集合仅能存放引用数据类型和包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">ArrayList&lt;string&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arraylist</span>&lt;String&gt;();<br>ArrayList&lt;string&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arraylist</span>&lt;&gt;();<br>System.out.println(list1);  <span class="hljs-comment">//输出为[],就是空,打印时会将所有的数据进行包装</span><br></code></pre></td></tr></table></figure><p>ArrayList是一个已经写好的类,这个类在底层做了一些处理<br>打印对象不是地址值,而是集合中存储的数据内容,在展示的时候会以[]将所有的数据进行包装<br><img src="img/java/成员方法.png"></p><h2 id="集合遍历"><a href="#集合遍历" class="headerlink" title="集合遍历"></a>集合遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;Try&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;it&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;and&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;create&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;new bug&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == list.size() - <span class="hljs-number">1</span>)&#123;<br>                System.out.print(list.get(i));<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(list.get(i)+<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/img/java/基本数据类型对应的包装类.png">在创建时必须写出完整格式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">ArrayList&lt;<span class="hljs-type">int</span>&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arraylist</span>&lt;&gt;(); <span class="hljs-comment">//会报错</span><br>ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arraylist</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h2 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h2><p>定义一个集合,添加一些对象并进行遍历<br>类的属性:姓名,年龄</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">14</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">55</span>);<br>        list.add(s1);<br>        list.add(s2);<br>        list.add(s3);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> list.get(i);<br>            System.out.println(stu.getName()+<span class="hljs-string">&quot;,&quot;</span>+stu.getAge());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么如果改为从键盘输入获取对象的信息,则为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>            System.out.println(<span class="hljs-string">&quot;请输入学生的姓名:&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>            System.out.println(<span class="hljs-string">&quot;请输入学生的年龄:&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            s.setName(name);<br>            s.setAge(age);<br>            list.add(s);<br>        &#125;<br>        System.out.println(list.size()); <span class="hljs-comment">//仅仅只是告诉你集合内录入了几个对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(i);<br>            System.out.println(s.getName()+<span class="hljs-string">&quot;,&quot;</span>+s.getAge());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口中既可以有抽象也可以有非抽象,方法不能有方法体</p><h1 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h1><p>面向对象三大类:</p><ol><li>封装</li><li>继承</li><li>多态<br>Alt+Insert可以快速构建<br>工具类:帮助做事,但是不描述任何事物的类</li><li>Javabean类:用来描述一类事物的类,比如Student,Teacher等</li><li>测试类:用来检查其他类是否书写正确,带有main方法的类,是程序的入口</li><li>工具类:不是用来描述一类事物的,而是用来做一些事情的类<br>工具类需要见名知意,同时私有化构建方法</li></ol><h2 id="static静态"><a href="#static静态" class="headerlink" title="static静态"></a>static静态</h2><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>static是静态修饰符,可以修饰成员方法&#x2F;变量<br>被static修饰的成员变量叫静态变量,可以被该类中<strong></p><ol><li>所有对象共享</li><li>静态变量是随着类的加载而加载进内存的,优先于对象先出现在内存之中</li><li>不属于对象,属于类<br>调用方式:<br>1.类名调用(推荐)<br>2.对象名调用</strong></li></ol><p>内存图:<br><img src="/img/java/static内存图.png"></p><h4 id="例题-静态变量"><a href="#例题-静态变量" class="headerlink" title="例题(静态变量)"></a>例题(静态变量)</h4><p>需求:写一个JavaBean类来描述这个班级的学生<br>属性:姓名,年龄,性别<br>行为:学习<br>先新建一个学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String hobby;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getHobby</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hobby;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHobby</span><span class="hljs-params">(String hobby)</span> &#123;<br>        Student.hobby = hobby;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name+<span class="hljs-string">&quot;,&quot;</span>+age+<span class="hljs-string">&quot;,&quot;</span>+gender+<span class="hljs-string">&quot;,喜欢&quot;</span>+hobby);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name+<span class="hljs-string">&quot;正在学习&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后开始写测试用对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        Student.setHobby(<span class="hljs-string">&quot;打电动&quot;</span>);  <span class="hljs-comment">//使用static修饰后通过类名调用</span><br>        s1.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        s1.setAge(<span class="hljs-number">23</span>);<br>        s1.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>        s2.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>        s2.setAge(<span class="hljs-number">14</span>);<br>        s2.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>        s1.showInfo();<br>        s2.showInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="static静态方法"><a href="#static静态方法" class="headerlink" title="static静态方法"></a>static静态方法</h3><p><strong>特点:</p><ol><li>多用在测试类和工具类中</li><li>Javabean类中很少使用</strong><br>调用方式:</li><li>类名调用</li><li>对象名调用</li></ol><p>静态方法只能访问静态变量和静态方法<br>非静态方法可以访问所有<br>静态方法中不能使用this关键字</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>对象代表什么,就得封装对应的数据并提供数据对应的行为<br>有时多个Javabean类拥有相似的数据类型和数量,比如多个Javabean都拥有吃饭睡觉等数据,此时若重复在Javabean中封装数据,则代码冗余<br>此时可以将其中<strong>重复的数据</strong>提取出来作为一个基础的Javabean类,然后通过继承将数据继承给其他子类,子类在此基础上封入自己的数据类型.</p><ol><li>提高了代码复用性</li><li>子类可以以此为基础添加其他功能,使子类更强大<br>使用方法:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 子类 extends 父类&#123;&#125;<br></code></pre></td></tr></table></figure></li></ol><p>所以,继承的使用状况是:</p><ol><li>类与类之间有相同的内容</li><li>子类是父类的一种</li></ol><p>比如鱼和人都有名字,但是一般都不共用一个父类.鱼用动物,人用人</p><img src="img/java/this与super.png">this:理解为一个变量,表示当前方法调用者的地址值super:代表父类存储空间,如果本类中没有相应的方法其实也不用写super,会自动寻找父类中的方法<h3 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h3><p>Java只支持单继承,不支持多继承,但支持多层继承</p><ul><li>单继承:一个子类仅能继承一个父类</li><li>不支持多继承:一个子类不能同时继承多个父类</li><li>多层继承:可以当”孙子”,实际上称为直接父类与间接父类</li></ul><p>每一个类都直接或间接的继承于<strong>Object类</strong>,这是一个最基础的类,每一个自定义的基础类都建立在Object类上,由Java编译器自动添加,无需手动.</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p>行为类1:吃饭 喝水 读书 看电视<br>行为类2:吃饭 喝水 读书 玩游戏<br>行为类3:吃饭 喝水 读书 弹钢琴<br>行为类4:吃饭 喝水 游泳 玩游戏<br>请按照继承的思想特点进行继承体系的设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">S1</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">S1</span>();<br>        <span class="hljs-type">S2</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">S2</span>();<br>        <span class="hljs-type">S3</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">S3</span>();<br>        <span class="hljs-type">S4</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">S4</span>();<br>        s1.act4();<br>        s2.act4();<br>        s3.act4();<br>        s4.act4();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;喝水&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">S1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;读书&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act4</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;看电视&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">S2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;读书&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act4</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;玩游戏&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">S3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;读书&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act4</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;弹钢琴&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">S4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;游泳&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act4</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;玩游戏&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="子类能继承的内容"><a href="#子类能继承的内容" class="headerlink" title="子类能继承的内容"></a>子类能继承的内容</h3><p>类的成员:构造方法,成员变量,成员方法</p><ul><li>构造方法 不能继承(无论修饰符)</li><li>成员变量 可以继承(无论修饰符)</li><li>成员方法 非私有可以,私有不能</li></ul><p>继承过来的非私有成员变量可以认为是拷贝了一份,私有成员变量也是,但并不能直接调用,需要set&#x2F;get对其进行操作</p><p>类在嵌套继承时,会从父类继承一个虚方法表,只有其中的虚方法可以被继承(不被private,final,static修饰),每一级继承都会向方法表中填入自己的虚方法.</p><p>继承特点:</p><ul><li>成员变量:<strong>就近继承</strong>(首先在继承类找,然后去父类)<br>如果调用父类的变量而非子类,可以”super.变量名”进行调用,打印本类的变量可以直接打印变量名,也可以”this.变量名”</li><li>成员方法:同样就近,实际上在调用的方法前有一个隐藏的this,如果子类中没有相应的方法,则去调用父类中的方法</li></ul><h3 id="子类方法重写"><a href="#子类方法重写" class="headerlink" title="子类方法重写"></a>子类方法重写</h3><p>当父类的方法不能满足子类当前的需求时,需要进行方法的重写<br>仅仅只是需要<strong>在子类中重写一样的方法声明</strong>即可<br><strong>@Override</strong>重写后的方法可以添加这个,告诉编译器这是一个重写后的方法,让编译器检查该方法是否出错.位置处于方法的上方<br>当子类中出现方法重写时,会覆盖从父类继承的虚方法表中的方法</p><ol><li>重写方法的名称,形参列表必须与父类中一致</li><li>访问子类权限必须大于父类</li><li>返回值类型子类必须小于父类</li><li>重写的方法尽量和父类保持一致</li><li>私有方法不能重写</li><li>子类不能重写父类的静态方法,重写会报错()<br>五和六的实质是<strong>只能重写虚方法表中的方法</strong></li></ol><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p>也不算例题,只算一个技巧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;休息&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">S</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">act</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>.act();<br>        System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上述例子,可以看出如果只是想要在原有的方法上进行内容添加时,原有的内容可以通过super来调用.</p><h3 id="构造方法的访问特点"><a href="#构造方法的访问特点" class="headerlink" title="构造方法的访问特点"></a>构造方法的访问特点</h3><p>父类中的构造方法不会被子类继承<br>子类中所有的构造方法默认先访问父类中的无参构造,再执行自己<br>实际是为父类中的数据先完成一次父类数据空间的初始化,如果没有初始化则无法调用<br>子类构造方法的第一行语句默认为super(),不写也存在,且必须处于第一行<br>如果想要调用父类的有参构造,必须手动写super进行调用<br>调用无参和有参的区别仅仅需要:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>&#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">F</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无参&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">F</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>,age = age;<br>        System.out.println(<span class="hljs-string">&quot;有参&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">F</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">super</span>();  <span class="hljs-comment">//默认被隐去</span><br>        System.out.println(<span class="hljs-string">&quot;子类无参&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name,age);  <span class="hljs-comment">//此行是调用父类的带参构造</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想在创建对象的同时进行赋值,则需要调用父类的带参构造,否则得到的仅仅只是空参构造的初始值</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端学习</title>
    <link href="/2023/03/28/%E5%89%8D%E7%AB%AF/"/>
    <url>/2023/03/28/%E5%89%8D%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<hr><style>    #box1{    width: 100px;    height: 150px;    background-color: yellow;    text-align: center;    line-height: 200px;    }    #div1{        width:40px;        height: 40px;        background: skyblue;    }    div.h{        color: purple;        background: yellow;    }    span.h{        color: skyblue;        background: green;    }</style><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>HTML的全称为<ruby>Hyper Text Markup Language<rt>超文本标记语言</rt></ruby><br>网页的组成元素有<strong><ruby>文本 图片<rt>主要这俩</rt></ruby></b></strong> 音频 视频 超链接<br>网页实质上是由代码组成的<br>前端的代码通过浏览器的转化(解析与渲染)组成用户看到的网页<br>一个标准的web骨架由头部与身体组成,同时要在首行声明语言</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>开发工具有vscode HBuilderX等,但此二较为热门<br>vscode可以通过输入!,并使用tab补全第一项内容进行框架生成</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!--这是注释--&gt;</span><br></code></pre></td></tr></table></figure><p>html的注释格式较为特殊,Ctrl+&#x2F;可以快速注释本行<br>注释用于方便他人理解,自己也可能在之后忘记代码的用途</p><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>标签大多需要有始有终,&lt; &gt;和&lt;&#x2F; &gt;<br>单标签例如下划线&lt;br&gt;和&lt;hr&gt;<br>标签之间的关系大多为父子(嵌套)与兄弟<br>标签中可以拥有多个属性,属性和标签名之间用空格隔开,属性与属性之间也是一样.</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>HTML的标题语法为<br>&lt;h1到h6&gt; &lt;&#x2F;h1到h6&gt;<br>在markdown中为#的数量,一个#为h1</p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>段落使用<br>&lt;p&gt; &lt;&#x2F;p&gt;</p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>&lt;br&gt;</p><h3 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h3><p>&lt;hr&gt;</p><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><table><thead><tr><th align="center">字符</th><th align="center">表现</th><th align="center"></th><th align="center">字符</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">b</td><td align="center">加粗</td><td align="center"></td><td align="center">strong</td><td align="center">加粗</td></tr><tr><td align="center">u</td><td align="center">下划线</td><td align="center"></td><td align="center">ins</td><td align="center">下划线</td></tr><tr><td align="center">i</td><td align="center">倾斜</td><td align="center"></td><td align="center">em</td><td align="center">倾斜</td></tr><tr><td align="center">s</td><td align="center">删除线</td><td align="center"></td><td align="center">del</td><td align="center">删除线</td></tr></tbody></table><hr>左边为视觉要素,表示无意义的加粗等,右边为强调<a href="https://markdown.com.cn/intro.html#markdown-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">点此访问markdown标题语法官网</a><h2 id="媒体标签"><a href="#媒体标签" class="headerlink" title="媒体标签"></a>媒体标签</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>标准格式为:&lt;img src&#x3D;”” alt&#x3D;””&gt;<br>src属性为图片的地址,当图片加载失败时,alt的文本才会被显示<br>title属性为悬停时显示的信息<br>width和height为宽高,如果仅设置其中一个,则图片按比例缩放.同时设置两个可能造成图片的变形</p><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>路径分为<strong>绝对路径与相对路径</strong>,绝对路径仅需了解,一般使用相对路径<br>绝对路径:从盘符开始的路径,或者也可以使用一段网址<br>相对路径:相对路径分为三个级别</p><ul><li>上级:使用..&#x2F;表示上级目录,返回几级就输几次,例如<strong>..&#x2F;..&#x2F;文件夹名&#x2F;目标文件</strong></li><li>同级:直接输入<strong>目标文件</strong>或<strong>.&#x2F;目标文件</strong></li><li>下级:<strong>文件夹名&#x2F;目标文件</strong></li></ul><h3 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h3><p>格式:&lt;audio src&#x3D;””&gt; &lt;&#x2F;audio&gt;</p><table><thead><tr><th align="center">属性名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">音频的路径</td></tr><tr><td align="center">controls</td><td align="center">显示播放控件</td></tr><tr><td align="center">autoplay</td><td align="center">自动播放(部分浏览器不支持)</td></tr><tr><td align="center">loop</td><td align="center">循环播放</td></tr></tbody></table><hr><audio src="/audio/This Old House.mp3" controls></audio>因为暂不明白如何使用外部插件播放器,所以在此使用网易云音乐提供的播放器<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28828712&auto=1&height=66"></iframe><h3 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h3><p>格式:&lt;video src&#x3D;””&gt; &lt;&#x2F;video&gt;</p><table><thead><tr><th align="center">属性名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">视频的路径</td></tr><tr><td align="center">controls</td><td align="center">显示播放控件</td></tr><tr><td align="center">autoplay</td><td align="center">自动播放(谷歌浏览器中配合muted实现静音)</td></tr><tr><td align="center">loop</td><td align="center">循环播放</td></tr></tbody></table><p><del>你就当我在这放了记忆中的玛妮吧</del><br><a href="https://www.imjw.cc/play/2553-1-1/" target="_blank">记忆中的玛妮在线播放</a></p><iframe src="//player.bilibili.com/player.html?aid=&bvid=BV1md4y137Kr&cid=339262048&page=1&high_quality=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>格式:&lt;a href&#x3D;”此处存放链接”&gt;显示的文字&lt;&#x2F;a&gt;<br>链接也可以放入本地文件地址,比如放入..&#x2F;首页.html,就可以回到首页<br>如果还不知道跳转的地址,可以将href的值写入一个#(空连接),在之后改为正式地址<br>井号地址的链接自带颜色的变化,同时在点击之后会在地址栏加上#,所以也可以用于页内元素的跳转<br>target属性的取值可以改变跳转效果</p><table><thead><tr><th align="center">取值</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">_self</td><td align="center">在当前窗口中跳转(默认)</td></tr><tr><td align="center">_blank</td><td align="center">在新窗口中跳转</td></tr></tbody></table><p><a href="www.baidu.com" target="_blank">跳转到百度</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表的CSS样式写法为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.a</span>&#123;    <span class="hljs-comment">/*使用类选择器或者id*/</span><br><span class="hljs-attribute">list-style-type</span>:square ;  <span class="hljs-comment">/*type可以换成别的值*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>常见的属性值有</p><ul><li>none：不使用项目符号</li><li>disc：实心圆</li><li>circle：空心圆</li><li>square：实心方块</li><li>decimal：阿拉伯数字 </li><li>lower-alpha：小写英文字母 </li><li>upper-alpha：大写英文字母 </li><li>lower-roman：小写罗马数字 </li><li>upper-roman：大写罗马数字</li></ul><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p><del>这一块还是markdown语法方便</del><br>HTML的无序列表使用,type的类型可以是disc(默认值),circle,square</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>赤<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>橙<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>黄<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>绿<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>- 青  <span class="hljs-comment">&lt;!--此处开始为markdown的无序语法--&gt;</span><br>- 蓝<br>- 紫<br></code></pre></td></tr></table></figure><ul>    <li>赤</li>    <li>橙</li>    <li>黄</li>    <li>绿</li></ul><ul><li>青</li><li>蓝</li><li>紫<br>出现一点空行是因为markdown语法和HTML语法不能相邻使用</li></ul><h2 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h2><p>有序列表可以更改序号的类型,type后的值可以是a,A,i,I</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>3. 王五 <span class="hljs-comment">&lt;!--然而,markdown的有序在前面加序号空格就行了--&gt;</span><br></code></pre></td></tr></table></figure><ol type="A">    <li>张三</li>    <li>李四</li></ol><ol start="3"><li>王五</li></ol><h2 id="自定"><a href="#自定" class="headerlink" title="自定"></a>自定</h2><table><thead><tr><th align="center">标签名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">dl</td><td align="center">表示自定义列表的整体,用于包裹dt&#x2F;dd标签</td></tr><tr><td align="center">dt</td><td align="center">表示自定义列表的主题</td></tr><tr><td align="center">dd</td><td align="center">表示自定义列表的针对主题的每一项内容</td></tr></tbody></table><p>dd前会默认显示缩进效果<br>dl标签中仅允许包含dt&#x2F;dd标签<br><del>说实话,实际效果有点丑</del><br>展示:</p><dl>    <dt>标题</dt>    <dd>内容1</dd>    <dd>内容2</dd></dl><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th align="center">标签名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">table</td><td align="center">表格整体,可以包含多个tr</td></tr><tr><td align="center">tr</td><td align="center">表格每行,用于包含td</td></tr><tr><td align="center">td</td><td align="center">表格单元格,包含内容</td></tr></tbody></table><p>上面的表格语法为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|标签名|说明|<br>|:----:|:----:|<br>|table|表格整体,可以包含多个tr|<br>|tr|表格每行,用于包含td|<br>|td|表格单元格,包含内容|<br></code></pre></td></tr></table></figure><p>HTML的语法为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>标签名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>说明<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>table<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>表格整体,可以包含多个tr<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>tr<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>表格每行,用于包含td<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>td<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>表格单元格,包含内容<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果:</p><table>    <tr>        <td>标签名</td>        <td>说明</td>    </tr>    <tr>        <td>table<td>        <td>表格整体,可以包含多个tr</td>    </tr>    <tr>        <td>tr<td>        <td>表格每行,用于包含td</td>    </tr>    <tr>        <td>td<td>        <td>表格单元格,包含内容</td>    </tr></table><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><table><thead><tr><th align="center">属性名</th><th align="center">属性值</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">border</td><td align="center">数字</td><td align="center">边框宽度</td></tr><tr><td align="center">width</td><td align="center">数字</td><td align="center">表格宽度</td></tr><tr><td align="center">height</td><td align="center">数字</td><td align="center">表格高度</td></tr></tbody></table><p>实际开发时针对样式效果推荐使用css设置</p><h3 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h3><table><thead><tr><th align="center">标签名</th><th align="center">属性值</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">cation</td><td align="center">表格大标题</td><td align="center">表示表格整体大标题,默认在表格顶部居中</td></tr><tr><td align="center">th</td><td align="center">表头单元格</td><td align="center">表示一列小标题,通常用于表格第一行,默认内部文字加粗并居中显示</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果演示:</p><table border="2"><caption>个人信息</caption>    <tr>        <th>姓名</th>        <th>性别</th>    </tr>    <tr>        <td>张三</td>        <td>男</td>    </tr>    <tr>        <td>李四</td>        <td>男</td>    </tr></table>在markdown里好像不能正常显示,把这段复制到vscode的中就可以了<h3 id="标签进阶"><a href="#标签进阶" class="headerlink" title="标签进阶"></a>标签进阶</h3><table><thead><tr><th align="center">标签名</th><th align="center">名称</th></tr></thead><tbody><tr><td align="center">thead</td><td align="center">表格头部</td></tr><tr><td align="center">tbody</td><td align="center">表格主题</td></tr><tr><td align="center">tfoot</td><td align="center">表格底部</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这些加了之后实际效果也无改变,仅仅只是给浏览器看的,使执行更加高效</p><h3 id="表格合并"><a href="#表格合并" class="headerlink" title="表格合并"></a>表格合并</h3><p>将多个单元格合并为一个</p><table><thead><tr><th align="center">标签名</th><th align="center">属性值</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">rowspan</td><td align="center">合并的个数</td><td align="center">跨行水平合并</td></tr><tr><td align="center">colspan</td><td align="center">合并的个数</td><td align="center">跨列垂直合并</td></tr></tbody></table><p>只有同一个标签结构的单元格才能合并,不能跨标签合并(thead,tbody,tfoot)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>空位(确信)<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table border="2"><caption>个人信息</caption>    <tr>        <th>姓名</th>        <th>性别</th>    </tr>    <tr>        <td>张三</td>        <td rowspan="2">男</td>    </tr>    <tr>        <td>李四</td>    </tr>    <tr>        <td colspan="2">空位(确信)</td>    </tr></table><h3 id="表格边框合并"><a href="#表格边框合并" class="headerlink" title="表格边框合并"></a>表格边框合并</h3><p>在CSS中添加border-collapse:collapse;<br>之后表格便会将单元格合并<br>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-collapse: separate;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>普通<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>示例<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>示例<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>占位<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>占位<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-collapse: collapse;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>合并<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>示例<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>示例<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>占位<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>占位<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>可供收集信息的框<br>可以根据type属性值的不同展现不同的效果</p><table><thead><tr><th align="center">标签名</th><th align="center">type属性值</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">input</td><td align="center">text</td><td align="center">文本框,输入密码</td></tr><tr><td align="center">input</td><td align="center">password</td><td align="center">密码框,输入密码</td></tr><tr><td align="center">input</td><td align="center">radio</td><td align="center">单选框,用于多选一</td></tr><tr><td align="center">input</td><td align="center">checkbox</td><td align="center">多选框,用于多选多</td></tr><tr><td align="center">input</td><td align="center">file</td><td align="center">文件选择,用于上传文件</td></tr><tr><td align="center">input</td><td align="center">submit</td><td align="center">提交按钮,用于提交</td></tr><tr><td align="center">input</td><td align="center">reset</td><td align="center">重置按钮,用于重置</td></tr><tr><td align="center">input</td><td align="center">button</td><td align="center">一个没什么用的按钮,用于配合js添加功能</td></tr></tbody></table><p>radio的属性并没有真正实现单选,还需要加name属性,可以对其进行分组,同一组中仅能选择一个值.checked属性可以默认选中<br>file的属性可以加入multiple属性进行多文件选择,不加为单选<br>按钮的具体功能需要配合from标签,如果提交与重置按钮想要使用,需要提供一个父级标签form<br>按钮(button)默认是没有文字的,用户也不知道有什么用,需要一个value标签增加文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>文本框:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入文本就好&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>密码框:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入密码&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <span class="hljs-comment">&lt;!--自带加密--&gt;</span><br>邮箱:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>电话:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>单选框:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>未知<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>武装直升机<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>多选框:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>文件上传:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>提交按钮:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>重置按钮:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>按钮<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点此鼠标寿命-1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>还是按钮:<span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>没什么用<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><form action="">文本框:<input type="text" placeholder="输入文本就好"><br>密码框:<input type="password" placeholder="输入密码"><br> <!--自带加密-->邮箱:<input type="email"><br>电话:<input type="tel"><br>单选框:<input type="radio" name="gender" checked>男<input type="radio" name="gender">女<input type="radio" name="gender">未知<input type="radio" name="gender">武装直升机<br>多选框:<input type="checkbox"><br>文件上传:<input type="file" multiple><br>提交按钮:<input type="submit"><br>重置按钮:<input type="reset"><br></form>按钮<input type="button" value="点此鼠标寿命-1"><br>还是按钮:<button>没什么用</button><p>button按钮也可以加入很多标签和功能,也可以&lt;button type&#x3D;”submit”&gt; &lt;&#x2F;button&gt;,这样就得到了一个带有提交功能的按钮</p><h4 id="表单时间"><a href="#表单时间" class="headerlink" title="表单时间"></a>表单时间</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>年月日：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>年月：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;month&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>年周：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;week&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>时间：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;time&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>年月日：<input type="date" /></p><p>年月：<input type="month" /></p><p>年周：<input type="week" /></p><p>时间：<input type="time" /></p><h3 id="select下拉菜单标签"><a href="#select下拉菜单标签" class="headerlink" title="select下拉菜单标签"></a>select下拉菜单标签</h3><p>提供多个选择项的下拉菜单表单控件<br>select:下拉菜单的整体<br>option:下拉菜单的每一项<br>属性:selected(默认选中)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周一<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周二<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周三<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周四<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周五<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>周六<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>&gt;</span>周日<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <span class="hljs-comment">&lt;!--默认选中--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><select>    <option>周一</option>    <option>周二</option>    <option>周三</option>    <option>周四</option>    <option>周五</option>    <option>周六</option>    <option selected>周日</option></select><h3 id="textarea文本域标签"><a href="#textarea文本域标签" class="headerlink" title="textarea文本域标签"></a>textarea文本域标签</h3><p>在网页中提供可输入多行文本的表单控件<br>标签名:textarea<br>常见属性:</p><ul><li>cols:规定了文本域内可见行数</li><li>rows:规定了文本域的宽度<br>注意事项:右下角可以<strong>拖拽改变大小</strong>,实际建议配合css使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span>Tell us your story:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;story&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;story&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;33&quot;</span>&gt;</span><br>It was a dark and stormy night...<br>也许还有人记得史努比?<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p><label for="story">Tell us your story:</label></p><textarea id="story" name="story"          rows="5" cols="33">It was a dark and stormy night...也许还有人记得史努比?</textarea><h3 id="数据联想表单"><a href="#数据联想表单" class="headerlink" title="数据联想表单"></a>数据联想表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list_name&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><datalist id="list_name"><option>选项1</option><option>选项2</option><option>选项3</option></datalist><h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><p>用于绑定内容和表单标签的关系<br>标签名label<br>使用方法①:</p><ol>    <li>使用label标签把内容包裹起来</li>    <li>在表单标签上添加id属性</li>    <li>在label标签的for属性中设置对应的id属性值</li></ol>使用方法②:<br><ol><li>直接使用label标签把内容和表单标签一起包裹起来</li><li>需要把表单的label标签的for属性删除</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br></code></pre></td></tr></table></figure><p><input type="radio" name="gender" id="male"><label for="male">男</label></input><input type="radio" name="gender" id="female"><label for="female">女</label></input></p><p>实际效果其实也就是点击文字时也可以触发按钮控件,之前的按钮必须点击按钮触发,点击文字无效</p><p>第二种写法:(为了美观所以换行)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><p><label><input type="radio" name="gender" id="male">男</input></label><br><label><input type="radio" name="gender" id="female">女</input></label></p><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><h3 id="无语义的布局标签"><a href="#无语义的布局标签" class="headerlink" title="无语义的布局标签"></a>无语义的布局标签</h3><p>无语义的标签中大量使用div和span这两个标签</p><ul><li>div标签:一行仅显示一个</li><li>span标签:一行可以显示多个<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>赵七<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>赵八<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><div>张三</div><div>李四</div><div>王五</div><span>赵六</span><span>赵七</span><span>赵八</span></li></ul><p>其实也算是行内和块状元素?</p><h3 id="有语义的布局标签"><a href="#有语义的布局标签" class="headerlink" title="有语义的布局标签"></a>有语义的布局标签</h3><p>在HTML5的新版本中,推出了一些有语义的标签供开发者使用</p><table><thead><tr><th align="center">标签名</th><th align="center">语义</th></tr></thead><tbody><tr><td align="center">header</td><td align="center">网页头部</td></tr><tr><td align="center">nav</td><td align="center">网页导航</td></tr><tr><td align="center">footer</td><td align="center">网页底部</td></tr><tr><td align="center">aside</td><td align="center">网页侧边栏</td></tr><tr><td align="center">section</td><td align="center">网页区块</td></tr><tr><td align="center">article</td><td align="center">网页文章</td></tr></tbody></table><p>以上标签显示特点和div一致,但是比div多了不同的语义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>头部<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>文章<span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>网页底部<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里就不显示效果了,网页布局大致是这样</p><h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><p>有些符号在HTML语言中并不能被正常输出,例如&lt;&gt;,这时可以通过字符实体表达.<br>具体的字符实体可以参考其他站点的文件,这里就暂不提供了<br>字符实体的结构为:&amp;nbsp;&amp;nbsp;<strong><ruby>&amp;英文;<rt>挺麻烦的</rt></ruby></strong></p><h3 id="一个临时加入的测试"><a href="#一个临时加入的测试" class="headerlink" title="一个临时加入的测试"></a>一个临时加入的测试</h3><p>输出犯罪嫌疑人张三 李四 王五 赵六 孙七<br>其中张三李四为盗窃,赵六孙七为抢劫,王五是包庇罪<br>张三李四犯罪时间为2023.1.24 21:07<br>赵六孙七犯罪时间为2023.1.25 1:03<br>王五不记录犯罪时间<br>周八吴九是盗窃案的受害者,张三李四是抢劫案的受害者<br>表格最下方为:坦白从宽,抗拒从严</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>犯罪嫌疑人名单<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>罪行<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>犯罪时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>受害人<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>盗窃<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2023.1.24 21:07<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>周八 <span class="hljs-symbol">&amp;nbsp;</span>吴九<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>包庇<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>无<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>无<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>抢劫<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2023.1.25 1:03<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>张三 <span class="hljs-symbol">&amp;nbsp;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>孙七<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table border="2">    <caption>犯罪嫌疑人名单</caption>    <tr>        <th>姓名</th>        <th>罪行</th>        <th>犯罪时间</th>        <th>受害人</th>    </tr>    <tr>        <td>张三</td>        <td rowspan="2">盗窃</td>        <td rowspan="2">2023.1.24 21:07</td>        <td rowspan="2">周八 &nbsp;吴九</td>    </tr>    <tr>        <td>李四</td>    </tr>    <tr>        <td>王五</td>        <td>包庇</td>        <td>无</td>        <td>无</td>    </tr>        <td>赵六</td>        <td rowspan="2">抢劫</td>        <td rowspan="2">2023.1.25 1:03</td>        <td rowspan="2">张三 &nbsp;李四</td>    </tr>    <tr>        <td>孙七</td>    </tr></table><h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><p>CSS:层叠样式表(Cascading style sheets)<br>CSS的作用是给页面中的HTML标签设置样式<br>CSS写在style标签中,style标签一般写在head里面,title标签的下方</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:purple;<br><span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">30px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>&#125;<br><span class="hljs-comment">/*选择器&#123;css属性&#125;*/</span><br></code></pre></td></tr></table></figure><h3 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h3><p>CSS有三种引入方式</p><ol><li>内嵌<ul><li>虽然可以写在任何位置，但通常写在head标签中</li></ul></li><li>外联<ul><li>需要通过link标签在网页中引入</li></ul></li><li>行内<ul><li>不建议，配合js使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!--外联引入在头部输入以下代码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;路径&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--行内使用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:darkred;font-size: 20px;&quot;</span>&gt;</span>文字<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><table><thead><tr><th align="center">引入方式</th><th align="center">书写位置</th><th align="center">作用范围</th><th align="center">使用场景</th></tr></thead><tbody><tr><td align="center">内嵌式</td><td align="center">CSS写在style标签中</td><td align="center">当前页面</td><td align="center">小案例</td></tr><tr><td align="center">外联式</td><td align="center">CSS写在单独的css文件中，通过link标签引入</td><td align="center">多个页面</td><td align="center">项目中</td></tr><tr><td align="center">行内式</td><td align="center">CSS写在标签的style属性中</td><td align="center">当前标签</td><td align="center">配合js使用</td></tr></tbody></table><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><div>结构：<strong style="color:red;">标签名</strong>{css属性名：属性值；}</div>通过标签名，找到页面中的所有这类标签，设置样式<ol>    <li>标签选择器选择的是一类标签，而不是单独某一个</li>    <li>标签选择器无论嵌套多深，都可以找到对应的标签</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-comment">/*所有段落字体变红*/</span><br></code></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><div>结构：<strong style="color:red;">.类名</strong>{css属性名：属性值；}</div>通过类名，找到页面中所有带有这个类名的标签，设置样式注意点：<ol><li>所有标签上都有class属性，属性的属性值称为类名</li><li>类名可以由数字，字母，下划线，杠组成，但不能以数字和杠开头</li><li>一个标签可以同时有多个类名，类名之间以空格隔开</li><li>类名可以重复，一个类选择器可以同时选中多个标签</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.one</span>&#123;<br><span class="hljs-attribute">color</span>: purple; <span class="hljs-comment">/*将类名为one的标签改为红色字体样式*/</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>带有指定类名的标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><div>结构：<strong style="color:red;">#id属性值</strong>{css属性名：属性值；}</div>通过id属性值，找到页面中带有这个id属性值的标签，设置样式<br>注意点：<ol>    <li>所有标签上都有id属性</li>    <li>id属性值类似于身份证号码，在页面中是唯一且不可重复的</li>    <li>一个标签上仅有一个id属性值</li>    <li>一个id选择器仅能选中一个标签</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-id">#id</span>&#123;<br><span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><div>结构：<strong style="color:red;">*</strong>{css属性名：属性值；}</div>找到页面中所有标签，设置样式极少情况下会使用，可以用于去除标签默认的margin和padding<h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><div>属性名：<strong style="color: red;">font-size</strong></div><div>属性：<strong style="color: red;">数字 + px</strong></div>注意点：<ul><li>谷歌浏览器默认文字大小是16px</li><li>单位需要设置，否则无效<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><div>属性名：<strong style="color: red;">font-weight</strong></div>取值：<ul><li><p>关键字：</p>  <table>      <tr>          <th style="font-weight: normal;">正常</th>          <th style="font-weight: normal;">normal</th>      </tr>      <tr style="background-color: dimgrey;">          <th style="font-weight: bold;">加粗</th>          <th style="font-weight: bold;">bold</th>      </tr>  </table></li><li><p>纯数字：100~900的整百数：</p>  <table>      <tr>          <th style="font-weight: 400;">正常</th>          <th style="font-weight: 400;">400</th>      </tr>      <tr style="background-color: dimgrey;font-weight: bold;">          <th style="font-weight: 700;">加粗</th>          <th style="font-weight: 700;">700</th>      </tr>  </table>注意点：</li><li><p>不是所有字体都提供了九种粗细，因此部分取值页面中无变化</p></li><li><p>实际开发中以：正常、加粗两种取值使用最多</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>&#125;<br><span class="hljs-selector-tag">h1</span>&#123;<br><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字体样式（倾斜）"><a href="#字体样式（倾斜）" class="headerlink" title="字体样式（倾斜）"></a>字体样式（倾斜）</h3><div>属性名：<strong style="color: red;">font-style</strong></div>取值：<ul>    <li>正常(默认值):normal</li>    <li>倾斜:italic</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">font-style</span>: italic;<br>&#125;<br></code></pre></td></tr></table></figure><div style="font-style: italic;">嗯？</div><h3 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h3><div>属性名：<strong style="color: red;">font-family</strong></div><div>常见取值：字体1，字体2，字体3...等</div><p>常见取值：</p><ul><li>具体字体：微软雅黑，宋体，黑体，楷体等</li><li>字体系列：sans-serif,serif,monospace等<br>渲染规则：</li></ul><ol><li>从左往右按顺序查找，如果电脑中未安装该字体</li><li>如果都不支持，此时会根据操作系统，显示最后字体系列的默认字体<br>注意点：</li><li>如果字体名称中存在的多个单词，推荐使用引号包裹</li><li>最后一项字体系列不需要引号包裹</li><li>网页开发时。尽量使用系统常见字带字体，保证不同用户浏览网页都可以正常显示<table> <tr>     <td>系统</td>     <td>默认字体</td> </tr> <tr>     <td>Windows</td>     <td>微软雅黑</td> </tr> <tr>     <td>macOS</td>     <td>草方</td> </tr></table></li></ol><p>示例：</p><div style="font-size: 20px;font-family: 楷体;">20px的楷体</div><h3 id="常见字体系列（了解即可）"><a href="#常见字体系列（了解即可）" class="headerlink" title="常见字体系列（了解即可）"></a>常见字体系列（了解即可）</h3><h4 id="无衬线-sans-serif"><a href="#无衬线-sans-serif" class="headerlink" title="无衬线(sans-serif)"></a>无衬线(sans-serif)</h4><ol><li>特点：文字笔画粗细均匀，并且首尾无装饰</li><li>场景：网页中大多采用无衬线字体</li><li>常见该系列字体：黑体、Arial</li></ol><h4 id="衬线字体"><a href="#衬线字体" class="headerlink" title="衬线字体"></a>衬线字体</h4><ol><li>特点：文字笔画粗细不均</li><li>场景：报刊书籍中应用广泛</li><li>常见该系列字体：宋体、Times New Roman</li></ol><h4 id="等宽字体"><a href="#等宽字体" class="headerlink" title="等宽字体"></a>等宽字体</h4><ol><li>特点：每个字母或文字的宽度相等</li><li>场景：一般用于程序代码编写，有利于代码的阅读和编写</li><li>常见该系列字体：Consolas、fira code</li></ol><p>示例：</p><div style="font-size: 20px;font-family: sans-serif;">20px的sans-serif</div><div style="font-size: 20px;font-family: serif;">20px的serif</div><div style="font-size: 20px;font-family: monospace;">20px的monospace</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">font-family</span>: 微软雅黑,黑体,sans-serif;<br>&#125;  <span class="hljs-comment">/*如果没有安装微软雅黑，按黑体显示，无黑体则任意一种非称线字体*/</span><br></code></pre></td></tr></table></figure><h3 id="样式的层叠问题"><a href="#样式的层叠问题" class="headerlink" title="样式的层叠问题"></a>样式的层叠问题</h3><p>如果给同一个标签设置了相同的属性，此时样式会层叠（覆盖），写在最下面的会生效<br>tip：</p><ul><li>CSS(Cascading style sheets)<strong>层叠样式表</strong></li></ul><h3 id="字体font的相关属性的连写"><a href="#字体font的相关属性的连写" class="headerlink" title="字体font的相关属性的连写"></a>字体font的相关属性的连写</h3><div>属性名：<strong style="color: red;">font(复合属性)</strong></div>取值：<ul><li>font:style weight size family<br>省略要求：</li><li>只能省略前两个，省略后相当于设置了默认值</li><li>如果同时设置单独和连写形式，单独的样式写在连写的下方，或者单独的样式写在连写的里面</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">font</span>:italic <span class="hljs-number">700</span> <span class="hljs-number">40px</span> 宋体;  <span class="hljs-comment">/*连写*/</span><br><span class="hljs-comment">/*style weight size 字体*/</span><br><span class="hljs-comment">/*font-style:nomral 这是style单独写出来*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><div>属性名：<strong style="color: red;">text-indent</strong></div>取值：<ul><li>数字+px</li><li>数字+em（1em&#x3D;当前标签font-size的大小）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">text-indent</span>: <span class="hljs-number">32px</span>; <span class="hljs-comment">/*文本默认字号16px，此处开头缩进两个字体*/</span><br><span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>; <span class="hljs-comment">/*文本缩进两个字体*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实际上也就是每段开头空出两个字体大小</p><h4 id="水平对齐"><a href="#水平对齐" class="headerlink" title="水平对齐"></a>水平对齐</h4><div>属性名：<strong style="color: red;">text-align</strong></div>取值：    <table>        <tr>            <td>属性值</td>            <td>效果</td>        </tr>        <tr>            <th>left</th>            <th>左对齐</th>        </tr>        <tr>            <th>center</th>            <th>居中对齐</th>        </tr>        <tr>            <th>right</th>            <th>右对齐</th>        </tr>    </table>注意点：<ul><li>如果需要让文本水平居中，text-align属性给文本所在标签（文本的父元素设置）</li></ul><h5 id="水平居中方法总结"><a href="#水平居中方法总结" class="headerlink" title="水平居中方法总结"></a>水平居中方法总结</h5><p>text-align:center</p><ol><li>文本</li><li>span标签、a标签</li><li>input、img标签<br>注意点：</li><li>如果需要让以上元素水平居中，需要给以上元素的父元素设置<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/img/猫猫祭拜.png" alt="cat" title="超智慧生物(误)"></li></ol><h5 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h5><div>属性名：<strong style="color: red;">text-decoration</strong></div>取值：    <table>        <tr>            <td>属性值</td>            <td>效果</td>        </tr>        <tr>            <th>underline</th>            <th>下划线</th>        </tr>        <tr>            <th>line-through</th>            <th>删除线</th>        </tr>        <tr>            <th>ouverline</th>            <th>上划线</th>        </tr>        <tr>            <th>none</th>            <th>无装饰线</th>        </tr>    </table>注意点：<ul><li>开发中会使用text-decoration:none;清除a标签默认的下划线（a标签为超链接标签）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">text-decoration</span>: underline;<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">text-decoration</span>: line-through;<br>&#125;<br><span class="hljs-selector-tag">h1</span>&#123;<br><span class="hljs-attribute">text-decoration</span>: overline;<br>&#125;<br><span class="hljs-selector-tag">a</span>&#123;<br><span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><p>控制一行的上下行间距，行高的组成为：上间距，文本高度，下间距</p><div>属性名：<strong style="color: red;">line-height</strong></div>取值：    <ul>        <li>数字+px</li>        <li>倍数（当前标签font-size的倍数）</li>    </ul>应用：<ol><li>让单行文本垂直居中可以设置line-height：文字父元素高度</li><li>网页精准布局时，会设置line-height：1 可以取消上下间距</li></ol><p>注意点：</p><ul><li>如果同时设置了行高和font连写，注意覆盖问题</li><li>font:style weight size&#x2F;line-height family;<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">font</span>:italic <span class="hljs-number">700</span> <span class="hljs-number">30px</span>/<span class="hljs-number">2</span> 楷体;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="颜色取值-了解"><a href="#颜色取值-了解" class="headerlink" title="颜色取值(了解)"></a>颜色取值(了解)</h2><p>HTML中的颜色取值方式有四种</p><ul><li>预定义的颜色名，如red,green,blue</li><li>rgb表示法,如rgb(0,0,0),rgb(255,255,255)</li><li>rgba表示法：红绿蓝三原色+a表示透明度，取值范围为0-1，如rgba(255,255,255,0.5)</li><li>十六进制表示法:#开头，将数字转换成16进制表示,如#000000，#ff0000</li></ul><h1 id="盒"><a href="#盒" class="headerlink" title="盒"></a>盒</h1><h2 id="盒样例"><a href="#盒样例" class="headerlink" title="盒样例"></a>盒样例</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#box1</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;   <br><span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br><span class="hljs-attribute">background-color</span>: yellow;<br><span class="hljs-attribute">text-align</span>: center;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><div id="box1">盒1</div><h2 id="盒样式"><a href="#盒样式" class="headerlink" title="盒样式"></a>盒样式</h2><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><p>当需要使盒居中时,可以通过margin:0 auto完成自动居中<br>此为块元素居中,align是块元素内的元素基于父元素居中</p><ol><li>可以直接给当前标签内嵌居中</li><li>一般针对固定宽度的盒子,不设宽度则占满浏览器</li></ol><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>根据HTML标签的嵌套关系,选择父元素后代中满足条件的元素</p><div>选择器语法：<strong style="color: red;">选择器1 选择器2{CSS}</strong></div>找到选择器1标签的后代,找到满足选择器2样式的标签,设置样式,无视嵌套深度<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>: purple;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>此<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这也是有效的</p><h3 id="自带选择器"><a href="#自带选择器" class="headerlink" title="自带选择器"></a>自带选择器</h3><p>根据HTML标签的嵌套关系,仅寻找一层嵌套关系</p><div>选择器语法：<strong style="color: red;">选择器1>选择器2{CSS}</strong></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">a</span>&#123;<br><span class="hljs-attribute">color</span>: darkred;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>div子代<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>div中p的子代<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时运行,则div的p的子代不会变色,因为这是二层</p><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>其实就和普通选择器差不多</p><div>选择器语法：<strong style="color: red;">选择器1,选择器2{CSS}</strong></div>通过逗号可以使得多种元素共用一个样式<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>选中页面中同时满足多个选择器的标签</p><div>选择器语法：<strong style="color: red;">选择器1.选择器2{CSS}</strong></div>找到页面中既能被选择器1选中,又能被选择器2选中的标签必须紧挨,中间没有其他东西如果交集选择器中有标签选择器,标签选择器必须写在最前方<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.mine</span>&#123;<br><span class="hljs-attribute">color</span>: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mine&quot;</span>&gt;</span>p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mine&quot;</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此处仅会令div变色,因为css要求div连着类mine</p><h3 id="hover伪类选择器"><a href="#hover伪类选择器" class="headerlink" title="hover伪类选择器"></a>hover伪类选择器</h3><p>作用:选中鼠标<strong>悬停</strong>在元素上的状态设置样式</p><div>选择器语法：<strong style="color: red;">选择器1:hover {CSS}</strong></div><h3 id="emmet语法"><a href="#emmet语法" class="headerlink" title="emmet语法"></a>emmet语法</h3><p>通过简写语法快速生成代码,了解就好,类似于选择器的写法</p><table><thead><tr><th align="center">记忆</th><th align="center">示例</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">标签名</td><td align="center">div</td><td align="center">&lt;div&gt;&lt;div&gt;</td></tr><tr><td align="center">类选择器</td><td align="center">.red</td><td align="center">&lt;div class&#x3D;”red”&gt; &lt;div&gt;</td></tr><tr><td align="center">id选择器</td><td align="center">#one</td><td align="center">&lt;div id&#x3D;”one”&gt;&lt;div&gt;</td></tr><tr><td align="center">交集选择器</td><td align="center">p.red#one</td><td align="center">&lt;p class&#x3D;”red” id&#x3D;”one”&gt;&lt;&#x2F;p&gt;</td></tr><tr><td align="center">子代选择器</td><td align="center">ul&gt;li</td><td align="center">&lt;ul&gt;&lt;div&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</td></tr><tr><td align="center">内部文本</td><td align="center">ul&gt;li(内容)</td><td align="center">&lt;ul&gt;&lt;li&gt;内容&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</td></tr><tr><td align="center">列表嵌套</td><td align="center">ul&gt;li*3</td><td align="center">&lt;ul&gt;&lt;li&gt;&lt;li&gt;&lt;li&gt;&lt;&#x2F;li&gt;&lt;&#x2F;li&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</td></tr></tbody></table><h2 id="背景相关属性"><a href="#背景相关属性" class="headerlink" title="背景相关属性"></a>背景相关属性</h2><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><div>属性名:<strong style="color: red;">background-color(bgc)</strong></div>属性值的颜色取值有:关键字,rgb表示法,rgba表示法,十六进制注意点:背景颜色值默认透明:rgba,transparent <br>背景颜色不会影响盒子大小,这使得可以看清盒子的大小和位置,一般布局中会先给盒子设置背景颜色<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div id="div1">div</div><h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><div>属性名:<strong style="color: red;">background-image(bgi)</strong></div>属性值是background-image:url('图片路径');<p>背景图片中的url可以省略引号<br><br>背景图片默认在水平和垂直方向平铺<br><br>背景图片仅仅有装饰效果,类似于背景色,并不能改变盒子大小<br>,但是可以主动改变图片的属性<br> 暂不示例</p><h3 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h3><div>属性名:<strong style="color: red;">background-repeat(bgr)</strong></div><table><thead><tr><th align="center">取值</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">repeat</td><td align="center">默认值,水平竖直都平铺</td></tr><tr><td align="center">no-repeat-x</td><td align="center">不水平平铺</td></tr><tr><td align="center">no-repeat</td><td align="center">不平铺</td></tr><tr><td align="center">repeat-x</td><td align="center">沿着水平方向x轴平铺</td></tr><tr><td align="center">repeat-y</td><td align="center">沿着垂直方向y轴平铺</td></tr></tbody></table><h3 id="背景位置"><a href="#背景位置" class="headerlink" title="背景位置"></a>背景位置</h3><div>属性名:<strong style="color: red;">background-position(bgp)</strong></div>background-position: 水平方向位置 垂直方向位置属性值有两种<ul><li>方位名词(最多只能表示9个位置)<ol><li>水平方向:left,center,right</li><li>垂直方向:top,center,bottom</li></ol></li><li>数字+px(坐标)<ul><li>坐标系<ol><li>原点(0,0),盒子的左上角</li><li>x轴水平向右</li><li>y轴水平向下</li></ol></li><li>操作: 将图片左上角与坐标点重合即可</li></ul></li></ul><p>方位名词取值和坐标取值可以混用,第一个值水平,第二个垂直</p><h3 id="背景相关属性连写"><a href="#背景相关属性连写" class="headerlink" title="背景相关属性连写"></a>背景相关属性连写</h3><div>属性名:<strong style="color: red;">background(bg)</strong></div><p>属性值:单个属性值的连写,空格隔开<br>书写顺序:<br><br>推荐使用:background:color image repeat position<br><br>按需省略,在PC端如果盒子大小和背景一样,可以直接写background:url()<br><br>要么单独的样式写在连写下面,要么写在连写里面</p><h4 id="背景相关属性-1"><a href="#背景相关属性-1" class="headerlink" title="背景相关属性"></a>背景相关属性</h4><p>在网页中展示一张图片的效果:<br><br>方法1:直接写img标签,不设置框高默认原尺寸<br><br>方法2:div标签+背景图片<br><br>需要设置div的宽高,背景图片只是装饰的css样式,不能撑开图片</p><h3 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><p>特点:独占,宽度默认继承父元素(color属性设置默认整行),高度按内容撑开,可以设置宽高<br>代表标签:div,p,h,ul,li,dl,dt,dd,form,header,nav,footer</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.h</span>&#123;<br><span class="hljs-attribute">color</span>: purple;<br><span class="hljs-attribute">background</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h&quot;</span>&gt;</span>大概是这样<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="h">大概是这样</div><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>特点:一行显示多个,宽度和高度默认由内容撑开(color仅延展到文字),不可设置宽高<br>代表标签:a,span,b,u,i,s,strong,ins,em,del</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.h</span>&#123;<br><span class="hljs-attribute">color</span>: purple;<br><span class="hljs-attribute">background</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h&quot;</span>&gt;</span>大概是这样<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class="h">大概是这样</span></p><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>特点:一行可以显示多个<br>可以设置宽高<br>代表标签:</p><ul><li>input,textarea,button,select…</li><li>特殊情况:img标签有行内块元素特点,但是Chrome调试工具中显示结果为inline</li></ul><table><thead><tr><th align="center">元素模式</th><th align="center">元素排列</th><th align="center">设置样式</th><th align="center">默认宽度</th><th align="center">包含</th></tr></thead><tbody><tr><td align="center">块级元素</td><td align="center">一行只能放一个块级元素</td><td align="center">可以设置宽度高度</td><td align="center">容器的100%</td><td align="center">容器级可以包含任何标签</td></tr><tr><td align="center">行内元素</td><td align="center">一行可以放多个行内元素</td><td align="center">不可以直接设置宽度高度</td><td align="center">它本身内容的宽度</td><td align="center">容纳文本或者其他行内元素</td></tr><tr><td align="center">行内块元素</td><td align="center">一行放多个行内块元素</td><td align="center">可以设置宽度高度</td><td align="center">它本身内容的宽度</td><td align="center"></td></tr></tbody></table><h4 id="CSS的元素显示模式"><a href="#CSS的元素显示模式" class="headerlink" title="CSS的元素显示模式"></a>CSS的元素显示模式</h4><p>特殊情况下需要元素模式的转换,一个模式的元素需要另外一种模式的特性<br>比如想要增加链接&lt;&gt;的触发范围<br>转为块元素:display:block;<br>行内元素:display:inline;<br>行内块元素:display:inline-block;<br>将行内元素a转换为块元素:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">a</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="snipaste的使用"><a href="#snipaste的使用" class="headerlink" title="snipaste的使用"></a>snipaste的使用</h3><p>一个截图工具,可以让你将截图贴回屏幕上<br>alt取色,shift切换取色模式<br>F1截图,同时测量大小,设置箭头,书写文字等</p><h3 id="单行文字垂直居中"><a href="#单行文字垂直居中" class="headerlink" title="单行文字垂直居中"></a>单行文字垂直居中</h3><p>CSS并未提供文字垂直居中的代码,可以使用其他方法实现<br>解决方案:让文字的行高等同于盒子高度,即可让文字在当前盒内垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-attribute">line-height</span>= <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">height</span> = <span class="hljs-number">40px</span>;<br></code></pre></td></tr></table></figure><p>实际为将文字挤在中间</p><h2 id="CSS的背景"><a href="#CSS的背景" class="headerlink" title="CSS的背景"></a>CSS的背景</h2><p color="red"><strong>background-color</strong>属性定义了元素的背景颜色</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>作业内容</title>
    <link href="/2023/03/28/%E4%B8%8A%E6%AC%A1%E7%9A%84%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/03/28/%E4%B8%8A%E6%AC%A1%E7%9A%84%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<p>1.Java是由<strong>Sun Microsystems</strong>公司推出的<strong>跨平台</strong>,<strong>完全面向对象</strong>的一种高级的编程语言<br>2.自面世以来,java以<strong>易学易用</strong>,<strong>功能强大</strong>的特点得到了广泛的应用<br>3.使用java语言可以编写<strong>桌面GUI程序,web开发,嵌入式开发&#x2F;功能手机开发,Android APP开发</strong>等.<br>4.<strong>Java</strong>被誉为最优秀的计算机语言<br>5.1995年,<strong>SunWorld大会</strong>上推出了一种极富创造力的,面向对象的程序设计语言–Java,它由Java之父<strong>James Gosling</strong>博士设计<br>6.作为Sun研究院博士,詹姆斯·戈士林亲手设计了Java语言,并完成了<strong>Java技术的原始编译器和虚拟机</strong>.<br>7.Java最初的名字是<strong>Oak</strong>,1995年被重新命名为Java<br>8.Java是一种通过<strong>解释方式</strong>来执行的语言,其语法规则和<strong>C++<strong>类似.同时,Java也是一种</strong>跨平台</strong>的程序设计语言,用Java语言编写的程序,可以运行在任何平台和设备上.例如,可以跨越<strong>IBM个人电脑,MAC苹果计算机,各种微处理器硬件平台</strong>,以及<strong>Windows,Unix,Linux,Mac OS</strong>等系统平台,实现”一次编写,到处运行”<br>9.Java非常适合于<strong>企业网络和Internet环境</strong>，现在已成为<strong>Internet</strong>中最受欢迎、最有影响的编程语言之一。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>待编辑</title>
    <link href="/2023/03/28/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E6%A1%88%E4%BE%8B/"/>
    <url>/2023/03/28/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;书山有路勤为径\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;学海无涯苦作舟\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>求取整数较大值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>  <span class="hljs-comment">//定义函数值为整形,参数为整形</span><br>&#123;<br><span class="hljs-type">int</span> z;<br><span class="hljs-keyword">if</span> (x &gt; y)<br>&#123;<br>z = x;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>z = y;<br>&#125;<br><span class="hljs-keyword">return</span> z;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>;  <span class="hljs-comment">//声明使用函数compare,明显调用的表达式前的括号必须具有(指针)函数类型</span><br><br><span class="hljs-type">int</span> a, b, c;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入数字:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入数字:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b);<br>c = compare(a, b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;较大者为%d\n&quot;</span>, c);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>华氏度转摄氏度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">float</span> f, c;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入华氏度:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;f);<br>c = (<span class="hljs-number">5.0</span> / <span class="hljs-number">9</span>)*(f - <span class="hljs-number">32</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n摄氏度为:%f&quot;</span>, c);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>求模</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> num1,num2;  <span class="hljs-comment">//求模只能发生在整数之间</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请分别键入两个数字以求取模:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;num1, &amp;num2);<br><span class="hljs-type">int</span> result = num1 % num2;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n求得为:%d&quot;</span>,result);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>求两千年以内闰年</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">for</span> (year = <span class="hljs-number">0</span>; year &lt;= <span class="hljs-number">2000</span>; year++)     <br>    &#123;<br>        <span class="hljs-comment">//能被4整除且不能被100整除，或者能被400整除即为闰年则输出</span><br>        <span class="hljs-keyword">if</span> ((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>))<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, year);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>强制类型转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">float</span> a = <span class="hljs-number">3.14159</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">4</span>;<br>b = (<span class="hljs-type">float</span>)(a + <span class="hljs-number">5</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>,(<span class="hljs-type">int</span>)a,b);<br>&#125;<br></code></pre></td></tr></table></figure><p>幂函数运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">float</span> n,m,e;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分别键入数字与次幂:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f%f&quot;</span>,&amp;n,&amp;m);<br>e = <span class="hljs-built_in">pow</span>(n,m);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;结果为:%f&quot;</span>,e);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用输出格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">float</span> b = <span class="hljs-number">123.4567</span>;<br><span class="hljs-type">double</span> c = <span class="hljs-number">12345678.1234567890</span>;<br><span class="hljs-type">char</span> d = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%6d\n&quot;</span>, a);<span class="hljs-comment">//输出六位整数,空缺的四位用空格/0替代</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%o\n&quot;</span>, a);<span class="hljs-comment">//输出八进制整数12</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%x\n\n&quot;</span>, a);<span class="hljs-comment">//输出无符号16进制整数,结果为a</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b=%f\n&quot;</span>, b);<span class="hljs-comment">//输出单精度浮点数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b(%%f)=%f,b(%%lf)=%lf\n&quot;</span>, b, b);  <span class="hljs-comment">//两个%%防止被转义,输出为%.lf输出保留六位小数的双精度浮点数,补足位0</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c=%f\n&quot;</span>, c);   <span class="hljs-comment">//保留六位小数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lf格式下c=%lf,9.15lf格式下c=%9.15f\n\n&quot;</span>, c, c); <span class="hljs-comment">//小数点前连带小数点输出九位,小数点后输出15位</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d=%c\n&quot;</span>, d);  <span class="hljs-comment">//输出字符a</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>收拢字幕</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;welcome to the Internet&quot;</span>;<br><span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;#######################&quot;</span>;<br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> right = <span class="hljs-keyword">sizeof</span>(arr1)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) - <span class="hljs-number">1</span>; <span class="hljs-comment">//取arr1长度-1(数组下标从0开始).字符串后有\0,非字符串无.\0仅占用内存不计算长度</span><br><span class="hljs-comment">// strlen(arr1-1)输出结果为24,需要引用string.h函数库</span><br><span class="hljs-keyword">while</span> (left &lt;= right)<br>&#123;<br>arr2[left] = arr1[left];<br>arr2[right] = arr1[right];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, arr2);<br>Sleep(<span class="hljs-number">200</span>); <span class="hljs-comment">//延时200毫秒</span><br>system(<span class="hljs-string">&quot;cls&quot;</span>); <span class="hljs-comment">//执行清屏</span><br>left++;<br>right--;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;welcome to the Internet&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符+1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">char</span> a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请键入单个字符&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;后一位为%c&quot;</span>,a+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出10%</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> num=<span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%%\n&quot;</span>,num);<br></code></pre></td></tr></table></figure><p>正确获取输入值,但是使用逗号隔开</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;键入两个数值,使用逗号隔开\n&quot;</span>);<br><span class="hljs-type">int</span> a, b;<br><span class="hljs-type">char</span> c;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;a, &amp;b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, a, b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>随机数生成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;****1.play 0.exit****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*********************\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">game</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> guess = <span class="hljs-number">0</span>;<br>num = rand() % <span class="hljs-number">100</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">//rand生成随机数函数,需要srand()函数设置随机起点</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入一个数字\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;guess);<br><span class="hljs-keyword">if</span> (guess &gt; num)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;猜大了\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess &lt; num)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;猜小了\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;猜对了,数字确实为:%d\n&quot;</span>, num);<br>Sleep(<span class="hljs-number">2000</span>);<br>system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> player = <span class="hljs-number">0</span>;<br>srand((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)time(<span class="hljs-literal">NULL</span>));<span class="hljs-comment">//函数的参数需要为无符号整形(unsigned int),返回的时间戳为长整形</span><br><span class="hljs-keyword">do</span><br>&#123;<br>menu();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;player);<br><span class="hljs-keyword">switch</span> (player) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>game();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出游戏\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;很难理解说的是什么吗?\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <br><span class="hljs-keyword">while</span> (player);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出水仙花数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-type">int</span> a = i % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = i / <span class="hljs-number">10</span>%<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> c = i / <span class="hljs-number">100</span>;<br><span class="hljs-keyword">if</span> (a*a*a+b*b*b+c*c*c == i) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d是一个水仙花数\n&quot;</span>, i);<br>&#125;<br>i++;<br>&#125; <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出1-100内个位或十位或能被7整除的数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br><span class="hljs-type">int</span> a = i % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = i / <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">7</span> || b == <span class="hljs-number">7</span> || i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前为%d,敲!\n&quot;</span>, i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建结构体存入多人年龄和姓名,输出年龄较大者的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Info</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Info</span> <span class="hljs-title">people</span>[5] =</span> &#123; &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>&#125;,&#123;<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">24</span>&#125;,&#123;<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">34</span>&#125;,&#123;<span class="hljs-string">&quot;赵六&quot;</span>,<span class="hljs-number">25</span>&#125;,&#123;<span class="hljs-string">&quot;孙七&quot;</span>,<span class="hljs-number">32</span>&#125; &#125;;<br><span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (people[i].age &gt; people[max].age)<br>&#123;<br>max = i;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s,%d&quot;</span>, people[max].name, people[max].age);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出由1,2,3,4组成的互不相同且无重复数字的三位数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i,j,k;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">5</span>;i++) &#123; <span class="hljs-comment">// 以下为三重循环</span><br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">5</span>;j++) &#123;<br>            <span class="hljs-keyword">for</span> (k=<span class="hljs-number">1</span>;k&lt;<span class="hljs-number">5</span>;k++) &#123; <span class="hljs-comment">// 确保i、j、k三位互不相同</span><br>                <span class="hljs-keyword">if</span> (i!=k&amp;&amp;i!=j&amp;&amp;j!=k) &#123; <br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d,%d\n&quot;</span>,i,j,k);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习</title>
    <link href="/2023/03/28/C%E8%AF%AD%E8%A8%80/"/>
    <url>/2023/03/28/C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>\n是换行  48(0)  65(A)  97(a)</p><hr><h1 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h1><p>C语言的代码编译成可执行程序一共四步<br>预处理:宏定义,头文件的展开,条件编译等,同时将代码中的注释删除,并不会检查语法<br>编译:检查语法,将预处理文件编译生成汇编文件<br>汇编:将汇编文件生成目标文件(二进制文件)<br>链接:C语言写的程序是需要依赖各种库的,所以编译之后还要将库链接到最终的可执行程序中去</p><p>gcc的编译过程:<br>预处理:gcc -E hello.c -o hello.i<br>编  译:gcc -S hello.i -o hello.s<br>汇  编:gcc -c hello.s -o  hello.o<br>链  接:gcc    hello.o -o hello<br>-o在此可以指定生成的文件类型</p><p><strong>C语言的第一行应该声明所调用的函数库</strong>,一般为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>一个简单地hello world程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  <span class="hljs-comment">//声明所调用的函数库</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;   <span class="hljs-comment">//函数主入口</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world!\n&quot;</span>);  <span class="hljs-comment">//打印hello world内容</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//返回值0,结束程序</span><br>&#125;<br></code></pre></td></tr></table></figure><p>整形:不包含小数部分的数据</p><h2 id="CPU与寄存器"><a href="#CPU与寄存器" class="headerlink" title="CPU与寄存器"></a>CPU与寄存器</h2><p>寄存器是CPU内部最基本的存储单元<br>CPU对外是通过总线(地址,控制,数据)来和外部设备交互的,总线的宽度是8位,那么此为一个8位CPU<br>如果总线是32位,则为32位CPU<br>有一种CPU的寄存器是32位,但总线仅64位,成为准32位CPU<br>所有64位可兼容32位指令,32位可以兼容16位,称其为向下兼容性</p><h3 id="寄存器-缓存-内存之间的关系"><a href="#寄存器-缓存-内存之间的关系" class="headerlink" title="寄存器,缓存,内存之间的关系"></a>寄存器,缓存,内存之间的关系</h3><p>离CPU最近的是寄存器,然后是缓存,最后内存<br>CPU计算时,先预先将要使用的数据读到内存,然后再把即将使用的数据读到寄存器.数据交换关系是CPU&lt;-&gt;寄存器&lt;-&gt;内存<br>    如果经常操作内存中同一地址的数据,会影响速度,所以在寄存器与内存之间设置一个缓存(缓存可以高速读取)</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>C语言中有很多种数据格式<br>char字符,数字整形<br>short短整形<br>int整形<br>long 长整形<br>long long比长整形更长<br>float单精度浮点数<br>double双精度浮点数<br>储存形式格式:<br>bit(比特):一个二进制代表一位,数据传输总是以bit(位)为单位<br>Byte(字节):一个字节为8个二进制位,成为八位,是计算机中最小的存储单位<br>Word(双字节):两个字节,16比特位<br>DWord(两个word):4个字节,32位<br>K M G T四个单位的转换为1024</p><p>八进制以0开头,十六进制以0x开头,二进制不能在C语言中表达出来.C语言中常用八,十,十六进制<br>八进制由0-7组成,十六进制为0-9与A-F</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;A&#x27;</span>;  <span class="hljs-comment">//向内存申请储存字符A,定义一个字符类变量并为其赋值为A</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch); <span class="hljs-comment">//声明打印字符类数据,输出ch</span><br></code></pre></td></tr></table></figure><p>单精度浮点数在机内占4个字节,双精度浮点数在机内占8个字节,有效数字位数不用于单精度浮点数.单精度有效数字位8位,双精度16位,单精度使用内存空间更少.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">float</span> f = <span class="hljs-number">5.2</span>; <span class="hljs-comment">//打印一个浮点数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,f);<br></code></pre></td></tr></table></figure><p>附加:<br>在不同为层级的程序块代码中不能未声明就使用变量,例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">main()&#123;<br>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时便会报错,但是可以在主函数之外声明,从而使得局部变量变为全局变量.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> ch =<span class="hljs-string">&#x27;A&#x27;</span>;<br>main()&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小数的存储格式"><a href="#小数的存储格式" class="headerlink" title="小数的存储格式"></a>小数的存储格式</h3><p>若使用非浮点值类型存储小数,则会向下取整一个整数<br>小数在进行乘法运算时乘的只有小数部分<br>0.432只有三位,所以只进行3位取整<br>0.432的二进制数为0.011</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>1、C语言中的标识符只能由字母，数字，下划线组成而且第一个字符必须是字母或下划线。 如：int 34A是非法的，而int a_s是合法的 .<br>2、C语言中区分大小写 如：int A;和int a; 代表不同的变量.<br>3.不能与关键字重名</p><h2 id="查看不同数据类型可申请的内存范围"><a href="#查看不同数据类型可申请的内存范围" class="headerlink" title="查看不同数据类型可申请的内存范围"></a>查看不同数据类型可申请的内存范围</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">short</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span>));<br><span class="hljs-type">short</span> age = <span class="hljs-number">20</span>;  <span class="hljs-comment">//向内存申请两个字节存放短整形20</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//以上结果依次占用1,2,4,4,8,4,8个字节,每个字节8个比特位</span><br></code></pre></td></tr></table></figure><p>不同的数据应当按需使用空间,最大化效率<br>可使用的内存地址范围为2^比特位-1 long的内存范围在32位和64位系统下的表现不同(4&#x2F;8)<br>float后表示的常量要加f,用以表示这是一个单精度浮点数,在编译器转换后不会丢失精度(不加会被认作双精度浮点数)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">float</span> w = <span class="hljs-string">&#x27;7.0f&#x27;</span> ;<span class="hljs-comment">//将单精度浮点类型的变量w进行定义,并初始化为单精度浮点数7.0</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>,w); <span class="hljs-comment">//以单精度浮点类型(%f)打印字符w</span><br></code></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量有</p><ol>    <li>字面常量,例如d,5,3.14等</li>    <li>const修饰的常变量,加上const变量后无法被写入,例如const int num = 10;</li>    <li>#difine定义的标识符常量</li>    <li>枚举常量,可以一一列举的常量,这些数据有排比的规律,起始值默认为0</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>C语言中没有字符串,使用字符数组来表示字符串数据<br>用双引号括起来的一串字符<br>字符串一定是char类型数组,char类型数组不一定是字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//字符数组,一组相同类型的元素</span><br><span class="hljs-type">char</span> arr[] = <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">//此处隐藏了\0</span><br><span class="hljs-comment">//或者&#123;&#x27;hello&#x27;&#125;;</span><br><span class="hljs-comment">//&#123;&#x27;hello&#x27;,&#x27;world&#x27;&#125;;此为一个二维数组</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>\0是字符串的结束标识,每串字符后都有隐藏,不指定长度则没有&#x2F;0结束符,有多少个元素就有多长<br>指定长度后没有赋值的元素自动补充&#x2F;0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> arr2[] = &#123;<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>&#125;;<br><span class="hljs-comment">//若不加双引号,则输出为ASCII码值,0为结束符/0</span><br></code></pre></td></tr></table></figure><p>使用strlen求取<strong>字符串</strong>长度,求取的长度为&#x2F;0之前的有效字符串<br>sizeof是数组长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> <span class="hljs-comment">//strlen在此函数库中</span></span><br><span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);<br></code></pre></td></tr></table></figure><p>如果此时使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(arr2));<br></code></pre></td></tr></table></figure><p>则会得到一个随机值,数组arr2中并未拥有\0,则长度会不断增长,直到在地址中遇到下一个\0</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>假设需要在屏幕上打印一个目录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c:\test\test.c&quot;</span>);<br></code></pre></td></tr></table></figure><p>输出的结果仅有c: est est.c<br>\与第一个t结合成了新的转义字符<br>print在打印数据的时候可以指定打印的格式<br>%c只能输入一个字符,用””框住.%s可输入一串不超过20字符的字符串<br>可以使用\来表示一根反斜杠,防止被转义符转义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c:\\test\\test.c&quot;</span>);<br></code></pre></td></tr></table></figure><p>\a可以触发电脑的蜂鸣器一次<br>\r回车<br>\ddd表示1-3个八进制数字,d为数字. \130会被表示为X,100的权重为8的二次方,30为8的一次方,所以130会被视作1,3,0<br>1x8^2+3x8^1+0x8^0&#x3D;88,在ASCII码中88表示为X,所以可以使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,<span class="hljs-string">&#x27;\130&#x27;</span>); <span class="hljs-comment">//换成%d可输出88,%c仅可输出单个字符x</span><br></code></pre></td></tr></table></figure><p>在ASCII码中,A为第65位,使用%c输出\101,则会得到A<br>\xdd表示两个16进制数字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,<span class="hljs-string">&#x27;\x30&#x27;</span>);<br></code></pre></td></tr></table></figure><p>输出字符0,3x16^1+0x16^0&#x3D;48,在ASCII码中表示0<br>此时若使用strlen求取c:\test\328\test.c可得到长度14，\t被识别为转义字符，仅占用一个长度单位，\32也被识别为一个转义字符</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">c语言风格注释为 <span class="hljs-comment">//文字文字文字//</span><br>c++c语言风格注释为<span class="hljs-comment">//文字文字</span><br></code></pre></td></tr></table></figure><p>C语言风格缺陷为不能嵌套使用</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>scanf(“%d”,&amp;a);表示接收的值为字符类型,为变量a赋值.接受的类型可以被更改.<br>使用scanf获取用户输入的值,当输出一个未被赋值的变量时,输出的结果为-858993460.在下一个输入的字符无法被取用时会直接停止赋值操作,剩下的字符将会留存至后续获取.例如获取两个数字,输入1,2.此时仅可获取1 第二个数字无法获取,第二个变量未赋值.在获取到逗号时结束本次获取.<br>scanf遇到空格和回车时都会直接结束本次获取<br>当对预留空间进行赋值时,键入的数据量需要为预留空间-1,因为末尾会出现&#x2F;0<br>例如char ch[10];<br>此时使用scanf对其赋值helloworld时会报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;练习C(y/s)?:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input);<br><span class="hljs-keyword">if</span> (input == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Let&#x27;s do it&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (input == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lazzy boy&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;huh?&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者使用putchar与getchar<br>依次获取键盘输入的字符,每次仅存入一个字符.可获得屏幕上无法直接显示的特殊字符,例如回车与特殊控制字符.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span> = a,b;<br>a = getchar();<br>b = getchar();<br><span class="hljs-built_in">putchar</span>(a);<br><span class="hljs-built_in">putchar</span>(b);<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者使用gets接收字符串,但gets和scanf都不安全,都以回车作为结束标识,容易造成缓存区溢出.gets接收字符串时可以带空格.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> ch[<span class="hljs-number">11</span>];<br>gets(ch);<br><span class="hljs-comment">//若想使用scanf接收带空格的字符串,可以使用正则表达式%[^\n]表示接收非换行的所有字符</span><br></code></pre></td></tr></table></figure><h3 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h3><p>fgets把用户输入的回车以作为字符串的一部分.通过scanf和gets接收字符串时,不包含作为结尾的\n,但是fgets可以包含,不存在缓冲区溢出的问题.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> ch[<span class="hljs-number">10</span>];<br>fgets(ch,<span class="hljs-keyword">sizeof</span>(ch),<span class="hljs-built_in">stdin</span>);<span class="hljs-comment">//第一数据位为指针类型,指向一个缓冲区.第二位为输入数据的最大长度,stdin为系统提供的指针</span><br><span class="hljs-comment">//此时若输入helloworld,则输出为helloworl,此时数据不换行,因为9+1结束符,没有位置留给换行符</span><br></code></pre></td></tr></table></figure><h3 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h3><p>自带换行的字符串输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//此时占用输出为一个字节(\0)</span><br><span class="hljs-comment">//fputs = printf</span><br></code></pre></td></tr></table></figure><h1 id="内存与指针"><a href="#内存与指针" class="headerlink" title="内存与指针"></a>内存与指针</h1><p>强推：<a href="https://blog.csdn.net/qq_45194707/article/details/125186247">点此查看csdn博客</a></p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>内存是沟通CPU和硬盘的桥梁,暂存CPU的运算数据与硬盘等外部存储器交换的数据<br>内部存贮器,暂存程序&#x2F;数据–掉电丢失,目前常见的型号有SRAN,DRAM,DDR2,DDR3,DDR4<br>内存目前一般为4G-8G，计算机中内存划分为多个小单元格，一个单元格为一个内存单元。每个储存单元都有自己的编号，计算的32位系统上拥有32根地址线，产生1&#x2F;0的电信号，由此转换为数字信号，变为二进制序列。共可产生2^32个序列，当二进制的序列成为一个信号的编号时，我们便称其为该二进制的地址。<br>2^32次方&#x3D;42 9496 7296 此为可获取的bit<br>2^32&#x2F;8&#x3D;5 3687 0912 此为可获取的byte<br>536870912&#x2F;1024&#x3D;52 4288 此为可获取的KB<br>524288&#x2F;1024&#x3D;512 此为可获取的MB<br>32位系统最大可支持4gb的内存，4GB&#x2F;512MB&#x3D;8，所以有时你可以发现32位机的主板上插着两根分别装载4芯片的内存条<br>32位操作系统针对的32位的CPU设计，CPU的位是指一次性可处理的数据量是多少，1字节&#x3D;8位，32位处理器可以一次性处理4个字节的数据量，依次类推，应用程序只能使用2GB内存，数据中心版的32位操作系统最高支持64GB内存。<br>64位系统理论上支持16TB的内存使用。</p><h3 id="储存器"><a href="#储存器" class="headerlink" title="储存器"></a>储存器</h3><p>计算机的组成中,储存器用来储存程序和数据,辅助CPU进行运算.内存中的数据一般为无符号类型(unsigned).当可供使用的内存超出计算机所分配的地址时,超出部分则无效</p><h4 id="物理存储器和存储地址空间"><a href="#物理存储器和存储地址空间" class="headerlink" title="物理存储器和存储地址空间"></a>物理存储器和存储地址空间</h4><p>物理存储器:实际存在的具体存储器芯片<br>1.主板上插的内存条<br>2.显卡上的显示RAM芯片<br>3.各种适配卡上的RAM和ROM芯片</p><p>存储地址空间:对存储器编码的范围.常说的内存是指这一层含义<br>编码:对每个物理存储单元(字节)分配一个号码<br>寻址:可以根据分配的号码找到相应的存储单元,完成数据的读写<br>除了常见的数据类型外,数组和函数</p><h4 id="内存地址"><a href="#内存地址" class="headerlink" title="内存地址"></a>内存地址</h4><p>将内存抽象成一个很大的一维字符数组<br>编码就是对内存的每一个字节分配一个32&#x2F;64位的编号,这个内存编号为内存地址</p><h3 id="外存"><a href="#外存" class="headerlink" title="外存"></a>外存</h3><p>外部存储器,长时间保存程序&#x2F;数据–掉电不丢,常见有ROM,ERRROM,FLASH(NAND,NOR),硬盘,光盘</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>所以编号就是内存单元的地址，即指针就是地址。<br>指针的大小并不取决于类型，而取决于系统位数</p><p>一个数字使用16进制，占用两个字节来表示。标准为4列一行。比如用以表示数字10，在内存地址中则表示为0a 00 00 00.指针此时仅需要第一个字节0的地址，便可连带获取后续a 00 00 00的内存数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">16909060</span>;  <span class="hljs-comment">//申请变量a在内存中分配4个字节的空间</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,&amp;a);  <span class="hljs-comment">//此处使用%p打印地址格式的数据，&amp;a代表取地址a</span><br><span class="hljs-type">int</span>* pa = &amp;a;  <span class="hljs-comment">//pa专门用于存放地址，在C语言中pa叫做指针变量</span><br><span class="hljs-comment">//*说明pa为指针变量而非普通变量，int说明pa执行的对象时int类型</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">*pa = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>那么该变量数据变为0，内存上的数据也会变为00 00 00 00,实际为通过修改地址中储存的值间接修改变量的值<br>如果赋予错误的变量类型，比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> *pb = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>然后执行上述赋0的操作（pb&#x3D;0），则会发现在内存中该指针所指地址仅有首位变为00，后三位不动，输出结果变为16909056,在地址上的数据为00 03 02 01,获取进制转换时为01 02 03 00</p><p>指针的值是地址，但指针所指的地址是自身所绑定变量的地址。<br>例如向内存申请存放变量a并赋值1（int a &#x3D; 1;），然后将变量a与指针b进行绑定(int* b &#x3D; &amp;a;),此时便可使用%p与&amp;a来输出变量a在内存中的地址。<br>若要初始化一个指针，就必须令该指针绑定一个地址。要给地址，对于一个非指针的变量，需要先取得这个变量的地址，才能绑定给指针。对于一个指针变量，可以直接进行指针&#x3D;0的赋值操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* pa = &amp;a;<br>*pa = <span class="hljs-number">20</span>;  <span class="hljs-comment">////此处为解引用操作，通过pa里的地址找到a，然后再对变量a赋值0</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从另外一个角度来理解，指针类型决定了指针进行算数运算时，指针跳跃的步长，如int型指针加一，执针指向第四个字节后的位置，而char型指针加一，只跳跃一个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0x01020304</span>;<br><span class="hljs-type">char</span>* pa = &amp;a;<br>*pa = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可通过上述代码查看内存地址中数据的变化，执行pa &#x3D; 0后，该指针下的地址数据为00030201,若试图以int形式取出储存的值，则不会为0</p><p>你可以用指针指向指针，但是没有必要，而且你需要先绑定变量，再指向，你不能指向一个空指针来获取地址。</p><p>指针的大小都是相同的，指针用于存放地址，地址有多大，指针取多大</p><h3 id="野指针与空指针"><a href="#野指针与空指针" class="headerlink" title="野指针与空指针"></a>野指针与空指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*&amp;是升维取址符号</span><br><span class="hljs-comment">*是降维取址符号*/</span><br><span class="hljs-type">int</span> p =&amp;a; <span class="hljs-comment">//将a的地址值存入整形类变量p</span><br>*(<span class="hljs-type">int</span>*)p = <span class="hljs-number">100</span>; <span class="hljs-comment">//将变量p强制转换为指针类型</span><br><span class="hljs-comment">//简化为 int* p = &amp;a;*p = 100;</span><br></code></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>结构体使得C语言有能力描述复杂类型,可以创建新的类型<br>比如描述学生，学生包含：姓名，年龄，性别，学号这几项信息<br>这里只能用结构体来表达</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> //创建学生类型</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];  <span class="hljs-comment">//名字是字符，这里预使用20个字符</span><br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-string">&quot;我&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90.5</span>&#125;; <span class="hljs-comment">//结构体的创建与初始化</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %lf\n&quot;</span>,s.name,s.age,s.score);  <span class="hljs-comment">//打印结构变量中的name/age/score</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下列为结构地址指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">ps</span> =</span> &amp;s;<br></code></pre></td></tr></table></figure><p>打印时即可直接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %lf\n&quot;</span>,(*ps).name,(*ps).age,(*ps).score);  <span class="hljs-comment">//打印结构变量指针中的name/age/score</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %lf\n&quot;</span>ps-&gt;,name,ps-&gt;age,ps-&gt;score);  <span class="hljs-comment">//意思同上</span><br></code></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>循环的跳转语句有:break,continue,goto<br>break可以跳出循环,仅能跳出所在的循环<br>continue是结束本轮循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>L;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;long&quot;</span>);<br><span class="hljs-keyword">goto</span> L;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;time ago.&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="if循环"><a href="#if循环" class="headerlink" title="if循环"></a>if循环</h2><p>C语言用0与非0表示真假，if语句可以<br>if和else后不用加;，这两个关键词并不能成为单独的语句<br>goto为无条件跳转,跳转前需要加入一个标识(少用,逻辑性弱,易出bug)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> <br>语句<span class="hljs-number">1</span>；<br><span class="hljs-keyword">else</span>  <span class="hljs-comment">//此处可以变成else if，再加一次分支</span><br>语句<span class="hljs-number">2</span>；<br></code></pre></td></tr></table></figure><p>也可以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span> &amp;&amp; age &lt;<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>这样就是一句限定范围在18-20之间的数字，包括18<br>如果想要判定变量&#x3D;某数字，需要使用&#x3D;&#x3D;，单&#x3D;是赋值。if只和最近的else联用，当if下面再跟if，但else跟着下面的if时，上面的if判假则直接跳过下一个if。</p><p>当语句执行到return时，就会直接结束程序。<br>为了防止相等打成赋值，所以可以打成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (<span class="hljs-number">5</span> == num)<br></code></pre></td></tr></table></figure><p>奇偶判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> num = <span class="hljs-number">15</span>;<br><span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) <span class="hljs-comment">//此处为num除二后余1</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;奇数\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h3 id="Switch分支语句"><a href="#Switch分支语句" class="headerlink" title="Switch分支语句"></a>Switch分支语句</h3><p>一种分支语句,适用于多分支的情况<br>一直使用if else if的形式过于复杂,所以采用Switch语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> day = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, day);<br><span class="hljs-keyword">switch</span> (day)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期一&quot;</span>);<br><span class="hljs-keyword">break</span>;  <span class="hljs-comment">//跳出循环</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期二&quot;</span>);<br><span class="hljs-keyword">break</span>;  <span class="hljs-comment">//跳出循环</span><br><span class="hljs-comment">//以此类推了</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>case后面要求整形表达式，必须包含常量形，所以不能放一个变量n或者浮点数在case后面，字符也不行。<br>最后一个case后不一定要加break跳出，但是加上后更符合语法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">5.</span>.<span class="hljs-number">.6</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What you want to doing?&quot;</span>);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>上述也是可以的，case可以接case，也可以接Switch继续嵌套<br>如果没有使用范围内的值进行判断，可以使用default来进行默认值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入不符合规范!&quot;</span>);<br></code></pre></td></tr></table></figure><p>default后仍可加break</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> m = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">switch</span> (n)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:m++;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:n++;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">switch</span> (n)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>n++;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>m++; n++;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>m++;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入类型错误&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;m = %d,n = %d\n&quot;</span>, m, n);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述结果输出为m&#x3D;5,n&#x3D;3.case只是告诉从哪里进入语句，但不加break便不会主动跳出语句，这就导致case1&#x2F;2&#x2F;3&#x2F;4都被触发。break仅仅跳出代码块内部循环。</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> day = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(day&lt;<span class="hljs-number">31</span>) <span class="hljs-comment">//循环开始</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;One day passed away.&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;today is %d.\n&quot;</span>,day);<br>day++; <span class="hljs-comment">//day值+1</span><br>&#125;<br><span class="hljs-keyword">if</span>(day == <span class="hljs-number">31</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Aleady for a month.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//结束程序,返回结果0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>整数自身+1可以简写为a+&#x3D;1,等价于a&#x3D;a+1<br>C中可简写为a++或者++a,先用或先加,也存在a–与–a.</p><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h2><p>do while语句先进行语句执行再进行判定,所以即使循环满足条件,也会进行一次循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">do</span><br>&#123;<br>循环语句;<br>&#125;<br><span class="hljs-keyword">while</span>(); <span class="hljs-comment">//转回do所在行</span><br></code></pre></td></tr></table></figure><p>将break,continue插入时,都会提前结束循环,但continue根据插入的位置不同对该循环有不同的影响.</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span>(表达式<span class="hljs-number">1</span>;表达式<span class="hljs-number">2</span>;表达式<span class="hljs-number">3</span>)<br>循环语句:<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;<span class="hljs-type">int</span> &lt;= <span class="hljs-number">10</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>if,break,countinue可出现在for循环中,同样具有效果<br>不可在for循环内赋值,一旦出错可能造成循环失控</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>上述结果输出10个0,加入scanf后输出用户输入的10个数字,如果for后的括号仅有;;而没有判断部分,name会在代码块内进行无限循环.for中可嵌入for</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>; k = <span class="hljs-number">0</span>; i++, k++)<br>&#123;<br>k++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述不产生循环,for第一次执行便满足变量,直接结束循环到达return 0,i与k的值不产生变化.</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>求取一个数的阶乘:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入一个数求取阶乘:&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;sum);<br><span class="hljs-type">int</span> n = sum;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br>sum* = i;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>求取十个数的阶乘相加,首先需要创建数组,长度为10,不创建也可以,但要保证摧毁原有的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">加常量 a = a+<span class="hljs-number">3</span>; a+ = <span class="hljs-number">3</span>;<br>乘常量 a* = <span class="hljs-number">3</span>;<br>除常量 a/ = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>在十个元素内找到想要的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br><span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]); <span class="hljs-comment">//将数组arr的长度除单个数组0的,得到arr数组元素数量</span><br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> right = sz - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt;= right)<br>&#123;<br><span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (arr[mid] &lt; k)<br>&#123;<br>left = mid + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &gt; k)<br>&#123;<br>right = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;find it:%d\n&quot;</span>, mid);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (left &gt; right)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找不到\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下标从0开始,所以1-10对应的数组下标为0-9,上述为查找数组下标</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;welcome to the Internet&quot;</span>;<br><span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;#######################&quot;</span>;<br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> right = <span class="hljs-built_in">strlen</span>(arr1<span class="hljs-number">-1</span>); <span class="hljs-comment">//取arr1长度-1(数组下标从0开始).字符串后有\0,非字符串无.\0仅占用内存不计算长度</span><br><span class="hljs-keyword">while</span> (left &lt;= right)<br>&#123;<br>arr2[left] = arr1[left];<br>arr2[right] = arr1[right];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr2);<br>Sleep(<span class="hljs-number">200</span>); <span class="hljs-comment">//延时200毫秒</span><br>system(<span class="hljs-string">&quot;cls&quot;</span>); <span class="hljs-comment">//执行清屏</span><br>left++;<br>right--;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;welcome to the Internet&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述实为不断以arr2下标数值替换为arr1下标的数值.数组2下标0(#)被替换为数组1下标0(w),以此类推,左右同时进行.</p><p>将数组元素从小到大排序并输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(arr)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>);i++)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> f = i+<span class="hljs-number">1</span>; f&lt;<span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>); f++) &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (arr[i] &gt; arr[f]) &#123;<br>a = arr[f];<br>arr[f] = arr[i];<br>arr[i] = a;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) ; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数在数学中一般表示为f(x)&#x3D;x^2+1之类<br>此处为C语言中的相加程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> num1,num2; <span class="hljs-comment">//仅仅定义两个变量为int类型,未赋值</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2); <br><span class="hljs-type">int</span> sum = num1 + num2;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum = %d\n&quot;</span>,sum);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时将其中的int sum &#x3D; num1+num2;改为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> sum = Add(num1,num2);<br></code></pre></td></tr></table></figure><p>同时在主函数main之外声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br><span class="hljs-type">int</span> z = <span class="hljs-number">0</span>;<br>z = x + y;<br><span class="hljs-keyword">return</span> z;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处即为令函数(变量)Add承担运算,函数Add需要从主函数外部调用运算后将结果范围.函数的特点为简化代码与代码复用.<br>**exit(返回值)**也是一种结束,几乎等同于return,但是exit会直接结束程序的运行,而不是函数</p><h3 id="引入其他文件中的函数"><a href="#引入其他文件中的函数" class="headerlink" title="引入其他文件中的函数"></a>引入其他文件中的函数</h3><p>在同一工程中,可以使用extern int向全局声明一个变量,此时便可以在其他工程文件中未经声明便引用.<br>C语言调试可使用Fn+F11从光标所选处进行单步调试,以此查看bug出现位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//在主文件中需要有</span><br><span class="hljs-keyword">extern</span> 返回值类型 函数名(参数)&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="防止头文件重复包含"><a href="#防止头文件重复包含" class="headerlink" title="防止头文件重复包含"></a>防止头文件重复包含</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once <span class="hljs-comment">//第一种</span></span><br></code></pre></td></tr></table></figure><p>当需要引入其他全局函数时,除了extern声明外,也可以使用#include “你的文件名.h”来进行引入.不能在文件a中包含b,b中包含a,重复包含最多执行1024次,然后报错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __文件名_H__</span><br><span class="hljs-comment">//表示if not define,才进行头文件的引入</span><br></code></pre></td></tr></table></figure><h3 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h3><p>试用rand生成随机数,如果rand的seed(种子不变),则每次生成随机数时的起始值不变,后续生成的随机数也相同.一般使用时间戳作为rand函数的seed,时间不断在变化,所以起始值也在不断变化<br>原型为srand(),将函数time()的值强行转换为unsigned类型,通过NULL来清空历史值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">/*time_t timer = time(NULL);</span><br><span class="hljs-comment">srand((size_t)timer);简化为下一行*/</span> <br>srand ((<span class="hljs-type">size_t</span>)time(<span class="hljs-literal">NULL</span>)); <span class="hljs-comment">//set(设置)rand的随机数为time</span><br><span class="hljs-comment">//又作srand((unsigned)time(NULL))</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d\n&quot;</span>,rand());<span class="hljs-comment">//默认取值为0~32767</span><br><span class="hljs-comment">//范围如果限定为1-32,则需定为rand()%32+1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种<strong>相同类型</strong>的集合<br>如果仅使用变量创建数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">2</span>; <span class="hljs-comment">//以此类推</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>则太过复杂.可以使用函数arr来创建数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>int arr[10]代表向内存申请存放10个数据,类型为int.使用下表来访问数组,初始下标为0(此处下标为0处的数据为1).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">10</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,&quot;</span>,arr[i]);<br>i++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述为创建数组后输出数组中的数据,当元素的数量小于数组申请的元素位时.未定义的元素为默认为0,此时输出便是1,2,3,4,5,6,0,0,0,0</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> arr[行][列] = &#123;<br>&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;,<br>&#123;元素<span class="hljs-number">3</span>,元素<span class="hljs-number">4</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在多维数组中,需定义数组有几行几列,然后为其赋值<br>行之间仅逗号隔开,每行存入一个{}中<br>列与列之间用逗号隔开<br>当从多维数组中调用元素时,需指定行列,例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,arr[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h2><p>有:+ - * &#x2F; %</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">float</span> a = <span class="hljs-number">9</span> / <span class="hljs-number">2</span>;<br><span class="hljs-type">float</span> b = <span class="hljs-number">9</span> / <span class="hljs-number">2.0</span>;<br></code></pre></td></tr></table></figure><p>上述结果不一致,9&#x2F;2为整数类除以整数类,得到的结果丢失精度仅得4. 9&#x2F;2.0为整数类除以浮点类,此时整数类被强制升为浮点类,所以输出的结果为浮点类数值4.5</p><h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h2><p>有:&gt;&gt; &lt;&lt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> b = a &lt;&lt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为4,移位符号移动二进制位.2的二进制为0010,左移变为0100,得到4</p><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><p>有:&amp; ^ |</p><h2 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">= += -= *= /= ^= |= &gt; &gt;= &lt; &lt;=<br></code></pre></td></tr></table></figure><p>&amp;取地址</p><h2 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h2><p>sizeof 操作数的类型长度(单位为字节)<br>~对一个数的二进制按位取反(二进制位0与1互换)<br>(int)强制转换类型为int</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;  <span class="hljs-comment">//在C语言中，0表示假，非零为真</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, !a);<br><span class="hljs-keyword">if</span> (a)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a为真&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!a)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a为假&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>));  <span class="hljs-comment">//计算int类型数据长度</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span> a);  <span class="hljs-comment">//此处所得和上句相同，变量可括可不括，此处为计算变量a的数据长度，变量a属于int类型</span><br></code></pre></td></tr></table></figure><p>和Java不同,C语言中求取数组长度不能用.length函数,需要使用sizeof求取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> arr = [<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sz);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,~a);<br></code></pre></td></tr></table></figure><p>此处0为整形，具有四个字节，32个比特位，所以转化后32个0变成32个1<br>整数在内存中储存的是补码，整数二进制表示有三种：<br>源码，补码与反码<br>-1：<br>1000 0000 0000 0000 0000 0000 0000 0001(原码)第一位为1表示负数<br>1111 1111 1111 1111 1111 1111 1111 1110(反码)+1变为补码<br>1111 1111 1111 1111 1111 1111 1111 1111(补码)此种存入内存<br>正整数原码 补码 反码都相同<br>想要取得内存中的值，需要转换成原码，取出时为补码<br>两个用补码表示的数相加时,如果最高位(符号位)有进位,则进位被舍弃</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = (<span class="hljs-type">int</span>)<span class="hljs-number">3.14</span>;  <span class="hljs-comment">//3.14默认double，用此强制转换int</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><p>&#x3D;<br>&lt;<br>&lt;&#x3D;<br>!&#x3D; 用于测试“不相等”<br>&#x3D;&#x3D; 用于测试“相等”</p><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><p>&amp;&amp; 逻辑与（并且）<br>|| 逻辑或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> c = a &amp;&amp; b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,c);<br></code></pre></td></tr></table></figure><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h2><p>exp：expression表达式<br>exp1 ? exp2 : exp3<br>若表达式exp1成立，exp2计算，整个表达式的结果会变成exp2的结果<br>若exp不成立，exp3计算，表达式结果为exp3的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (a &gt; b) <br>max = a;<br><span class="hljs-keyword">else</span> <br>max = b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,max);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述等价于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br>max = a &gt; b ? a : b;  <span class="hljs-comment">//a是否&gt;b，是则a不是则b</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,max);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h2><p>用逗号隔开的一串表达式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>+<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);  <span class="hljs-comment">//经常出现在列举数组中</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> d = (a = b + <span class="hljs-number">2</span>,c = a - <span class="hljs-number">4</span>,b = <span class="hljs-number">5</span> + <span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><h2 id="下标引用-函数调用和结构单元"><a href="#下标引用-函数调用和结构单元" class="headerlink" title="下标引用,函数调用和结构单元"></a>下标引用,函数调用和结构单元</h2><p>[] () . -&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"> <span class="hljs-comment">//0,1,2,3,4,5,6,7,8,9</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,arr[<span class="hljs-number">5</span>]); <span class="hljs-comment">//此处输出数组下标为5的元素：6</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="常见关键字"><a href="#常见关键字" class="headerlink" title="常见关键字"></a>常见关键字</h2><p>1.C语言为你提供的，不能自己去创建,例如int，printf<br>2.关键字不能做变量名<br>auto 自动，每个局部变量都是auto修饰的，自动在代码块开始时创建，在代码块结束时销毁，在新C语言中有其他用法，平常被省略<br>break 打破循环<br>case 分支<br>char 字符类型<br>const 常变量，使变量不可修改<br>continue 继续<br>default 默认<br>do 一般连用while<br>else 一般与if连用<br>enum 枚举<br>extern 用于声明外部符号<br>float 单精度<br>for 用于循环<br>goto 语句<br>if 判断语句<br>int 整形<br>long 长整形<br>register 试图向编译器申请变量值在寄存器中(并不保证存储)，目前编译器可以自动识别部分数据是否需要存储入寄存器<br>return 返回<br>short 短整形<br>signed 有符号的<br>unsigned 无符号的<br>sizeof 数据长度<br>static 静态的<br>struct 结构器<br>Switch 语句一种<br>union 联合体(共用体)<br>void 空<br>volatile C语言中暂时不讲<br>while 循环</p><p>define与include属于预处理指令，并非关键字</p><h2 id="重点关键字"><a href="#重点关键字" class="headerlink" title="重点关键字"></a>重点关键字</h2><p>typedef 类型重定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> u_int;<br></code></pre></td></tr></table></figure><p>上述语句可以将unsigned int重命名为u_int</p><p>static 静态的<br>1.修饰局部变量<br>2.修饰全局变量<br>3.修饰函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>a++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">10</span>)<br>&#123;<br>test();  <span class="hljs-comment">//此处会将下一步重定向到void tese处</span><br>i++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述输出2 2 2 2 2 2 2 2 2 2 2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;  <span class="hljs-comment">//此处重新入循环时，变量a不会被摧毁，可以保留</span><br>a++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">10</span>)<br>&#123;<br>test();  <span class="hljs-comment">//此处会将下一步重定向到void tese处</span><br>i++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为a被保留，所以a的值会不断+1，输出结果变为2 3 4 5 6 7 8 9 10 11。static改变了局部变量的生命周期(实为储存类型被改变)<br>储存区域分为栈区 堆区与静态区，当a未被修饰时，a处于栈区，当被修饰后，处于静态区。每当int a &#x3D; 1被执行时，摧毁原有的变量a，再创建一个新的变量a &#x3D; 1，被放入静态区后便不会被摧毁。</p><p>extern 声明外部符号<br>当全局变量处于同一个项目中，便可通过该关键字进行声明调用<br>例如int a &#x3D; 1;<br>当想在同项目的其他源文件中调用时，需先用extern int a;以声明从外部调用该变量。全局变量在整个工程中都可以被调用，局部变量在代码块结束时便会被摧毁。<br>若将全局变量a用static进行修饰，放入静态储存区，也无法被调用，仅可在自己所在的源文件中进行调用。全局变量自身具有外部链接属性，被static修饰后被更改成内部连接属性<br>Add(a,b);也可将变量a，b相加</p><h1 id="简易计算程序"><a href="#简易计算程序" class="headerlink" title="简易计算程序"></a>简易计算程序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> num1 = <span class="hljs-number">0</span>;<span class="hljs-comment">//在内存中申请整形类 字符 变量num1</span><br><span class="hljs-type">int</span> num2 = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;num1,&amp;num2); <span class="hljs-comment">//将用户输入的数据转化为十进制,并储存到变量num1和num2中</span><br><span class="hljs-type">int</span> sum = num1 + num2;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum = %d\n&quot;</span>,sum);  <span class="hljs-comment">//以十进制输出字符类变量sum</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>若出现scanf返回值被忽略,改为scanf_s或添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SUCURE_NO_WARINGS 1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
